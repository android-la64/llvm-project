; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lsx  < %s | FileCheck %s

declare <16 x i8> @llvm.loongarch.lsx.vsrlrni.b.h(<16 x i8>, <16 x i8>, i32)
declare <8 x i16> @llvm.loongarch.lsx.vsrlrni.h.w(<8 x i16>, <8 x i16>, i32)
declare <4 x i32> @llvm.loongarch.lsx.vsrlrni.w.d(<4 x i32>, <4 x i32>, i32)
declare <2 x i64> @llvm.loongarch.lsx.vsrlrni.d.q(<2 x i64>, <2 x i64>, i32)

declare <16 x i8> @llvm.loongarch.lsx.vrepli.b(i32)
declare <8 x i16> @llvm.loongarch.lsx.vrepli.h(i32)
declare <4 x i32> @llvm.loongarch.lsx.vrepli.w(i32)
declare <2 x i64> @llvm.loongarch.lsx.vrepli.d(i32)

define <16 x i8> @lsx_vsrlrni_b_h(<16 x i8> %a, <16 x i8> %b) {
; CHECK-LABEL: lsx_vsrlrni_b_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsrlrni.b.h $vr0, $vr1, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <16 x i8> @llvm.loongarch.lsx.vsrlrni.b.h(<16 x i8> %a, <16 x i8> %b, i32 2)
  ret <16 x i8> %0
}

define <8 x i16> @lsx_vsrlrni_h_w(<8 x i16> %a, <8 x i16> %b) {
; CHECK-LABEL: lsx_vsrlrni_h_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsrlrni.h.w $vr0, $vr1, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <8 x i16> @llvm.loongarch.lsx.vsrlrni.h.w(<8 x i16> %a, <8 x i16> %b, i32 2)
  ret <8 x i16> %0
}

define <4 x i32> @lsx_vsrlrni_w_d(<4 x i32> %a, <4 x i32> %b) {
; CHECK-LABEL: lsx_vsrlrni_w_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsrlrni.w.d $vr0, $vr1, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <4 x i32> @llvm.loongarch.lsx.vsrlrni.w.d(<4 x i32> %a, <4 x i32> %b, i32 2)
  ret <4 x i32> %0
}

define <2 x i64> @lsx_vsrlrni_d_q(<2 x i64> %a, <2 x i64> %b) {
; CHECK-LABEL: lsx_vsrlrni_d_q:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vsrlrni.d.q $vr0, $vr1, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <2 x i64> @llvm.loongarch.lsx.vsrlrni.d.q(<2 x i64> %a, <2 x i64> %b, i32 2)
  ret <2 x i64> %0
}

define <16 x i8> @lsx_vrepli_b() {
; CHECK-LABEL: lsx_vrepli_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vldi $vr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <16 x i8> @llvm.loongarch.lsx.vrepli.b(i32 2)
  ret <16 x i8> %0
}

define <8 x i16> @lsx_vrepli_h() {
; CHECK-LABEL: lsx_vrepli_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vldi $vr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <8 x i16> @llvm.loongarch.lsx.vrepli.h(i32 2)
  ret <8 x i16> %0
}

define <4 x i32> @lsx_vrepli_w() {
; CHECK-LABEL: lsx_vrepli_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vldi $vr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <4 x i32> @llvm.loongarch.lsx.vrepli.w(i32 2)
  ret <4 x i32> %0
}

define <2 x i64> @lsx_vrepli_d() {
; CHECK-LABEL: lsx_vrepli_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vldi $vr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <2 x i64> @llvm.loongarch.lsx.vrepli.d(i32 2)
  ret <2 x i64> %0
}
