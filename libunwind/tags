!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AARCH64_BTI	src/assembly.h	98;"	d
ARM_HAS_BX	src/assembly.h	274;"	d
AbstractUnwindCursor	src/UnwindCursor.hpp	/^class _LIBUNWIND_HIDDEN AbstractUnwindCursor {$/;"	c	namespace:libunwind
CATCH	src/Unwind-EHABI.cpp	/^    CATCH   = 0x2,$/;"	e	enum:__anon34::Descriptor::__anon36	file:
CFI_Parser	src/DwarfParser.hpp	/^class CFI_Parser {$/;"	c	namespace:libunwind
CIE_Info	src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::CIE_Info          CIE_Info;$/;"	t	class:libunwind::DwarfInstructions
CIE_Info	src/DwarfParser.hpp	/^  struct CIE_Info {$/;"	s	class:libunwind::CFI_Parser
CLEANUP	src/Unwind-EHABI.cpp	/^    CLEANUP = 0x0,$/;"	e	enum:__anon34::Descriptor::__anon36	file:
COMP_OP	src/config.h	224;"	d
COMP_OP	src/config.h	226;"	d
COMP_OP	src/config.h	238;"	d
CONTEXT	include/unwind.h	/^typedef struct _CONTEXT CONTEXT;$/;"	t	typeref:struct:_CONTEXT
CacheEntry	src/FrameHeaderCache.hpp	/^  struct CacheEntry {$/;"	s	class:FrameHeaderCache
CompactUnwinder_arm64	src/CompactUnwinder.hpp	/^class CompactUnwinder_arm64 {$/;"	c	namespace:libunwind
CompactUnwinder_x86	src/CompactUnwinder.hpp	/^class CompactUnwinder_x86 {$/;"	c	namespace:libunwind
CompactUnwinder_x86_64	src/CompactUnwinder.hpp	/^class CompactUnwinder_x86_64 {$/;"	c	namespace:libunwind
Configuration	test/libunwind/test/config.py	/^class Configuration(LibcxxConfiguration):$/;"	c
ContextRecord	src/UnwindCursor.hpp	/^  PCONTEXT ContextRecord;$/;"	m	struct:_DISPATCHER_CONTEXT
ControlPc	src/UnwindCursor.hpp	/^  ULONG64 ControlPc;$/;"	m	struct:_DISPATCHER_CONTEXT
CountOfCodes	src/UnwindCursor.hpp	/^  uint8_t CountOfCodes;$/;"	m	struct:UNWIND_INFO
DEFINE_LIBUNWIND_FUNCTION	src/assembly.h	246;"	d
DISPATCHER_CONTEXT	include/unwind.h	/^typedef struct _DISPATCHER_CONTEXT DISPATCHER_CONTEXT;$/;"	t	typeref:struct:_DISPATCHER_CONTEXT
DW_CFA_AARCH64_negate_ra_state	src/dwarf2.h	/^  DW_CFA_AARCH64_negate_ra_state      = 0x2D$/;"	e	enum:__anon37
DW_CFA_GNU_args_size	src/dwarf2.h	/^  DW_CFA_GNU_args_size                = 0x2E,$/;"	e	enum:__anon37
DW_CFA_GNU_negative_offset_extended	src/dwarf2.h	/^  DW_CFA_GNU_negative_offset_extended = 0x2F,$/;"	e	enum:__anon37
DW_CFA_GNU_window_save	src/dwarf2.h	/^  DW_CFA_GNU_window_save              = 0x2D,$/;"	e	enum:__anon37
DW_CFA_advance_loc	src/dwarf2.h	/^  DW_CFA_advance_loc        = 0x40, \/\/ high 2 bits are 0x1, lower 6 bits are delta$/;"	e	enum:__anon37
DW_CFA_advance_loc1	src/dwarf2.h	/^  DW_CFA_advance_loc1        = 0x2,$/;"	e	enum:__anon37
DW_CFA_advance_loc2	src/dwarf2.h	/^  DW_CFA_advance_loc2        = 0x3,$/;"	e	enum:__anon37
DW_CFA_advance_loc4	src/dwarf2.h	/^  DW_CFA_advance_loc4        = 0x4,$/;"	e	enum:__anon37
DW_CFA_def_cfa	src/dwarf2.h	/^  DW_CFA_def_cfa             = 0xC,$/;"	e	enum:__anon37
DW_CFA_def_cfa_expression	src/dwarf2.h	/^  DW_CFA_def_cfa_expression  = 0xF,$/;"	e	enum:__anon37
DW_CFA_def_cfa_offset	src/dwarf2.h	/^  DW_CFA_def_cfa_offset      = 0xE,$/;"	e	enum:__anon37
DW_CFA_def_cfa_offset_sf	src/dwarf2.h	/^  DW_CFA_def_cfa_offset_sf  = 0x13,$/;"	e	enum:__anon37
DW_CFA_def_cfa_register	src/dwarf2.h	/^  DW_CFA_def_cfa_register    = 0xD,$/;"	e	enum:__anon37
DW_CFA_def_cfa_sf	src/dwarf2.h	/^  DW_CFA_def_cfa_sf         = 0x12,$/;"	e	enum:__anon37
DW_CFA_expression	src/dwarf2.h	/^  DW_CFA_expression         = 0x10,$/;"	e	enum:__anon37
DW_CFA_nop	src/dwarf2.h	/^  DW_CFA_nop                 = 0x0,$/;"	e	enum:__anon37
DW_CFA_offset	src/dwarf2.h	/^  DW_CFA_offset             = 0x80, \/\/ high 2 bits are 0x2, lower 6 bits are register$/;"	e	enum:__anon37
DW_CFA_offset_extended	src/dwarf2.h	/^  DW_CFA_offset_extended     = 0x5,$/;"	e	enum:__anon37
DW_CFA_offset_extended_sf	src/dwarf2.h	/^  DW_CFA_offset_extended_sf = 0x11,$/;"	e	enum:__anon37
DW_CFA_register	src/dwarf2.h	/^  DW_CFA_register            = 0x9,$/;"	e	enum:__anon37
DW_CFA_remember_state	src/dwarf2.h	/^  DW_CFA_remember_state      = 0xA,$/;"	e	enum:__anon37
DW_CFA_restore	src/dwarf2.h	/^  DW_CFA_restore            = 0xC0, \/\/ high 2 bits are 0x3, lower 6 bits are register$/;"	e	enum:__anon37
DW_CFA_restore_extended	src/dwarf2.h	/^  DW_CFA_restore_extended    = 0x6,$/;"	e	enum:__anon37
DW_CFA_restore_state	src/dwarf2.h	/^  DW_CFA_restore_state       = 0xB,$/;"	e	enum:__anon37
DW_CFA_same_value	src/dwarf2.h	/^  DW_CFA_same_value          = 0x8,$/;"	e	enum:__anon37
DW_CFA_set_loc	src/dwarf2.h	/^  DW_CFA_set_loc             = 0x1,$/;"	e	enum:__anon37
DW_CFA_undefined	src/dwarf2.h	/^  DW_CFA_undefined           = 0x7,$/;"	e	enum:__anon37
DW_CFA_val_expression	src/dwarf2.h	/^  DW_CFA_val_expression     = 0x16,$/;"	e	enum:__anon37
DW_CFA_val_offset	src/dwarf2.h	/^  DW_CFA_val_offset         = 0x14,$/;"	e	enum:__anon37
DW_CFA_val_offset_sf	src/dwarf2.h	/^  DW_CFA_val_offset_sf      = 0x15,$/;"	e	enum:__anon37
DW_EH_PE_absptr	src/dwarf2.h	/^  DW_EH_PE_absptr    = 0x00,$/;"	e	enum:__anon38
DW_EH_PE_aligned	src/dwarf2.h	/^  DW_EH_PE_aligned   = 0x50,$/;"	e	enum:__anon38
DW_EH_PE_datarel	src/dwarf2.h	/^  DW_EH_PE_datarel   = 0x30,$/;"	e	enum:__anon38
DW_EH_PE_funcrel	src/dwarf2.h	/^  DW_EH_PE_funcrel   = 0x40,$/;"	e	enum:__anon38
DW_EH_PE_indirect	src/dwarf2.h	/^  DW_EH_PE_indirect  = 0x80,$/;"	e	enum:__anon38
DW_EH_PE_omit	src/dwarf2.h	/^  DW_EH_PE_omit      = 0xFF$/;"	e	enum:__anon38
DW_EH_PE_pcrel	src/dwarf2.h	/^  DW_EH_PE_pcrel     = 0x10,$/;"	e	enum:__anon38
DW_EH_PE_ptr	src/dwarf2.h	/^  DW_EH_PE_ptr       = 0x00,$/;"	e	enum:__anon38
DW_EH_PE_sdata2	src/dwarf2.h	/^  DW_EH_PE_sdata2    = 0x0A,$/;"	e	enum:__anon38
DW_EH_PE_sdata4	src/dwarf2.h	/^  DW_EH_PE_sdata4    = 0x0B,$/;"	e	enum:__anon38
DW_EH_PE_sdata8	src/dwarf2.h	/^  DW_EH_PE_sdata8    = 0x0C,$/;"	e	enum:__anon38
DW_EH_PE_signed	src/dwarf2.h	/^  DW_EH_PE_signed    = 0x08,$/;"	e	enum:__anon38
DW_EH_PE_sleb128	src/dwarf2.h	/^  DW_EH_PE_sleb128   = 0x09,$/;"	e	enum:__anon38
DW_EH_PE_textrel	src/dwarf2.h	/^  DW_EH_PE_textrel   = 0x20,$/;"	e	enum:__anon38
DW_EH_PE_udata2	src/dwarf2.h	/^  DW_EH_PE_udata2    = 0x02,$/;"	e	enum:__anon38
DW_EH_PE_udata4	src/dwarf2.h	/^  DW_EH_PE_udata4    = 0x03,$/;"	e	enum:__anon38
DW_EH_PE_udata8	src/dwarf2.h	/^  DW_EH_PE_udata8    = 0x04,$/;"	e	enum:__anon38
DW_EH_PE_uleb128	src/dwarf2.h	/^  DW_EH_PE_uleb128   = 0x01,$/;"	e	enum:__anon38
DW_OP_APPLE_uninit	src/dwarf2.h	/^  DW_OP_APPLE_uninit       = 0xF0,$/;"	e	enum:__anon39
DW_OP_abs	src/dwarf2.h	/^  DW_OP_abs                = 0x19,$/;"	e	enum:__anon39
DW_OP_addr	src/dwarf2.h	/^  DW_OP_addr               = 0x03, \/\/ constant address (size target specific)$/;"	e	enum:__anon39
DW_OP_and	src/dwarf2.h	/^  DW_OP_and                = 0x1A,$/;"	e	enum:__anon39
DW_OP_bra	src/dwarf2.h	/^  DW_OP_bra                = 0x28, \/\/ signed 2-byte constant$/;"	e	enum:__anon39
DW_OP_breg0	src/dwarf2.h	/^  DW_OP_breg0              = 0x70, \/\/ base register 0 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg1	src/dwarf2.h	/^  DW_OP_breg1              = 0x71, \/\/ base register 1 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg10	src/dwarf2.h	/^  DW_OP_breg10             = 0x7A, \/\/ base register 10 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg11	src/dwarf2.h	/^  DW_OP_breg11             = 0x7B, \/\/ base register 11 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg12	src/dwarf2.h	/^  DW_OP_breg12             = 0x7C, \/\/ base register 12 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg13	src/dwarf2.h	/^  DW_OP_breg13             = 0x7D, \/\/ base register 13 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg14	src/dwarf2.h	/^  DW_OP_breg14             = 0x7E, \/\/ base register 14 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg15	src/dwarf2.h	/^  DW_OP_breg15             = 0x7F, \/\/ base register 15 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg16	src/dwarf2.h	/^  DW_OP_breg16             = 0x80, \/\/ base register 16 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg17	src/dwarf2.h	/^  DW_OP_breg17             = 0x81, \/\/ base register 17 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg18	src/dwarf2.h	/^  DW_OP_breg18             = 0x82, \/\/ base register 18 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg19	src/dwarf2.h	/^  DW_OP_breg19             = 0x83, \/\/ base register 19 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg2	src/dwarf2.h	/^  DW_OP_breg2              = 0x72, \/\/ base register 2 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg20	src/dwarf2.h	/^  DW_OP_breg20             = 0x84, \/\/ base register 20 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg21	src/dwarf2.h	/^  DW_OP_breg21             = 0x85, \/\/ base register 21 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg22	src/dwarf2.h	/^  DW_OP_breg22             = 0x86, \/\/ base register 22 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg23	src/dwarf2.h	/^  DW_OP_breg23             = 0x87, \/\/ base register 23 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg24	src/dwarf2.h	/^  DW_OP_breg24             = 0x88, \/\/ base register 24 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg25	src/dwarf2.h	/^  DW_OP_breg25             = 0x89, \/\/ base register 25 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg26	src/dwarf2.h	/^  DW_OP_breg26             = 0x8A, \/\/ base register 26 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg27	src/dwarf2.h	/^  DW_OP_breg27             = 0x8B, \/\/ base register 27 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg28	src/dwarf2.h	/^  DW_OP_breg28             = 0x8C, \/\/ base register 28 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg29	src/dwarf2.h	/^  DW_OP_breg29             = 0x8D, \/\/ base register 29 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg3	src/dwarf2.h	/^  DW_OP_breg3              = 0x73, \/\/ base register 3 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg30	src/dwarf2.h	/^  DW_OP_breg30             = 0x8E, \/\/ base register 30 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg31	src/dwarf2.h	/^  DW_OP_breg31             = 0x8F, \/\/ base register 31 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg4	src/dwarf2.h	/^  DW_OP_breg4              = 0x74, \/\/ base register 4 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg5	src/dwarf2.h	/^  DW_OP_breg5              = 0x75, \/\/ base register 5 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg6	src/dwarf2.h	/^  DW_OP_breg6              = 0x76, \/\/ base register 6 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg7	src/dwarf2.h	/^  DW_OP_breg7              = 0x77, \/\/ base register 7 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg8	src/dwarf2.h	/^  DW_OP_breg8              = 0x78, \/\/ base register 8 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_breg9	src/dwarf2.h	/^  DW_OP_breg9              = 0x79, \/\/ base register 9 + SLEB128 offset$/;"	e	enum:__anon39
DW_OP_bregx	src/dwarf2.h	/^  DW_OP_bregx              = 0x92, \/\/ ULEB128 register followed by SLEB128 offset$/;"	e	enum:__anon39
DW_OP_call2	src/dwarf2.h	/^  DW_OP_call2              = 0x98, \/\/ 2-byte offset of DIE$/;"	e	enum:__anon39
DW_OP_call4	src/dwarf2.h	/^  DW_OP_call4              = 0x99, \/\/ 4-byte offset of DIE$/;"	e	enum:__anon39
DW_OP_call_ref	src/dwarf2.h	/^  DW_OP_call_ref           = 0x9A, \/\/ 4- or 8-byte offset of DIE$/;"	e	enum:__anon39
DW_OP_const1s	src/dwarf2.h	/^  DW_OP_const1s            = 0x09, \/\/ 1-byte constant$/;"	e	enum:__anon39
DW_OP_const1u	src/dwarf2.h	/^  DW_OP_const1u            = 0x08, \/\/ 1-byte constant$/;"	e	enum:__anon39
DW_OP_const2s	src/dwarf2.h	/^  DW_OP_const2s            = 0x0B, \/\/ 2-byte constant$/;"	e	enum:__anon39
DW_OP_const2u	src/dwarf2.h	/^  DW_OP_const2u            = 0x0A, \/\/ 2-byte constant$/;"	e	enum:__anon39
DW_OP_const4s	src/dwarf2.h	/^  DW_OP_const4s            = 0x0D, \/\/ 4-byte constant$/;"	e	enum:__anon39
DW_OP_const4u	src/dwarf2.h	/^  DW_OP_const4u            = 0x0C, \/\/ 4-byte constant$/;"	e	enum:__anon39
DW_OP_const8s	src/dwarf2.h	/^  DW_OP_const8s            = 0x0F, \/\/ 8-byte constant$/;"	e	enum:__anon39
DW_OP_const8u	src/dwarf2.h	/^  DW_OP_const8u            = 0x0E, \/\/ 8-byte constant$/;"	e	enum:__anon39
DW_OP_consts	src/dwarf2.h	/^  DW_OP_consts             = 0x11, \/\/ SLEB128 constant$/;"	e	enum:__anon39
DW_OP_constu	src/dwarf2.h	/^  DW_OP_constu             = 0x10, \/\/ ULEB128 constant$/;"	e	enum:__anon39
DW_OP_deref	src/dwarf2.h	/^  DW_OP_deref              = 0x06,$/;"	e	enum:__anon39
DW_OP_deref_size	src/dwarf2.h	/^  DW_OP_deref_size         = 0x94, \/\/ 1-byte size of data retrieved$/;"	e	enum:__anon39
DW_OP_div	src/dwarf2.h	/^  DW_OP_div                = 0x1B,$/;"	e	enum:__anon39
DW_OP_drop	src/dwarf2.h	/^  DW_OP_drop               = 0x13,$/;"	e	enum:__anon39
DW_OP_dup	src/dwarf2.h	/^  DW_OP_dup                = 0x12,$/;"	e	enum:__anon39
DW_OP_eq	src/dwarf2.h	/^  DW_OP_eq                 = 0x29,$/;"	e	enum:__anon39
DW_OP_fbreg	src/dwarf2.h	/^  DW_OP_fbreg              = 0x91, \/\/ SLEB128 offset$/;"	e	enum:__anon39
DW_OP_ge	src/dwarf2.h	/^  DW_OP_ge                 = 0x2A,$/;"	e	enum:__anon39
DW_OP_gt	src/dwarf2.h	/^  DW_OP_gt                 = 0x2B,$/;"	e	enum:__anon39
DW_OP_hi_user	src/dwarf2.h	/^  DW_OP_hi_user            = 0xFF$/;"	e	enum:__anon39
DW_OP_le	src/dwarf2.h	/^  DW_OP_le                 = 0x2C,$/;"	e	enum:__anon39
DW_OP_lit0	src/dwarf2.h	/^  DW_OP_lit0               = 0x30, \/\/ Literal 0$/;"	e	enum:__anon39
DW_OP_lit1	src/dwarf2.h	/^  DW_OP_lit1               = 0x31, \/\/ Literal 1$/;"	e	enum:__anon39
DW_OP_lit10	src/dwarf2.h	/^  DW_OP_lit10              = 0x3A, \/\/ Literal 10$/;"	e	enum:__anon39
DW_OP_lit11	src/dwarf2.h	/^  DW_OP_lit11              = 0x3B, \/\/ Literal 11$/;"	e	enum:__anon39
DW_OP_lit12	src/dwarf2.h	/^  DW_OP_lit12              = 0x3C, \/\/ Literal 12$/;"	e	enum:__anon39
DW_OP_lit13	src/dwarf2.h	/^  DW_OP_lit13              = 0x3D, \/\/ Literal 13$/;"	e	enum:__anon39
DW_OP_lit14	src/dwarf2.h	/^  DW_OP_lit14              = 0x3E, \/\/ Literal 14$/;"	e	enum:__anon39
DW_OP_lit15	src/dwarf2.h	/^  DW_OP_lit15              = 0x3F, \/\/ Literal 15$/;"	e	enum:__anon39
DW_OP_lit16	src/dwarf2.h	/^  DW_OP_lit16              = 0x40, \/\/ Literal 16$/;"	e	enum:__anon39
DW_OP_lit17	src/dwarf2.h	/^  DW_OP_lit17              = 0x41, \/\/ Literal 17$/;"	e	enum:__anon39
DW_OP_lit18	src/dwarf2.h	/^  DW_OP_lit18              = 0x42, \/\/ Literal 18$/;"	e	enum:__anon39
DW_OP_lit19	src/dwarf2.h	/^  DW_OP_lit19              = 0x43, \/\/ Literal 19$/;"	e	enum:__anon39
DW_OP_lit2	src/dwarf2.h	/^  DW_OP_lit2               = 0x32, \/\/ Literal 2$/;"	e	enum:__anon39
DW_OP_lit20	src/dwarf2.h	/^  DW_OP_lit20              = 0x44, \/\/ Literal 20$/;"	e	enum:__anon39
DW_OP_lit21	src/dwarf2.h	/^  DW_OP_lit21              = 0x45, \/\/ Literal 21$/;"	e	enum:__anon39
DW_OP_lit22	src/dwarf2.h	/^  DW_OP_lit22              = 0x46, \/\/ Literal 22$/;"	e	enum:__anon39
DW_OP_lit23	src/dwarf2.h	/^  DW_OP_lit23              = 0x47, \/\/ Literal 23$/;"	e	enum:__anon39
DW_OP_lit24	src/dwarf2.h	/^  DW_OP_lit24              = 0x48, \/\/ Literal 24$/;"	e	enum:__anon39
DW_OP_lit25	src/dwarf2.h	/^  DW_OP_lit25              = 0x49, \/\/ Literal 25$/;"	e	enum:__anon39
DW_OP_lit26	src/dwarf2.h	/^  DW_OP_lit26              = 0x4A, \/\/ Literal 26$/;"	e	enum:__anon39
DW_OP_lit27	src/dwarf2.h	/^  DW_OP_lit27              = 0x4B, \/\/ Literal 27$/;"	e	enum:__anon39
DW_OP_lit28	src/dwarf2.h	/^  DW_OP_lit28              = 0x4C, \/\/ Literal 28$/;"	e	enum:__anon39
DW_OP_lit29	src/dwarf2.h	/^  DW_OP_lit29              = 0x4D, \/\/ Literal 29$/;"	e	enum:__anon39
DW_OP_lit3	src/dwarf2.h	/^  DW_OP_lit3               = 0x33, \/\/ Literal 3$/;"	e	enum:__anon39
DW_OP_lit30	src/dwarf2.h	/^  DW_OP_lit30              = 0x4E, \/\/ Literal 30$/;"	e	enum:__anon39
DW_OP_lit31	src/dwarf2.h	/^  DW_OP_lit31              = 0x4F, \/\/ Literal 31$/;"	e	enum:__anon39
DW_OP_lit4	src/dwarf2.h	/^  DW_OP_lit4               = 0x34, \/\/ Literal 4$/;"	e	enum:__anon39
DW_OP_lit5	src/dwarf2.h	/^  DW_OP_lit5               = 0x35, \/\/ Literal 5$/;"	e	enum:__anon39
DW_OP_lit6	src/dwarf2.h	/^  DW_OP_lit6               = 0x36, \/\/ Literal 6$/;"	e	enum:__anon39
DW_OP_lit7	src/dwarf2.h	/^  DW_OP_lit7               = 0x37, \/\/ Literal 7$/;"	e	enum:__anon39
DW_OP_lit8	src/dwarf2.h	/^  DW_OP_lit8               = 0x38, \/\/ Literal 8$/;"	e	enum:__anon39
DW_OP_lit9	src/dwarf2.h	/^  DW_OP_lit9               = 0x39, \/\/ Literal 9$/;"	e	enum:__anon39
DW_OP_lo_user	src/dwarf2.h	/^  DW_OP_lo_user            = 0xE0,$/;"	e	enum:__anon39
DW_OP_lt	src/dwarf2.h	/^  DW_OP_lt                 = 0x2D,$/;"	e	enum:__anon39
DW_OP_minus	src/dwarf2.h	/^  DW_OP_minus              = 0x1C,$/;"	e	enum:__anon39
DW_OP_mod	src/dwarf2.h	/^  DW_OP_mod                = 0x1D,$/;"	e	enum:__anon39
DW_OP_mul	src/dwarf2.h	/^  DW_OP_mul                = 0x1E,$/;"	e	enum:__anon39
DW_OP_ne	src/dwarf2.h	/^  DW_OP_ne                 = 0x2E,$/;"	e	enum:__anon39
DW_OP_neg	src/dwarf2.h	/^  DW_OP_neg                = 0x1F,$/;"	e	enum:__anon39
DW_OP_nop	src/dwarf2.h	/^  DW_OP_nop                = 0x96,$/;"	e	enum:__anon39
DW_OP_not	src/dwarf2.h	/^  DW_OP_not                = 0x20,$/;"	e	enum:__anon39
DW_OP_or	src/dwarf2.h	/^  DW_OP_or                 = 0x21,$/;"	e	enum:__anon39
DW_OP_over	src/dwarf2.h	/^  DW_OP_over               = 0x14,$/;"	e	enum:__anon39
DW_OP_pick	src/dwarf2.h	/^  DW_OP_pick               = 0x15, \/\/ 1-byte stack index$/;"	e	enum:__anon39
DW_OP_piece	src/dwarf2.h	/^  DW_OP_piece              = 0x93, \/\/ ULEB128 size of piece addressed$/;"	e	enum:__anon39
DW_OP_plus	src/dwarf2.h	/^  DW_OP_plus               = 0x22,$/;"	e	enum:__anon39
DW_OP_plus_uconst	src/dwarf2.h	/^  DW_OP_plus_uconst        = 0x23, \/\/ ULEB128 addend$/;"	e	enum:__anon39
DW_OP_push_object_addres	src/dwarf2.h	/^  DW_OP_push_object_addres = 0x97,$/;"	e	enum:__anon39
DW_OP_reg0	src/dwarf2.h	/^  DW_OP_reg0               = 0x50, \/\/ Contents of reg0$/;"	e	enum:__anon39
DW_OP_reg1	src/dwarf2.h	/^  DW_OP_reg1               = 0x51, \/\/ Contents of reg1$/;"	e	enum:__anon39
DW_OP_reg10	src/dwarf2.h	/^  DW_OP_reg10              = 0x5A, \/\/ Contents of reg10$/;"	e	enum:__anon39
DW_OP_reg11	src/dwarf2.h	/^  DW_OP_reg11              = 0x5B, \/\/ Contents of reg11$/;"	e	enum:__anon39
DW_OP_reg12	src/dwarf2.h	/^  DW_OP_reg12              = 0x5C, \/\/ Contents of reg12$/;"	e	enum:__anon39
DW_OP_reg13	src/dwarf2.h	/^  DW_OP_reg13              = 0x5D, \/\/ Contents of reg13$/;"	e	enum:__anon39
DW_OP_reg14	src/dwarf2.h	/^  DW_OP_reg14              = 0x5E, \/\/ Contents of reg14$/;"	e	enum:__anon39
DW_OP_reg15	src/dwarf2.h	/^  DW_OP_reg15              = 0x5F, \/\/ Contents of reg15$/;"	e	enum:__anon39
DW_OP_reg16	src/dwarf2.h	/^  DW_OP_reg16              = 0x60, \/\/ Contents of reg16$/;"	e	enum:__anon39
DW_OP_reg17	src/dwarf2.h	/^  DW_OP_reg17              = 0x61, \/\/ Contents of reg17$/;"	e	enum:__anon39
DW_OP_reg18	src/dwarf2.h	/^  DW_OP_reg18              = 0x62, \/\/ Contents of reg18$/;"	e	enum:__anon39
DW_OP_reg19	src/dwarf2.h	/^  DW_OP_reg19              = 0x63, \/\/ Contents of reg19$/;"	e	enum:__anon39
DW_OP_reg2	src/dwarf2.h	/^  DW_OP_reg2               = 0x52, \/\/ Contents of reg2$/;"	e	enum:__anon39
DW_OP_reg20	src/dwarf2.h	/^  DW_OP_reg20              = 0x64, \/\/ Contents of reg20$/;"	e	enum:__anon39
DW_OP_reg21	src/dwarf2.h	/^  DW_OP_reg21              = 0x65, \/\/ Contents of reg21$/;"	e	enum:__anon39
DW_OP_reg22	src/dwarf2.h	/^  DW_OP_reg22              = 0x66, \/\/ Contents of reg22$/;"	e	enum:__anon39
DW_OP_reg23	src/dwarf2.h	/^  DW_OP_reg23              = 0x67, \/\/ Contents of reg23$/;"	e	enum:__anon39
DW_OP_reg24	src/dwarf2.h	/^  DW_OP_reg24              = 0x68, \/\/ Contents of reg24$/;"	e	enum:__anon39
DW_OP_reg25	src/dwarf2.h	/^  DW_OP_reg25              = 0x69, \/\/ Contents of reg25$/;"	e	enum:__anon39
DW_OP_reg26	src/dwarf2.h	/^  DW_OP_reg26              = 0x6A, \/\/ Contents of reg26$/;"	e	enum:__anon39
DW_OP_reg27	src/dwarf2.h	/^  DW_OP_reg27              = 0x6B, \/\/ Contents of reg27$/;"	e	enum:__anon39
DW_OP_reg28	src/dwarf2.h	/^  DW_OP_reg28              = 0x6C, \/\/ Contents of reg28$/;"	e	enum:__anon39
DW_OP_reg29	src/dwarf2.h	/^  DW_OP_reg29              = 0x6D, \/\/ Contents of reg29$/;"	e	enum:__anon39
DW_OP_reg3	src/dwarf2.h	/^  DW_OP_reg3               = 0x53, \/\/ Contents of reg3$/;"	e	enum:__anon39
DW_OP_reg30	src/dwarf2.h	/^  DW_OP_reg30              = 0x6E, \/\/ Contents of reg30$/;"	e	enum:__anon39
DW_OP_reg31	src/dwarf2.h	/^  DW_OP_reg31              = 0x6F, \/\/ Contents of reg31$/;"	e	enum:__anon39
DW_OP_reg4	src/dwarf2.h	/^  DW_OP_reg4               = 0x54, \/\/ Contents of reg4$/;"	e	enum:__anon39
DW_OP_reg5	src/dwarf2.h	/^  DW_OP_reg5               = 0x55, \/\/ Contents of reg5$/;"	e	enum:__anon39
DW_OP_reg6	src/dwarf2.h	/^  DW_OP_reg6               = 0x56, \/\/ Contents of reg6$/;"	e	enum:__anon39
DW_OP_reg7	src/dwarf2.h	/^  DW_OP_reg7               = 0x57, \/\/ Contents of reg7$/;"	e	enum:__anon39
DW_OP_reg8	src/dwarf2.h	/^  DW_OP_reg8               = 0x58, \/\/ Contents of reg8$/;"	e	enum:__anon39
DW_OP_reg9	src/dwarf2.h	/^  DW_OP_reg9               = 0x59, \/\/ Contents of reg9$/;"	e	enum:__anon39
DW_OP_regx	src/dwarf2.h	/^  DW_OP_regx               = 0x90, \/\/ ULEB128 register$/;"	e	enum:__anon39
DW_OP_rot	src/dwarf2.h	/^  DW_OP_rot                = 0x17,$/;"	e	enum:__anon39
DW_OP_shl	src/dwarf2.h	/^  DW_OP_shl                = 0x24,$/;"	e	enum:__anon39
DW_OP_shr	src/dwarf2.h	/^  DW_OP_shr                = 0x25,$/;"	e	enum:__anon39
DW_OP_shra	src/dwarf2.h	/^  DW_OP_shra               = 0x26,$/;"	e	enum:__anon39
DW_OP_skip	src/dwarf2.h	/^  DW_OP_skip               = 0x2F, \/\/ signed 2-byte constant$/;"	e	enum:__anon39
DW_OP_swap	src/dwarf2.h	/^  DW_OP_swap               = 0x16,$/;"	e	enum:__anon39
DW_OP_xderef	src/dwarf2.h	/^  DW_OP_xderef             = 0x18,$/;"	e	enum:__anon39
DW_OP_xderef_size	src/dwarf2.h	/^  DW_OP_xderef_size        = 0x95, \/\/ 1-byte size of data retrieved$/;"	e	enum:__anon39
DW_OP_xor	src/dwarf2.h	/^  DW_OP_xor                = 0x27,$/;"	e	enum:__anon39
DW_X86_64_RET_ADDR	src/DwarfInstructions.hpp	/^    DW_X86_64_RET_ADDR = 16$/;"	e	enum:libunwind::DwarfInstructions::__anon32
DW_X86_RET_ADDR	src/DwarfInstructions.hpp	/^    DW_X86_RET_ADDR = 8$/;"	e	enum:libunwind::DwarfInstructions::__anon33
Descriptor	src/Unwind-EHABI.cpp	/^struct Descriptor {$/;"	s	namespace:__anon34	file:
DwarfFDECache	src/UnwindCursor.hpp	/^class _LIBUNWIND_HIDDEN DwarfFDECache {$/;"	c	namespace:libunwind
DwarfInstructions	src/DwarfInstructions.hpp	/^class DwarfInstructions {$/;"	c	namespace:libunwind
EHABIIndexEntry	src/AddressSpace.hpp	/^struct EHABIIndexEntry {$/;"	s
EHABISectionIterator	src/UnwindCursor.hpp	/^  EHABISectionIterator(A& addressSpace, const UnwindInfoSections& sects, size_t i)$/;"	f	struct:libunwind::EHABISectionIterator
EHABISectionIterator	src/UnwindCursor.hpp	/^struct EHABISectionIterator {$/;"	s	namespace:libunwind
EHABISectionUpperBound	src/UnwindCursor.hpp	/^EHABISectionIterator<A> EHABISectionUpperBound($/;"	f	namespace:libunwind::__anon40
EHHeaderInfo	src/EHHeaderParser.hpp	/^  struct EHHeaderInfo {$/;"	s	class:libunwind::EHHeaderParser
EHHeaderParser	src/EHHeaderParser.hpp	/^template <typename A> class EHHeaderParser {$/;"	c	namespace:libunwind
EXCEPTION_RECORD	include/unwind.h	/^typedef struct _EXCEPTION_RECORD EXCEPTION_RECORD;$/;"	t	typeref:struct:_EXCEPTION_RECORD
EXPECTED_NUM_FRAMES	test/libunwind_02.pass.cpp	17;"	d	file:
EXPORT_SYMBOL	src/assembly.h	123;"	d
EXTRACT_BITS	src/CompactUnwinder.hpp	23;"	d
ElfW	src/AddressSpace.hpp	364;"	d
Elf_Addr	src/AddressSpace.hpp	/^  typedef ElfW(Addr) Elf_Addr;$/;"	t	namespace:libunwind
Elf_Half	src/AddressSpace.hpp	/^  typedef ElfW(Half) Elf_Half;$/;"	t	namespace:libunwind
Elf_Phdr	src/AddressSpace.hpp	/^  typedef ElfW(Phdr) Elf_Phdr;$/;"	t	namespace:libunwind
Entries	src/FrameHeaderCache.hpp	/^  CacheEntry Entries[kCacheEntryCount];$/;"	m	class:FrameHeaderCache
EstablisherFrame	src/UnwindCursor.hpp	/^  ULONG64 EstablisherFrame;$/;"	m	struct:_DISPATCHER_CONTEXT
FDE_Info	src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::FDE_Info          FDE_Info;$/;"	t	class:libunwind::DwarfInstructions
FDE_Info	src/DwarfParser.hpp	/^  struct FDE_Info {$/;"	s	class:libunwind::CFI_Parser
FLOAD	src/assembly.h	56;"	d
FLOAD	src/assembly.h	59;"	d
FROM_0_TO_15	src/UnwindRegistersRestore.S	/^#define FROM_0_TO_15 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15$/;"	d
FROM_0_TO_15	src/UnwindRegistersSave.S	/^#define FROM_0_TO_15 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15$/;"	d
FROM_0_TO_31	src/UnwindRegistersRestore.S	/^#define FROM_0_TO_31 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31$/;"	d
FROM_0_TO_31	src/UnwindRegistersSave.S	/^#define FROM_0_TO_31 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31$/;"	d
FROM_16_TO_31	src/UnwindRegistersRestore.S	/^#define FROM_16_TO_31 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31$/;"	d
FROM_16_TO_31	src/UnwindRegistersSave.S	/^#define FROM_16_TO_31 16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31$/;"	d
FROM_32_TO_63	src/UnwindRegistersRestore.S	/^#define FROM_32_TO_63 32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63$/;"	d
FROM_32_TO_63	src/UnwindRegistersSave.S	/^#define FROM_32_TO_63 32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63$/;"	d
FSTORE	src/assembly.h	57;"	d
FSTORE	src/assembly.h	60;"	d
FUNC	src/Unwind-EHABI.cpp	/^    FUNC    = 0x1,$/;"	e	enum:__anon34::Descriptor::__anon36	file:
Fill0	src/UnwindCursor.hpp	/^  ULONG Fill0;$/;"	m	struct:_DISPATCHER_CONTEXT
Flags	src/UnwindCursor.hpp	/^  uint8_t Flags : 5;$/;"	m	struct:UNWIND_INFO
Format	src/Unwind-EHABI.cpp	/^  } Format;$/;"	t	struct:__anon34::Descriptor	typeref:enum:__anon34::Descriptor::__anon35	file:
FrameHeaderCache	src/FrameHeaderCache.hpp	/^class _LIBUNWIND_HIDDEN FrameHeaderCache {$/;"	c
FrameOffset	src/UnwindCursor.hpp	/^  uint8_t FrameOffset : 4;$/;"	m	struct:UNWIND_INFO
FrameRegister	src/UnwindCursor.hpp	/^  uint8_t FrameRegister : 4;$/;"	m	struct:UNWIND_INFO
FunctionEntry	src/UnwindCursor.hpp	/^  PRUNTIME_FUNCTION FunctionEntry;$/;"	m	struct:_DISPATCHER_CONTEXT
GLUE	src/assembly.h	115;"	d
GLUE2	src/assembly.h	114;"	d
GPRs	src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_arm
GPRs	src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_arm64
GPRs	src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_x86
GPRs	src/Registers.hpp	/^  struct GPRs {$/;"	s	class:libunwind::Registers_x86_64
HIDDEN_SYMBOL	src/assembly.h	121;"	d
HandlerData	src/UnwindCursor.hpp	/^  PVOID HandlerData;$/;"	m	struct:_DISPATCHER_CONTEXT
HighPC	src/FrameHeaderCache.hpp	/^    uintptr_t HighPC() { return Info.dso_base + Info.text_segment_length; };$/;"	f	struct:FrameHeaderCache::CacheEntry
HistoryTable	src/UnwindCursor.hpp	/^  PUNWIND_HISTORY_TABLE HistoryTable;$/;"	m	struct:_DISPATCHER_CONTEXT
ILOAD	src/assembly.h	45;"	d
ILOAD	src/assembly.h	48;"	d
INVALID	src/Unwind-EHABI.cpp	/^    INVALID = 0x4$/;"	e	enum:__anon34::Descriptor::__anon36	file:
ISTORE	src/assembly.h	46;"	d
ISTORE	src/assembly.h	49;"	d
ImageBase	src/UnwindCursor.hpp	/^  ULONG64 ImageBase;$/;"	m	struct:_DISPATCHER_CONTEXT
Info	src/FrameHeaderCache.hpp	/^    UnwindInfoSections Info;$/;"	m	struct:FrameHeaderCache::CacheEntry
InitializeTime	src/DwarfParser.hpp	/^    enum class InitializeTime { kLazy, kNormal };$/;"	c	struct:libunwind::CFI_Parser::PrologInfo
JMP	src/assembly.h	278;"	d
Kind	src/Unwind-EHABI.cpp	/^  } Kind;$/;"	t	struct:__anon34::Descriptor	typeref:enum:__anon34::Descriptor::__anon36	file:
LIBUNWIND_AVAIL	include/libunwind.h	31;"	d
LIBUNWIND_AVAIL	include/libunwind.h	33;"	d
LIBUNWIND_AVAIL	include/libunwind.h	37;"	d
LIBUNWIND_AVAIL	include/libunwind.h	39;"	d
LIBUNWIND_AVAIL	include/libunwind.h	43;"	d
LIBUNWIND_CET_UNWIND_H	src/cet_unwind.h	11;"	d
LIBUNWIND_CONFIG_H	src/config.h	14;"	d
LIBUNWIND_CURSOR_ALIGNMENT_ATTR	include/libunwind.h	/^} LIBUNWIND_CURSOR_ALIGNMENT_ATTR;$/;"	v	typeref:struct:unw_cursor_t
LIBUNWIND_CURSOR_ALIGNMENT_ATTR	include/libunwind.h	47;"	d
LIBUNWIND_CURSOR_ALIGNMENT_ATTR	include/libunwind.h	49;"	d
LIBUNWIND_UNAVAIL	include/unwind.h	27;"	d
LIBUNWIND_UNAVAIL	include/unwind.h	29;"	d
LOAD_VECTOR_RESTORE	src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_RESTORE(_index)                 \\$/;"	d
LOAD_VECTOR_UNALIGNEDh	src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_UNALIGNEDh(_index)                   \\$/;"	d
LOAD_VECTOR_UNALIGNEDh	src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_UNALIGNEDh(_index) LOAD_VECTOR_RESTORE(_index)$/;"	d
LOAD_VECTOR_UNALIGNEDl	src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_UNALIGNEDl(_index)                   \\$/;"	d
LOAD_VECTOR_UNALIGNEDl	src/UnwindRegistersRestore.S	/^#define LOAD_VECTOR_UNALIGNEDl(_index) LOAD_VECTOR_RESTORE(_index)$/;"	d
LU16	src/Unwind-EHABI.cpp	/^    LU16 = 1, \/\/ Long descriptor,  16-bit entries$/;"	e	enum:__anon34::Descriptor::__anon35	file:
LU32	src/Unwind-EHABI.cpp	/^    LU32 = 3, \/\/ Long descriptor,  32-bit entries$/;"	e	enum:__anon34::Descriptor::__anon35	file:
LanguageHandler	src/UnwindCursor.hpp	/^  PEXCEPTION_ROUTINE LanguageHandler;$/;"	m	struct:_DISPATCHER_CONTEXT
Ldone	src/UnwindRegistersRestore.S	/^Ldone  ## n:$/;"	l
Lnovec	src/UnwindRegistersRestore.S	/^Lnovec:$/;"	l
LocalAddressSpace	src/AddressSpace.hpp	/^class _LIBUNWIND_HIDDEN LocalAddressSpace {$/;"	c	namespace:libunwind
LowPC	src/FrameHeaderCache.hpp	/^    uintptr_t LowPC() { return Info.dso_base; };$/;"	f	struct:FrameHeaderCache::CacheEntry
MAKE_CUSTOM_STATUS	src/Unwind-seh.cpp	37;"	d	file:
MAKE_GCC_EXCEPTION	src/Unwind-seh.cpp	39;"	d	file:
MaxAligned	test/alignment.compile.pass.cpp	/^struct MaxAligned {} __attribute__((__aligned__));$/;"	s	file:
MostRecentlyUsed	src/FrameHeaderCache.hpp	/^  CacheEntry *MostRecentlyUsed;$/;"	m	class:FrameHeaderCache
NDEBUG	test/bad_unwind_info.pass.cpp	21;"	d	file:
NEVER_HERE	src/Unwind_AppleExtras.cpp	32;"	d	file:
NEVER_HERE	src/Unwind_AppleExtras.cpp	39;"	d	file:
NOT_HERE_BEFORE_10_6	src/Unwind_AppleExtras.cpp	31;"	d	file:
NOT_HERE_BEFORE_10_6	src/Unwind_AppleExtras.cpp	34;"	d	file:
NOT_HERE_BEFORE_5_0	src/Unwind_AppleExtras.cpp	15;"	d	file:
NO_EXEC_STACK_DIRECTIVE	src/UnwindRegistersRestore.S	/^NO_EXEC_STACK_DIRECTIVE$/;"	l
NO_EXEC_STACK_DIRECTIVE	src/UnwindRegistersSave.S	/^NO_EXEC_STACK_DIRECTIVE$/;"	l
NO_EXEC_STACK_DIRECTIVE	src/assembly.h	132;"	d
NUM_FRAMES_UPPER_BOUND	test/libunwind_02.pass.cpp	18;"	d	file:
Next	src/FrameHeaderCache.hpp	/^    CacheEntry *Next;$/;"	m	struct:FrameHeaderCache::CacheEntry
OFFSET	src/UnwindRegistersSave.S	/^#define OFFSET(offset) (offset\/4)$/;"	d
PPC64_CLVS_RESTORE	src/UnwindRegistersRestore.S	/^#define PPC64_CLVS_RESTORE(n)                    \\$/;"	d
PPC64_CLVSh	src/UnwindRegistersRestore.S	/^#define PPC64_CLVSh(n)                           \\$/;"	d
PPC64_CLVSh	src/UnwindRegistersRestore.S	/^#define PPC64_CLVSh(n) PPC64_CLVS_RESTORE(n)$/;"	d
PPC64_CLVSl	src/UnwindRegistersRestore.S	/^#define PPC64_CLVSl(n)                           \\$/;"	d
PPC64_CLVSl	src/UnwindRegistersRestore.S	/^#define PPC64_CLVSl(n) PPC64_CLVS_RESTORE(n)$/;"	d
PPC64_CLV_UNALIGNED_RESTORE	src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNED_RESTORE(n)       \\$/;"	d
PPC64_CLV_UNALIGNEDh	src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNEDh(n)              \\$/;"	d
PPC64_CLV_UNALIGNEDh	src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNEDh(n) PPC64_CLV_UNALIGNED_RESTORE(n)$/;"	d
PPC64_CLV_UNALIGNEDl	src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNEDl(n)              \\$/;"	d
PPC64_CLV_UNALIGNEDl	src/UnwindRegistersRestore.S	/^#define PPC64_CLV_UNALIGNEDl(n) PPC64_CLV_UNALIGNED_RESTORE(n)$/;"	d
PPC64_ELFV1_R2_LOAD_INST_ENCODING	src/DwarfInstructions.hpp	309;"	d
PPC64_ELFV1_R2_OFFSET	src/DwarfInstructions.hpp	310;"	d
PPC64_ELFV2_R2_LOAD_INST_ENCODING	src/DwarfInstructions.hpp	311;"	d
PPC64_ELFV2_R2_OFFSET	src/DwarfInstructions.hpp	312;"	d
PPC64_LF	src/UnwindRegistersRestore.S	/^#define PPC64_LF(n) \\$/;"	d
PPC64_LR	src/UnwindRegistersRestore.S	/^#define PPC64_LR(n) \\$/;"	d
PPC64_LVS	src/UnwindRegistersRestore.S	/^#define PPC64_LVS(n)         \\$/;"	d
PPC64_OFFS_CR	src/assembly.h	28;"	d
PPC64_OFFS_CTR	src/assembly.h	31;"	d
PPC64_OFFS_FP	src/assembly.h	33;"	d
PPC64_OFFS_LR	src/assembly.h	30;"	d
PPC64_OFFS_SRR0	src/assembly.h	27;"	d
PPC64_OFFS_V	src/assembly.h	34;"	d
PPC64_OFFS_VRSAVE	src/assembly.h	32;"	d
PPC64_OFFS_XER	src/assembly.h	29;"	d
PPC64_OPD1	src/assembly.h	72;"	d
PPC64_OPD1	src/assembly.h	81;"	d
PPC64_OPD2	src/assembly.h	73;"	d
PPC64_OPD2	src/assembly.h	82;"	d
PPC64_STF	src/UnwindRegistersSave.S	/^#define PPC64_STF(n) \\$/;"	d
PPC64_STR	src/UnwindRegistersSave.S	/^#define PPC64_STR(n) \\$/;"	d
PPC64_STVS	src/UnwindRegistersSave.S	/^#define PPC64_STVS(n)      \\$/;"	d
PPC64_STV_UNALIGNED	src/UnwindRegistersSave.S	/^#define PPC64_STV_UNALIGNED(n)             \\$/;"	d
PPC_LEFT_SHIFT	src/assembly.h	285;"	d
PRIVATE_1	src/UnwindLevel1-gcc-ext.c	28;"	d	file:
PRIVATE_1	src/UnwindLevel1-gcc-ext.c	30;"	d	file:
PRIVATE_1	src/UnwindLevel1-gcc-ext.c	32;"	d	file:
PTR	src/UnwindRegistersSave.S	/^#define PTR %rcx$/;"	d
PTR	src/UnwindRegistersSave.S	/^#define PTR %rdi$/;"	d
ProcessDescriptors	src/Unwind-EHABI.cpp	/^_Unwind_Reason_Code ProcessDescriptors($/;"	f	namespace:__anon34
PrologInfo	src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::PrologInfo        PrologInfo;$/;"	t	class:libunwind::DwarfInstructions
PrologInfo	src/DwarfParser.hpp	/^    PrologInfo(InitializeTime IT = InitializeTime::kNormal) {$/;"	f	struct:libunwind::CFI_Parser::PrologInfo
PrologInfo	src/DwarfParser.hpp	/^  struct PrologInfo {$/;"	s	class:libunwind::CFI_Parser
PrologInfoStackEntry	src/DwarfParser.hpp	/^    PrologInfoStackEntry(PrologInfoStackEntry *n, const PrologInfo &i)$/;"	f	struct:libunwind::CFI_Parser::PrologInfoStackEntry
PrologInfoStackEntry	src/DwarfParser.hpp	/^  struct PrologInfoStackEntry {$/;"	s	class:libunwind::CFI_Parser
PseudoRegisters	src/Registers.hpp	/^  struct PseudoRegisters {$/;"	s	class:libunwind::Registers_arm
REGISTERS_ARM	src/Registers.hpp	/^  REGISTERS_ARM,$/;"	e	enum:libunwind::__anon42
REGISTERS_ARM64	src/Registers.hpp	/^  REGISTERS_ARM64,$/;"	e	enum:libunwind::__anon42
REGISTERS_HEXAGON	src/Registers.hpp	/^  REGISTERS_HEXAGON,$/;"	e	enum:libunwind::__anon42
REGISTERS_LOONGARCH	src/Registers.hpp	/^  REGISTERS_LOONGARCH,$/;"	e	enum:libunwind::__anon42
REGISTERS_MIPS_NEWABI	src/Registers.hpp	/^  REGISTERS_MIPS_NEWABI,$/;"	e	enum:libunwind::__anon42
REGISTERS_MIPS_O32	src/Registers.hpp	/^  REGISTERS_MIPS_O32,$/;"	e	enum:libunwind::__anon42
REGISTERS_OR1K	src/Registers.hpp	/^  REGISTERS_OR1K,$/;"	e	enum:libunwind::__anon42
REGISTERS_PPC	src/Registers.hpp	/^  REGISTERS_PPC,$/;"	e	enum:libunwind::__anon42
REGISTERS_PPC64	src/Registers.hpp	/^  REGISTERS_PPC64,$/;"	e	enum:libunwind::__anon42
REGISTERS_RISCV	src/Registers.hpp	/^  REGISTERS_RISCV,$/;"	e	enum:libunwind::__anon42
REGISTERS_S390X	src/Registers.hpp	/^  REGISTERS_S390X,$/;"	e	enum:libunwind::__anon42
REGISTERS_SPARC	src/Registers.hpp	/^  REGISTERS_SPARC,$/;"	e	enum:libunwind::__anon42
REGISTERS_SPARC64	src/Registers.hpp	/^  REGISTERS_SPARC64,$/;"	e	enum:libunwind::__anon42
REGISTERS_VE	src/Registers.hpp	/^  REGISTERS_VE,$/;"	e	enum:libunwind::__anon42
REGISTERS_X86	src/Registers.hpp	/^  REGISTERS_X86,$/;"	e	enum:libunwind::__anon42
REGISTERS_X86_64	src/Registers.hpp	/^  REGISTERS_X86_64,$/;"	e	enum:libunwind::__anon42
REGISTER_KIND	src/libunwind.cpp	49;"	d	file:
REGISTER_KIND	src/libunwind.cpp	89;"	d	file:
RESERVED0	src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED1	src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED10	src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED11	src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED2	src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED3	src/Unwind-EHABI.cpp	/^    RESERVED0 =  4, RESERVED1 =  5, RESERVED2  = 6,  RESERVED3  =  7,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED4	src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED5	src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED6	src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED7	src/Unwind-EHABI.cpp	/^    RESERVED4 =  8, RESERVED5 =  9, RESERVED6  = 10, RESERVED7  = 11,$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED8	src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RESERVED9	src/Unwind-EHABI.cpp	/^    RESERVED8 = 12, RESERVED9 = 13, RESERVED10 = 14, RESERVED11 = 15$/;"	e	enum:__anon34::Descriptor::__anon35	file:
RISCV_FLEN	include/__libunwind_config.h	147;"	d
RISCV_FLEN	include/__libunwind_config.h	149;"	d
RISCV_FOFFSET	src/assembly.h	39;"	d
RISCV_FSIZE	src/assembly.h	41;"	d
RISCV_ISIZE	src/assembly.h	38;"	d
RWMutex	src/RWMutex.hpp	/^class _LIBUNWIND_HIDDEN RWMutex {$/;"	c	namespace:libunwind
RegisterLocation	src/DwarfInstructions.hpp	/^  typedef typename CFI_Parser<A>::RegisterLocation  RegisterLocation;$/;"	t	class:libunwind::DwarfInstructions
RegisterLocation	src/DwarfParser.hpp	/^  struct RegisterLocation {$/;"	s	class:libunwind::CFI_Parser
RegisterMask	src/Unwind-EHABI.cpp	/^uint32_t RegisterMask(uint8_t start, uint8_t count_minus_one) {$/;"	f	namespace:__anon34
RegisterRange	src/Unwind-EHABI.cpp	/^uint32_t RegisterRange(uint8_t start, uint8_t count_minus_one) {$/;"	f	namespace:__anon34
RegisterSavedWhere	src/DwarfParser.hpp	/^  enum RegisterSavedWhere {$/;"	g	class:libunwind::CFI_Parser
Registers_arm	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_arm {$/;"	c	namespace:libunwind
Registers_arm	src/Registers.hpp	/^inline Registers_arm::Registers_arm()$/;"	f	class:libunwind::Registers_arm
Registers_arm	src/Registers.hpp	/^inline Registers_arm::Registers_arm(const void *registers)$/;"	f	class:libunwind::Registers_arm
Registers_arm64	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_arm64 {$/;"	c	namespace:libunwind
Registers_arm64	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_arm64;$/;"	m	namespace:libunwind	typeref:class:libunwind::_LIBUNWIND_HIDDEN
Registers_arm64	src/Registers.hpp	/^inline Registers_arm64::Registers_arm64() {$/;"	f	class:libunwind::Registers_arm64
Registers_arm64	src/Registers.hpp	/^inline Registers_arm64::Registers_arm64(const void *registers) {$/;"	f	class:libunwind::Registers_arm64
Registers_hexagon	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_hexagon {$/;"	c	namespace:libunwind
Registers_hexagon	src/Registers.hpp	/^inline Registers_hexagon::Registers_hexagon() {$/;"	f	class:libunwind::Registers_hexagon
Registers_hexagon	src/Registers.hpp	/^inline Registers_hexagon::Registers_hexagon(const void *registers) {$/;"	f	class:libunwind::Registers_hexagon
Registers_loongarch	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_loongarch {$/;"	c	namespace:libunwind
Registers_loongarch	src/Registers.hpp	/^inline Registers_loongarch::Registers_loongarch() {$/;"	f	class:libunwind::Registers_loongarch
Registers_loongarch	src/Registers.hpp	/^inline Registers_loongarch::Registers_loongarch(const void *registers) {$/;"	f	class:libunwind::Registers_loongarch
Registers_mips_newabi	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_mips_newabi {$/;"	c	namespace:libunwind
Registers_mips_newabi	src/Registers.hpp	/^inline Registers_mips_newabi::Registers_mips_newabi() {$/;"	f	class:libunwind::Registers_mips_newabi
Registers_mips_newabi	src/Registers.hpp	/^inline Registers_mips_newabi::Registers_mips_newabi(const void *registers) {$/;"	f	class:libunwind::Registers_mips_newabi
Registers_mips_o32	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_mips_o32 {$/;"	c	namespace:libunwind
Registers_mips_o32	src/Registers.hpp	/^inline Registers_mips_o32::Registers_mips_o32() {$/;"	f	class:libunwind::Registers_mips_o32
Registers_mips_o32	src/Registers.hpp	/^inline Registers_mips_o32::Registers_mips_o32(const void *registers) {$/;"	f	class:libunwind::Registers_mips_o32
Registers_or1k	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_or1k {$/;"	c	namespace:libunwind
Registers_or1k	src/Registers.hpp	/^inline Registers_or1k::Registers_or1k() {$/;"	f	class:libunwind::Registers_or1k
Registers_or1k	src/Registers.hpp	/^inline Registers_or1k::Registers_or1k(const void *registers) {$/;"	f	class:libunwind::Registers_or1k
Registers_ppc	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_ppc {$/;"	c	namespace:libunwind
Registers_ppc	src/Registers.hpp	/^inline Registers_ppc::Registers_ppc() {$/;"	f	class:libunwind::Registers_ppc
Registers_ppc	src/Registers.hpp	/^inline Registers_ppc::Registers_ppc(const void *registers) {$/;"	f	class:libunwind::Registers_ppc
Registers_ppc64	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_ppc64 {$/;"	c	namespace:libunwind
Registers_ppc64	src/Registers.hpp	/^inline Registers_ppc64::Registers_ppc64() {$/;"	f	class:libunwind::Registers_ppc64
Registers_ppc64	src/Registers.hpp	/^inline Registers_ppc64::Registers_ppc64(const void *registers) {$/;"	f	class:libunwind::Registers_ppc64
Registers_riscv	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_riscv {$/;"	c	namespace:libunwind
Registers_riscv	src/Registers.hpp	/^inline Registers_riscv::Registers_riscv() {$/;"	f	class:libunwind::Registers_riscv
Registers_riscv	src/Registers.hpp	/^inline Registers_riscv::Registers_riscv(const void *registers) {$/;"	f	class:libunwind::Registers_riscv
Registers_s390x	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_s390x {$/;"	c	namespace:libunwind
Registers_s390x	src/Registers.hpp	/^inline Registers_s390x::Registers_s390x() {$/;"	f	class:libunwind::Registers_s390x
Registers_s390x	src/Registers.hpp	/^inline Registers_s390x::Registers_s390x(const void *registers) {$/;"	f	class:libunwind::Registers_s390x
Registers_sparc	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_sparc {$/;"	c	namespace:libunwind
Registers_sparc	src/Registers.hpp	/^inline Registers_sparc::Registers_sparc() {$/;"	f	class:libunwind::Registers_sparc
Registers_sparc	src/Registers.hpp	/^inline Registers_sparc::Registers_sparc(const void *registers) {$/;"	f	class:libunwind::Registers_sparc
Registers_sparc64	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_sparc64 {$/;"	c	namespace:libunwind
Registers_sparc64	src/Registers.hpp	/^inline Registers_sparc64::Registers_sparc64(const void *registers) {$/;"	f	class:libunwind::Registers_sparc64
Registers_ve	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_ve {$/;"	c	namespace:libunwind
Registers_ve	src/Registers.hpp	/^inline Registers_ve::Registers_ve() {$/;"	f	class:libunwind::Registers_ve
Registers_ve	src/Registers.hpp	/^inline Registers_ve::Registers_ve(const void *registers) {$/;"	f	class:libunwind::Registers_ve
Registers_x86	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_x86 {$/;"	c	namespace:libunwind
Registers_x86	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_x86;$/;"	m	namespace:libunwind	typeref:class:libunwind::_LIBUNWIND_HIDDEN
Registers_x86	src/Registers.hpp	/^inline Registers_x86::Registers_x86() {$/;"	f	class:libunwind::Registers_x86
Registers_x86	src/Registers.hpp	/^inline Registers_x86::Registers_x86(const void *registers) {$/;"	f	class:libunwind::Registers_x86
Registers_x86_64	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_x86_64 {$/;"	c	namespace:libunwind
Registers_x86_64	src/Registers.hpp	/^class _LIBUNWIND_HIDDEN Registers_x86_64;$/;"	m	namespace:libunwind	typeref:class:libunwind::_LIBUNWIND_HIDDEN
Registers_x86_64	src/Registers.hpp	/^inline Registers_x86_64::Registers_x86_64() {$/;"	f	class:libunwind::Registers_x86_64
Registers_x86_64	src/Registers.hpp	/^inline Registers_x86_64::Registers_x86_64(const void *registers) {$/;"	f	class:libunwind::Registers_x86_64
RememberStack	src/DwarfParser.hpp	/^    RememberStack() : entry(nullptr) {}$/;"	f	struct:libunwind::CFI_Parser::RememberStack
RememberStack	src/DwarfParser.hpp	/^  struct RememberStack {$/;"	s	class:libunwind::CFI_Parser
SAVE_VECTOR_UNALIGNED	src/UnwindRegistersSave.S	/^#define SAVE_VECTOR_UNALIGNED(_vec, _offset) \\$/;"	d
SEPARATOR	src/assembly.h	26;"	d
SEPARATOR	src/assembly.h	36;"	d
SEPARATOR	src/assembly.h	65;"	d
SEPARATOR	src/assembly.h	67;"	d
SIZEOF_UNWIND_EXCEPTION	test/remember_state_leak.pass.sh.s	/^    SIZEOF_UNWIND_EXCEPTION = 32$/;"	d
STATUS_GCC_MAGIC	src/Unwind-seh.cpp	35;"	d	file:
STATUS_GCC_THROW	src/Unwind-seh.cpp	44;"	d	file:
STATUS_GCC_UNWIND	src/Unwind-seh.cpp	47;"	d	file:
STATUS_USER_DEFINED	src/Unwind-seh.cpp	33;"	d	file:
STR	src/config.h	72;"	d
SU16	src/Unwind-EHABI.cpp	/^    SU16 = 0, \/\/ Short descriptor, 16-bit entries$/;"	e	enum:__anon34::Descriptor::__anon35	file:
SYMBOL_IS_FUNC	src/assembly.h	120;"	d
SYMBOL_NAME	src/assembly.h	116;"	d
SYMBOL_NAME	src/config.h	74;"	d
ScopeIndex	src/UnwindCursor.hpp	/^  ULONG ScopeIndex;$/;"	m	struct:_DISPATCHER_CONTEXT
SizeOfProlog	src/UnwindCursor.hpp	/^  uint8_t SizeOfProlog;$/;"	m	struct:UNWIND_INFO
TMP	src/UnwindRegistersSave.S	/^#define TMP %rdx$/;"	d
TMP	src/UnwindRegistersSave.S	/^#define TMP %rsi$/;"	d
TargetIp	src/UnwindCursor.hpp	/^  ULONG64 TargetIp;$/;"	m	struct:_DISPATCHER_CONTEXT
TheFrameHeaderCache	src/AddressSpace.hpp	/^static FrameHeaderCache TheFrameHeaderCache;$/;"	m	namespace:libunwind
UNWIND_ARM64_DWARF_SECTION_OFFSET	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_DWARF_SECTION_OFFSET          = 0x00FFFFFF,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAMELESS_STACK_SIZE_MASK     = 0x00FFF000,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_D10_D11_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D10_D11_PAIR            = 0x00000200,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_D12_D13_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D12_D13_PAIR            = 0x00000400,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_D14_D15_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D14_D15_PAIR            = 0x00000800,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_D8_D9_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_D8_D9_PAIR              = 0x00000100,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_X19_X20_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X19_X20_PAIR            = 0x00000001,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_X21_X22_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X21_X22_PAIR            = 0x00000002,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_X23_X24_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X23_X24_PAIR            = 0x00000004,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_X25_X26_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X25_X26_PAIR            = 0x00000008,$/;"	e	enum:__anon31
UNWIND_ARM64_FRAME_X27_X28_PAIR	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_FRAME_X27_X28_PAIR            = 0x00000010,$/;"	e	enum:__anon31
UNWIND_ARM64_MODE_DWARF	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_DWARF                    = 0x03000000,$/;"	e	enum:__anon31
UNWIND_ARM64_MODE_FRAME	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_FRAME                    = 0x04000000,$/;"	e	enum:__anon31
UNWIND_ARM64_MODE_FRAMELESS	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_FRAMELESS                = 0x02000000,$/;"	e	enum:__anon31
UNWIND_ARM64_MODE_MASK	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_ARM64_MODE_MASK                     = 0x0F000000,$/;"	e	enum:__anon31
UNWIND_ASSEMBLY_H	src/assembly.h	16;"	d
UNWIND_HAS_LSDA	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_HAS_LSDA                        = 0x40000000,$/;"	e	enum:__anon26
UNWIND_INFO	src/UnwindCursor.hpp	/^struct UNWIND_INFO {$/;"	s
UNWIND_INFO_COMPRESSED_ENTRY_ENCODING_INDEX	include/mach-o/compact_unwind_encoding.h	472;"	d
UNWIND_INFO_COMPRESSED_ENTRY_FUNC_OFFSET	include/mach-o/compact_unwind_encoding.h	471;"	d
UNWIND_IS_NOT_FUNCTION_START	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_IS_NOT_FUNCTION_START           = 0x80000000,$/;"	e	enum:__anon26
UNWIND_PERSONALITY_MASK	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_PERSONALITY_MASK                = 0x30000000,$/;"	e	enum:__anon26
UNWIND_SECOND_LEVEL_COMPRESSED	include/mach-o/compact_unwind_encoding.h	459;"	d
UNWIND_SECOND_LEVEL_REGULAR	include/mach-o/compact_unwind_encoding.h	450;"	d
UNWIND_SECTION_VERSION	include/mach-o/compact_unwind_encoding.h	408;"	d
UNWIND_X86_64_DWARF_SECTION_OFFSET	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_DWARF_SECTION_OFFSET              = 0x00FFFFFF,$/;"	e	enum:__anon29
UNWIND_X86_64_FRAMELESS_STACK_ADJUST	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_ADJUST            = 0x0000E000,$/;"	e	enum:__anon29
UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_REG_COUNT         = 0x00001C00,$/;"	e	enum:__anon29
UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_REG_PERMUTATION   = 0x000003FF,$/;"	e	enum:__anon29
UNWIND_X86_64_FRAMELESS_STACK_SIZE	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_FRAMELESS_STACK_SIZE              = 0x00FF0000,$/;"	e	enum:__anon29
UNWIND_X86_64_MODE_DWARF	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_DWARF                        = 0x04000000,$/;"	e	enum:__anon29
UNWIND_X86_64_MODE_MASK	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_MASK                         = 0x0F000000,$/;"	e	enum:__anon29
UNWIND_X86_64_MODE_RBP_FRAME	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_RBP_FRAME                    = 0x01000000,$/;"	e	enum:__anon29
UNWIND_X86_64_MODE_STACK_IMMD	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_STACK_IMMD                   = 0x02000000,$/;"	e	enum:__anon29
UNWIND_X86_64_MODE_STACK_IND	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_MODE_STACK_IND                    = 0x03000000,$/;"	e	enum:__anon29
UNWIND_X86_64_RBP_FRAME_OFFSET	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_RBP_FRAME_OFFSET                  = 0x00FF0000,$/;"	e	enum:__anon29
UNWIND_X86_64_RBP_FRAME_REGISTERS	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_RBP_FRAME_REGISTERS               = 0x00007FFF,$/;"	e	enum:__anon29
UNWIND_X86_64_REG_NONE	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_NONE       = 0,$/;"	e	enum:__anon30
UNWIND_X86_64_REG_R12	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R12        = 2,$/;"	e	enum:__anon30
UNWIND_X86_64_REG_R13	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R13        = 3,$/;"	e	enum:__anon30
UNWIND_X86_64_REG_R14	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R14        = 4,$/;"	e	enum:__anon30
UNWIND_X86_64_REG_R15	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_R15        = 5,$/;"	e	enum:__anon30
UNWIND_X86_64_REG_RBP	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_RBP        = 6,$/;"	e	enum:__anon30
UNWIND_X86_64_REG_RBX	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_64_REG_RBX        = 1,$/;"	e	enum:__anon30
UNWIND_X86_DWARF_SECTION_OFFSET	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_DWARF_SECTION_OFFSET              = 0x00FFFFFF,$/;"	e	enum:__anon27
UNWIND_X86_EBP_FRAME_OFFSET	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_EBP_FRAME_OFFSET                  = 0x00FF0000,$/;"	e	enum:__anon27
UNWIND_X86_EBP_FRAME_REGISTERS	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_EBP_FRAME_REGISTERS               = 0x00007FFF,$/;"	e	enum:__anon27
UNWIND_X86_FRAMELESS_STACK_ADJUST	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_ADJUST            = 0x0000E000,$/;"	e	enum:__anon27
UNWIND_X86_FRAMELESS_STACK_REG_COUNT	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_REG_COUNT         = 0x00001C00,$/;"	e	enum:__anon27
UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_REG_PERMUTATION   = 0x000003FF,$/;"	e	enum:__anon27
UNWIND_X86_FRAMELESS_STACK_SIZE	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_FRAMELESS_STACK_SIZE              = 0x00FF0000,$/;"	e	enum:__anon27
UNWIND_X86_MODE_DWARF	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_DWARF                        = 0x04000000,$/;"	e	enum:__anon27
UNWIND_X86_MODE_EBP_FRAME	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_EBP_FRAME                    = 0x01000000,$/;"	e	enum:__anon27
UNWIND_X86_MODE_MASK	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_MASK                         = 0x0F000000,$/;"	e	enum:__anon27
UNWIND_X86_MODE_STACK_IMMD	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_STACK_IMMD                   = 0x02000000,$/;"	e	enum:__anon27
UNWIND_X86_MODE_STACK_IND	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_MODE_STACK_IND                    = 0x03000000,$/;"	e	enum:__anon27
UNWIND_X86_REG_EBP	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EBP      = 6,$/;"	e	enum:__anon28
UNWIND_X86_REG_EBX	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EBX      = 1,$/;"	e	enum:__anon28
UNWIND_X86_REG_ECX	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_ECX      = 2,$/;"	e	enum:__anon28
UNWIND_X86_REG_EDI	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EDI      = 4,$/;"	e	enum:__anon28
UNWIND_X86_REG_EDX	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_EDX      = 3,$/;"	e	enum:__anon28
UNWIND_X86_REG_ESI	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_ESI      = 5,$/;"	e	enum:__anon28
UNWIND_X86_REG_NONE	include/mach-o/compact_unwind_encoding.h	/^    UNWIND_X86_REG_NONE     = 0,$/;"	e	enum:__anon28
UNW_AARCH64_FP	include/libunwind.h	/^  UNW_AARCH64_FP = 29,$/;"	e	enum:__anon9
UNW_AARCH64_LR	include/libunwind.h	/^  UNW_AARCH64_LR = 30,$/;"	e	enum:__anon9
UNW_AARCH64_PC	include/libunwind.h	/^  UNW_AARCH64_PC = 32,$/;"	e	enum:__anon9
UNW_AARCH64_RA_SIGN_STATE	include/libunwind.h	/^  UNW_AARCH64_RA_SIGN_STATE = 34,$/;"	e	enum:__anon9
UNW_AARCH64_SP	include/libunwind.h	/^  UNW_AARCH64_SP = 31,$/;"	e	enum:__anon9
UNW_AARCH64_V0	include/libunwind.h	/^  UNW_AARCH64_V0 = 64,$/;"	e	enum:__anon9
UNW_AARCH64_V1	include/libunwind.h	/^  UNW_AARCH64_V1 = 65,$/;"	e	enum:__anon9
UNW_AARCH64_V10	include/libunwind.h	/^  UNW_AARCH64_V10 = 74,$/;"	e	enum:__anon9
UNW_AARCH64_V11	include/libunwind.h	/^  UNW_AARCH64_V11 = 75,$/;"	e	enum:__anon9
UNW_AARCH64_V12	include/libunwind.h	/^  UNW_AARCH64_V12 = 76,$/;"	e	enum:__anon9
UNW_AARCH64_V13	include/libunwind.h	/^  UNW_AARCH64_V13 = 77,$/;"	e	enum:__anon9
UNW_AARCH64_V14	include/libunwind.h	/^  UNW_AARCH64_V14 = 78,$/;"	e	enum:__anon9
UNW_AARCH64_V15	include/libunwind.h	/^  UNW_AARCH64_V15 = 79,$/;"	e	enum:__anon9
UNW_AARCH64_V16	include/libunwind.h	/^  UNW_AARCH64_V16 = 80,$/;"	e	enum:__anon9
UNW_AARCH64_V17	include/libunwind.h	/^  UNW_AARCH64_V17 = 81,$/;"	e	enum:__anon9
UNW_AARCH64_V18	include/libunwind.h	/^  UNW_AARCH64_V18 = 82,$/;"	e	enum:__anon9
UNW_AARCH64_V19	include/libunwind.h	/^  UNW_AARCH64_V19 = 83,$/;"	e	enum:__anon9
UNW_AARCH64_V2	include/libunwind.h	/^  UNW_AARCH64_V2 = 66,$/;"	e	enum:__anon9
UNW_AARCH64_V20	include/libunwind.h	/^  UNW_AARCH64_V20 = 84,$/;"	e	enum:__anon9
UNW_AARCH64_V21	include/libunwind.h	/^  UNW_AARCH64_V21 = 85,$/;"	e	enum:__anon9
UNW_AARCH64_V22	include/libunwind.h	/^  UNW_AARCH64_V22 = 86,$/;"	e	enum:__anon9
UNW_AARCH64_V23	include/libunwind.h	/^  UNW_AARCH64_V23 = 87,$/;"	e	enum:__anon9
UNW_AARCH64_V24	include/libunwind.h	/^  UNW_AARCH64_V24 = 88,$/;"	e	enum:__anon9
UNW_AARCH64_V25	include/libunwind.h	/^  UNW_AARCH64_V25 = 89,$/;"	e	enum:__anon9
UNW_AARCH64_V26	include/libunwind.h	/^  UNW_AARCH64_V26 = 90,$/;"	e	enum:__anon9
UNW_AARCH64_V27	include/libunwind.h	/^  UNW_AARCH64_V27 = 91,$/;"	e	enum:__anon9
UNW_AARCH64_V28	include/libunwind.h	/^  UNW_AARCH64_V28 = 92,$/;"	e	enum:__anon9
UNW_AARCH64_V29	include/libunwind.h	/^  UNW_AARCH64_V29 = 93,$/;"	e	enum:__anon9
UNW_AARCH64_V3	include/libunwind.h	/^  UNW_AARCH64_V3 = 67,$/;"	e	enum:__anon9
UNW_AARCH64_V30	include/libunwind.h	/^  UNW_AARCH64_V30 = 94,$/;"	e	enum:__anon9
UNW_AARCH64_V31	include/libunwind.h	/^  UNW_AARCH64_V31 = 95,$/;"	e	enum:__anon9
UNW_AARCH64_V4	include/libunwind.h	/^  UNW_AARCH64_V4 = 68,$/;"	e	enum:__anon9
UNW_AARCH64_V5	include/libunwind.h	/^  UNW_AARCH64_V5 = 69,$/;"	e	enum:__anon9
UNW_AARCH64_V6	include/libunwind.h	/^  UNW_AARCH64_V6 = 70,$/;"	e	enum:__anon9
UNW_AARCH64_V7	include/libunwind.h	/^  UNW_AARCH64_V7 = 71,$/;"	e	enum:__anon9
UNW_AARCH64_V8	include/libunwind.h	/^  UNW_AARCH64_V8 = 72,$/;"	e	enum:__anon9
UNW_AARCH64_V9	include/libunwind.h	/^  UNW_AARCH64_V9 = 73,$/;"	e	enum:__anon9
UNW_AARCH64_X0	include/libunwind.h	/^  UNW_AARCH64_X0 = 0,$/;"	e	enum:__anon9
UNW_AARCH64_X1	include/libunwind.h	/^  UNW_AARCH64_X1 = 1,$/;"	e	enum:__anon9
UNW_AARCH64_X10	include/libunwind.h	/^  UNW_AARCH64_X10 = 10,$/;"	e	enum:__anon9
UNW_AARCH64_X11	include/libunwind.h	/^  UNW_AARCH64_X11 = 11,$/;"	e	enum:__anon9
UNW_AARCH64_X12	include/libunwind.h	/^  UNW_AARCH64_X12 = 12,$/;"	e	enum:__anon9
UNW_AARCH64_X13	include/libunwind.h	/^  UNW_AARCH64_X13 = 13,$/;"	e	enum:__anon9
UNW_AARCH64_X14	include/libunwind.h	/^  UNW_AARCH64_X14 = 14,$/;"	e	enum:__anon9
UNW_AARCH64_X15	include/libunwind.h	/^  UNW_AARCH64_X15 = 15,$/;"	e	enum:__anon9
UNW_AARCH64_X16	include/libunwind.h	/^  UNW_AARCH64_X16 = 16,$/;"	e	enum:__anon9
UNW_AARCH64_X17	include/libunwind.h	/^  UNW_AARCH64_X17 = 17,$/;"	e	enum:__anon9
UNW_AARCH64_X18	include/libunwind.h	/^  UNW_AARCH64_X18 = 18,$/;"	e	enum:__anon9
UNW_AARCH64_X19	include/libunwind.h	/^  UNW_AARCH64_X19 = 19,$/;"	e	enum:__anon9
UNW_AARCH64_X2	include/libunwind.h	/^  UNW_AARCH64_X2 = 2,$/;"	e	enum:__anon9
UNW_AARCH64_X20	include/libunwind.h	/^  UNW_AARCH64_X20 = 20,$/;"	e	enum:__anon9
UNW_AARCH64_X21	include/libunwind.h	/^  UNW_AARCH64_X21 = 21,$/;"	e	enum:__anon9
UNW_AARCH64_X22	include/libunwind.h	/^  UNW_AARCH64_X22 = 22,$/;"	e	enum:__anon9
UNW_AARCH64_X23	include/libunwind.h	/^  UNW_AARCH64_X23 = 23,$/;"	e	enum:__anon9
UNW_AARCH64_X24	include/libunwind.h	/^  UNW_AARCH64_X24 = 24,$/;"	e	enum:__anon9
UNW_AARCH64_X25	include/libunwind.h	/^  UNW_AARCH64_X25 = 25,$/;"	e	enum:__anon9
UNW_AARCH64_X26	include/libunwind.h	/^  UNW_AARCH64_X26 = 26,$/;"	e	enum:__anon9
UNW_AARCH64_X27	include/libunwind.h	/^  UNW_AARCH64_X27 = 27,$/;"	e	enum:__anon9
UNW_AARCH64_X28	include/libunwind.h	/^  UNW_AARCH64_X28 = 28,$/;"	e	enum:__anon9
UNW_AARCH64_X29	include/libunwind.h	/^  UNW_AARCH64_X29 = 29,$/;"	e	enum:__anon9
UNW_AARCH64_X3	include/libunwind.h	/^  UNW_AARCH64_X3 = 3,$/;"	e	enum:__anon9
UNW_AARCH64_X30	include/libunwind.h	/^  UNW_AARCH64_X30 = 30,$/;"	e	enum:__anon9
UNW_AARCH64_X31	include/libunwind.h	/^  UNW_AARCH64_X31 = 31,$/;"	e	enum:__anon9
UNW_AARCH64_X4	include/libunwind.h	/^  UNW_AARCH64_X4 = 4,$/;"	e	enum:__anon9
UNW_AARCH64_X5	include/libunwind.h	/^  UNW_AARCH64_X5 = 5,$/;"	e	enum:__anon9
UNW_AARCH64_X6	include/libunwind.h	/^  UNW_AARCH64_X6 = 6,$/;"	e	enum:__anon9
UNW_AARCH64_X7	include/libunwind.h	/^  UNW_AARCH64_X7 = 7,$/;"	e	enum:__anon9
UNW_AARCH64_X8	include/libunwind.h	/^  UNW_AARCH64_X8 = 8,$/;"	e	enum:__anon9
UNW_AARCH64_X9	include/libunwind.h	/^  UNW_AARCH64_X9 = 9,$/;"	e	enum:__anon9
UNW_ARM64_D0	include/libunwind.h	/^  UNW_ARM64_D0 = UNW_AARCH64_V0,$/;"	e	enum:__anon9
UNW_ARM64_D1	include/libunwind.h	/^  UNW_ARM64_D1 = UNW_AARCH64_V1,$/;"	e	enum:__anon9
UNW_ARM64_D10	include/libunwind.h	/^  UNW_ARM64_D10 = UNW_AARCH64_V10,$/;"	e	enum:__anon9
UNW_ARM64_D11	include/libunwind.h	/^  UNW_ARM64_D11 = UNW_AARCH64_V11,$/;"	e	enum:__anon9
UNW_ARM64_D12	include/libunwind.h	/^  UNW_ARM64_D12 = UNW_AARCH64_V12,$/;"	e	enum:__anon9
UNW_ARM64_D13	include/libunwind.h	/^  UNW_ARM64_D13 = UNW_AARCH64_V13,$/;"	e	enum:__anon9
UNW_ARM64_D14	include/libunwind.h	/^  UNW_ARM64_D14 = UNW_AARCH64_V14,$/;"	e	enum:__anon9
UNW_ARM64_D15	include/libunwind.h	/^  UNW_ARM64_D15 = UNW_AARCH64_V15,$/;"	e	enum:__anon9
UNW_ARM64_D16	include/libunwind.h	/^  UNW_ARM64_D16 = UNW_AARCH64_V16,$/;"	e	enum:__anon9
UNW_ARM64_D17	include/libunwind.h	/^  UNW_ARM64_D17 = UNW_AARCH64_V17,$/;"	e	enum:__anon9
UNW_ARM64_D18	include/libunwind.h	/^  UNW_ARM64_D18 = UNW_AARCH64_V18,$/;"	e	enum:__anon9
UNW_ARM64_D19	include/libunwind.h	/^  UNW_ARM64_D19 = UNW_AARCH64_V19,$/;"	e	enum:__anon9
UNW_ARM64_D2	include/libunwind.h	/^  UNW_ARM64_D2 = UNW_AARCH64_V2,$/;"	e	enum:__anon9
UNW_ARM64_D20	include/libunwind.h	/^  UNW_ARM64_D20 = UNW_AARCH64_V20,$/;"	e	enum:__anon9
UNW_ARM64_D21	include/libunwind.h	/^  UNW_ARM64_D21 = UNW_AARCH64_V21,$/;"	e	enum:__anon9
UNW_ARM64_D22	include/libunwind.h	/^  UNW_ARM64_D22 = UNW_AARCH64_V22,$/;"	e	enum:__anon9
UNW_ARM64_D23	include/libunwind.h	/^  UNW_ARM64_D23 = UNW_AARCH64_V23,$/;"	e	enum:__anon9
UNW_ARM64_D24	include/libunwind.h	/^  UNW_ARM64_D24 = UNW_AARCH64_V24,$/;"	e	enum:__anon9
UNW_ARM64_D25	include/libunwind.h	/^  UNW_ARM64_D25 = UNW_AARCH64_V25,$/;"	e	enum:__anon9
UNW_ARM64_D26	include/libunwind.h	/^  UNW_ARM64_D26 = UNW_AARCH64_V26,$/;"	e	enum:__anon9
UNW_ARM64_D27	include/libunwind.h	/^  UNW_ARM64_D27 = UNW_AARCH64_V27,$/;"	e	enum:__anon9
UNW_ARM64_D28	include/libunwind.h	/^  UNW_ARM64_D28 = UNW_AARCH64_V28,$/;"	e	enum:__anon9
UNW_ARM64_D29	include/libunwind.h	/^  UNW_ARM64_D29 = UNW_AARCH64_V29,$/;"	e	enum:__anon9
UNW_ARM64_D3	include/libunwind.h	/^  UNW_ARM64_D3 = UNW_AARCH64_V3,$/;"	e	enum:__anon9
UNW_ARM64_D30	include/libunwind.h	/^  UNW_ARM64_D30 = UNW_AARCH64_V30,$/;"	e	enum:__anon9
UNW_ARM64_D31	include/libunwind.h	/^  UNW_ARM64_D31 = UNW_AARCH64_V31,$/;"	e	enum:__anon9
UNW_ARM64_D4	include/libunwind.h	/^  UNW_ARM64_D4 = UNW_AARCH64_V4,$/;"	e	enum:__anon9
UNW_ARM64_D5	include/libunwind.h	/^  UNW_ARM64_D5 = UNW_AARCH64_V5,$/;"	e	enum:__anon9
UNW_ARM64_D6	include/libunwind.h	/^  UNW_ARM64_D6 = UNW_AARCH64_V6,$/;"	e	enum:__anon9
UNW_ARM64_D7	include/libunwind.h	/^  UNW_ARM64_D7 = UNW_AARCH64_V7,$/;"	e	enum:__anon9
UNW_ARM64_D8	include/libunwind.h	/^  UNW_ARM64_D8 = UNW_AARCH64_V8,$/;"	e	enum:__anon9
UNW_ARM64_D9	include/libunwind.h	/^  UNW_ARM64_D9 = UNW_AARCH64_V9,$/;"	e	enum:__anon9
UNW_ARM64_FP	include/libunwind.h	/^  UNW_ARM64_FP = UNW_AARCH64_FP,$/;"	e	enum:__anon9
UNW_ARM64_LR	include/libunwind.h	/^  UNW_ARM64_LR = UNW_AARCH64_LR,$/;"	e	enum:__anon9
UNW_ARM64_PC	include/libunwind.h	/^  UNW_ARM64_PC = UNW_AARCH64_PC,$/;"	e	enum:__anon9
UNW_ARM64_RA_SIGN_STATE	include/libunwind.h	/^  UNW_ARM64_RA_SIGN_STATE = UNW_AARCH64_RA_SIGN_STATE,$/;"	e	enum:__anon9
UNW_ARM64_SP	include/libunwind.h	/^  UNW_ARM64_SP = UNW_AARCH64_SP,$/;"	e	enum:__anon9
UNW_ARM64_X0	include/libunwind.h	/^  UNW_ARM64_X0 = UNW_AARCH64_X0,$/;"	e	enum:__anon9
UNW_ARM64_X1	include/libunwind.h	/^  UNW_ARM64_X1 = UNW_AARCH64_X1,$/;"	e	enum:__anon9
UNW_ARM64_X10	include/libunwind.h	/^  UNW_ARM64_X10 = UNW_AARCH64_X10,$/;"	e	enum:__anon9
UNW_ARM64_X11	include/libunwind.h	/^  UNW_ARM64_X11 = UNW_AARCH64_X11,$/;"	e	enum:__anon9
UNW_ARM64_X12	include/libunwind.h	/^  UNW_ARM64_X12 = UNW_AARCH64_X12,$/;"	e	enum:__anon9
UNW_ARM64_X13	include/libunwind.h	/^  UNW_ARM64_X13 = UNW_AARCH64_X13,$/;"	e	enum:__anon9
UNW_ARM64_X14	include/libunwind.h	/^  UNW_ARM64_X14 = UNW_AARCH64_X14,$/;"	e	enum:__anon9
UNW_ARM64_X15	include/libunwind.h	/^  UNW_ARM64_X15 = UNW_AARCH64_X15,$/;"	e	enum:__anon9
UNW_ARM64_X16	include/libunwind.h	/^  UNW_ARM64_X16 = UNW_AARCH64_X16,$/;"	e	enum:__anon9
UNW_ARM64_X17	include/libunwind.h	/^  UNW_ARM64_X17 = UNW_AARCH64_X17,$/;"	e	enum:__anon9
UNW_ARM64_X18	include/libunwind.h	/^  UNW_ARM64_X18 = UNW_AARCH64_X18,$/;"	e	enum:__anon9
UNW_ARM64_X19	include/libunwind.h	/^  UNW_ARM64_X19 = UNW_AARCH64_X19,$/;"	e	enum:__anon9
UNW_ARM64_X2	include/libunwind.h	/^  UNW_ARM64_X2 = UNW_AARCH64_X2,$/;"	e	enum:__anon9
UNW_ARM64_X20	include/libunwind.h	/^  UNW_ARM64_X20 = UNW_AARCH64_X20,$/;"	e	enum:__anon9
UNW_ARM64_X21	include/libunwind.h	/^  UNW_ARM64_X21 = UNW_AARCH64_X21,$/;"	e	enum:__anon9
UNW_ARM64_X22	include/libunwind.h	/^  UNW_ARM64_X22 = UNW_AARCH64_X22,$/;"	e	enum:__anon9
UNW_ARM64_X23	include/libunwind.h	/^  UNW_ARM64_X23 = UNW_AARCH64_X23,$/;"	e	enum:__anon9
UNW_ARM64_X24	include/libunwind.h	/^  UNW_ARM64_X24 = UNW_AARCH64_X24,$/;"	e	enum:__anon9
UNW_ARM64_X25	include/libunwind.h	/^  UNW_ARM64_X25 = UNW_AARCH64_X25,$/;"	e	enum:__anon9
UNW_ARM64_X26	include/libunwind.h	/^  UNW_ARM64_X26 = UNW_AARCH64_X26,$/;"	e	enum:__anon9
UNW_ARM64_X27	include/libunwind.h	/^  UNW_ARM64_X27 = UNW_AARCH64_X27,$/;"	e	enum:__anon9
UNW_ARM64_X28	include/libunwind.h	/^  UNW_ARM64_X28 = UNW_AARCH64_X28,$/;"	e	enum:__anon9
UNW_ARM64_X29	include/libunwind.h	/^  UNW_ARM64_X29 = UNW_AARCH64_X29,$/;"	e	enum:__anon9
UNW_ARM64_X3	include/libunwind.h	/^  UNW_ARM64_X3 = UNW_AARCH64_X3,$/;"	e	enum:__anon9
UNW_ARM64_X30	include/libunwind.h	/^  UNW_ARM64_X30 = UNW_AARCH64_X30,$/;"	e	enum:__anon9
UNW_ARM64_X31	include/libunwind.h	/^  UNW_ARM64_X31 = UNW_AARCH64_X31,$/;"	e	enum:__anon9
UNW_ARM64_X4	include/libunwind.h	/^  UNW_ARM64_X4 = UNW_AARCH64_X4,$/;"	e	enum:__anon9
UNW_ARM64_X5	include/libunwind.h	/^  UNW_ARM64_X5 = UNW_AARCH64_X5,$/;"	e	enum:__anon9
UNW_ARM64_X6	include/libunwind.h	/^  UNW_ARM64_X6 = UNW_AARCH64_X6,$/;"	e	enum:__anon9
UNW_ARM64_X7	include/libunwind.h	/^  UNW_ARM64_X7 = UNW_AARCH64_X7,$/;"	e	enum:__anon9
UNW_ARM64_X8	include/libunwind.h	/^  UNW_ARM64_X8 = UNW_AARCH64_X8,$/;"	e	enum:__anon9
UNW_ARM64_X9	include/libunwind.h	/^  UNW_ARM64_X9 = UNW_AARCH64_X9,$/;"	e	enum:__anon9
UNW_ARM_D0	include/libunwind.h	/^  UNW_ARM_D0  = 256,$/;"	e	enum:__anon10
UNW_ARM_D1	include/libunwind.h	/^  UNW_ARM_D1  = 257,$/;"	e	enum:__anon10
UNW_ARM_D10	include/libunwind.h	/^  UNW_ARM_D10 = 266,$/;"	e	enum:__anon10
UNW_ARM_D11	include/libunwind.h	/^  UNW_ARM_D11 = 267,$/;"	e	enum:__anon10
UNW_ARM_D12	include/libunwind.h	/^  UNW_ARM_D12 = 268,$/;"	e	enum:__anon10
UNW_ARM_D13	include/libunwind.h	/^  UNW_ARM_D13 = 269,$/;"	e	enum:__anon10
UNW_ARM_D14	include/libunwind.h	/^  UNW_ARM_D14 = 270,$/;"	e	enum:__anon10
UNW_ARM_D15	include/libunwind.h	/^  UNW_ARM_D15 = 271,$/;"	e	enum:__anon10
UNW_ARM_D16	include/libunwind.h	/^  UNW_ARM_D16 = 272,$/;"	e	enum:__anon10
UNW_ARM_D17	include/libunwind.h	/^  UNW_ARM_D17 = 273,$/;"	e	enum:__anon10
UNW_ARM_D18	include/libunwind.h	/^  UNW_ARM_D18 = 274,$/;"	e	enum:__anon10
UNW_ARM_D19	include/libunwind.h	/^  UNW_ARM_D19 = 275,$/;"	e	enum:__anon10
UNW_ARM_D2	include/libunwind.h	/^  UNW_ARM_D2  = 258,$/;"	e	enum:__anon10
UNW_ARM_D20	include/libunwind.h	/^  UNW_ARM_D20 = 276,$/;"	e	enum:__anon10
UNW_ARM_D21	include/libunwind.h	/^  UNW_ARM_D21 = 277,$/;"	e	enum:__anon10
UNW_ARM_D22	include/libunwind.h	/^  UNW_ARM_D22 = 278,$/;"	e	enum:__anon10
UNW_ARM_D23	include/libunwind.h	/^  UNW_ARM_D23 = 279,$/;"	e	enum:__anon10
UNW_ARM_D24	include/libunwind.h	/^  UNW_ARM_D24 = 280,$/;"	e	enum:__anon10
UNW_ARM_D25	include/libunwind.h	/^  UNW_ARM_D25 = 281,$/;"	e	enum:__anon10
UNW_ARM_D26	include/libunwind.h	/^  UNW_ARM_D26 = 282,$/;"	e	enum:__anon10
UNW_ARM_D27	include/libunwind.h	/^  UNW_ARM_D27 = 283,$/;"	e	enum:__anon10
UNW_ARM_D28	include/libunwind.h	/^  UNW_ARM_D28 = 284,$/;"	e	enum:__anon10
UNW_ARM_D29	include/libunwind.h	/^  UNW_ARM_D29 = 285,$/;"	e	enum:__anon10
UNW_ARM_D3	include/libunwind.h	/^  UNW_ARM_D3  = 259,$/;"	e	enum:__anon10
UNW_ARM_D30	include/libunwind.h	/^  UNW_ARM_D30 = 286,$/;"	e	enum:__anon10
UNW_ARM_D31	include/libunwind.h	/^  UNW_ARM_D31 = 287,$/;"	e	enum:__anon10
UNW_ARM_D4	include/libunwind.h	/^  UNW_ARM_D4  = 260,$/;"	e	enum:__anon10
UNW_ARM_D5	include/libunwind.h	/^  UNW_ARM_D5  = 261,$/;"	e	enum:__anon10
UNW_ARM_D6	include/libunwind.h	/^  UNW_ARM_D6  = 262,$/;"	e	enum:__anon10
UNW_ARM_D7	include/libunwind.h	/^  UNW_ARM_D7  = 263,$/;"	e	enum:__anon10
UNW_ARM_D8	include/libunwind.h	/^  UNW_ARM_D8  = 264,$/;"	e	enum:__anon10
UNW_ARM_D9	include/libunwind.h	/^  UNW_ARM_D9  = 265,$/;"	e	enum:__anon10
UNW_ARM_IP	include/libunwind.h	/^  UNW_ARM_IP  = 15,  \/\/ Logical alias for UNW_REG_IP$/;"	e	enum:__anon10
UNW_ARM_LR	include/libunwind.h	/^  UNW_ARM_LR  = 14,$/;"	e	enum:__anon10
UNW_ARM_R0	include/libunwind.h	/^  UNW_ARM_R0  = 0,$/;"	e	enum:__anon10
UNW_ARM_R1	include/libunwind.h	/^  UNW_ARM_R1  = 1,$/;"	e	enum:__anon10
UNW_ARM_R10	include/libunwind.h	/^  UNW_ARM_R10 = 10,$/;"	e	enum:__anon10
UNW_ARM_R11	include/libunwind.h	/^  UNW_ARM_R11 = 11,$/;"	e	enum:__anon10
UNW_ARM_R12	include/libunwind.h	/^  UNW_ARM_R12 = 12,$/;"	e	enum:__anon10
UNW_ARM_R13	include/libunwind.h	/^  UNW_ARM_R13 = 13,$/;"	e	enum:__anon10
UNW_ARM_R14	include/libunwind.h	/^  UNW_ARM_R14 = 14,$/;"	e	enum:__anon10
UNW_ARM_R15	include/libunwind.h	/^  UNW_ARM_R15 = 15,$/;"	e	enum:__anon10
UNW_ARM_R2	include/libunwind.h	/^  UNW_ARM_R2  = 2,$/;"	e	enum:__anon10
UNW_ARM_R3	include/libunwind.h	/^  UNW_ARM_R3  = 3,$/;"	e	enum:__anon10
UNW_ARM_R4	include/libunwind.h	/^  UNW_ARM_R4  = 4,$/;"	e	enum:__anon10
UNW_ARM_R5	include/libunwind.h	/^  UNW_ARM_R5  = 5,$/;"	e	enum:__anon10
UNW_ARM_R6	include/libunwind.h	/^  UNW_ARM_R6  = 6,$/;"	e	enum:__anon10
UNW_ARM_R7	include/libunwind.h	/^  UNW_ARM_R7  = 7,$/;"	e	enum:__anon10
UNW_ARM_R8	include/libunwind.h	/^  UNW_ARM_R8  = 8,$/;"	e	enum:__anon10
UNW_ARM_R9	include/libunwind.h	/^  UNW_ARM_R9  = 9,$/;"	e	enum:__anon10
UNW_ARM_RA_AUTH_CODE	include/libunwind.h	/^  UNW_ARM_RA_AUTH_CODE = 143,$/;"	e	enum:__anon10
UNW_ARM_S0	include/libunwind.h	/^  UNW_ARM_S0  = 64,$/;"	e	enum:__anon10
UNW_ARM_S1	include/libunwind.h	/^  UNW_ARM_S1  = 65,$/;"	e	enum:__anon10
UNW_ARM_S10	include/libunwind.h	/^  UNW_ARM_S10 = 74,$/;"	e	enum:__anon10
UNW_ARM_S11	include/libunwind.h	/^  UNW_ARM_S11 = 75,$/;"	e	enum:__anon10
UNW_ARM_S12	include/libunwind.h	/^  UNW_ARM_S12 = 76,$/;"	e	enum:__anon10
UNW_ARM_S13	include/libunwind.h	/^  UNW_ARM_S13 = 77,$/;"	e	enum:__anon10
UNW_ARM_S14	include/libunwind.h	/^  UNW_ARM_S14 = 78,$/;"	e	enum:__anon10
UNW_ARM_S15	include/libunwind.h	/^  UNW_ARM_S15 = 79,$/;"	e	enum:__anon10
UNW_ARM_S16	include/libunwind.h	/^  UNW_ARM_S16 = 80,$/;"	e	enum:__anon10
UNW_ARM_S17	include/libunwind.h	/^  UNW_ARM_S17 = 81,$/;"	e	enum:__anon10
UNW_ARM_S18	include/libunwind.h	/^  UNW_ARM_S18 = 82,$/;"	e	enum:__anon10
UNW_ARM_S19	include/libunwind.h	/^  UNW_ARM_S19 = 83,$/;"	e	enum:__anon10
UNW_ARM_S2	include/libunwind.h	/^  UNW_ARM_S2  = 66,$/;"	e	enum:__anon10
UNW_ARM_S20	include/libunwind.h	/^  UNW_ARM_S20 = 84,$/;"	e	enum:__anon10
UNW_ARM_S21	include/libunwind.h	/^  UNW_ARM_S21 = 85,$/;"	e	enum:__anon10
UNW_ARM_S22	include/libunwind.h	/^  UNW_ARM_S22 = 86,$/;"	e	enum:__anon10
UNW_ARM_S23	include/libunwind.h	/^  UNW_ARM_S23 = 87,$/;"	e	enum:__anon10
UNW_ARM_S24	include/libunwind.h	/^  UNW_ARM_S24 = 88,$/;"	e	enum:__anon10
UNW_ARM_S25	include/libunwind.h	/^  UNW_ARM_S25 = 89,$/;"	e	enum:__anon10
UNW_ARM_S26	include/libunwind.h	/^  UNW_ARM_S26 = 90,$/;"	e	enum:__anon10
UNW_ARM_S27	include/libunwind.h	/^  UNW_ARM_S27 = 91,$/;"	e	enum:__anon10
UNW_ARM_S28	include/libunwind.h	/^  UNW_ARM_S28 = 92,$/;"	e	enum:__anon10
UNW_ARM_S29	include/libunwind.h	/^  UNW_ARM_S29 = 93,$/;"	e	enum:__anon10
UNW_ARM_S3	include/libunwind.h	/^  UNW_ARM_S3  = 67,$/;"	e	enum:__anon10
UNW_ARM_S30	include/libunwind.h	/^  UNW_ARM_S30 = 94,$/;"	e	enum:__anon10
UNW_ARM_S31	include/libunwind.h	/^  UNW_ARM_S31 = 95,$/;"	e	enum:__anon10
UNW_ARM_S4	include/libunwind.h	/^  UNW_ARM_S4  = 68,$/;"	e	enum:__anon10
UNW_ARM_S5	include/libunwind.h	/^  UNW_ARM_S5  = 69,$/;"	e	enum:__anon10
UNW_ARM_S6	include/libunwind.h	/^  UNW_ARM_S6  = 70,$/;"	e	enum:__anon10
UNW_ARM_S7	include/libunwind.h	/^  UNW_ARM_S7  = 71,$/;"	e	enum:__anon10
UNW_ARM_S8	include/libunwind.h	/^  UNW_ARM_S8  = 72,$/;"	e	enum:__anon10
UNW_ARM_S9	include/libunwind.h	/^  UNW_ARM_S9  = 73,$/;"	e	enum:__anon10
UNW_ARM_SP	include/libunwind.h	/^  UNW_ARM_SP  = 13,  \/\/ Logical alias for UNW_REG_SP$/;"	e	enum:__anon10
UNW_ARM_WC0	include/libunwind.h	/^  UNW_ARM_WC0 = 192,$/;"	e	enum:__anon10
UNW_ARM_WC1	include/libunwind.h	/^  UNW_ARM_WC1 = 193,$/;"	e	enum:__anon10
UNW_ARM_WC2	include/libunwind.h	/^  UNW_ARM_WC2 = 194,$/;"	e	enum:__anon10
UNW_ARM_WC3	include/libunwind.h	/^  UNW_ARM_WC3 = 195,$/;"	e	enum:__anon10
UNW_ARM_WR0	include/libunwind.h	/^  UNW_ARM_WR0 = 112,$/;"	e	enum:__anon10
UNW_ARM_WR1	include/libunwind.h	/^  UNW_ARM_WR1 = 113,$/;"	e	enum:__anon10
UNW_ARM_WR10	include/libunwind.h	/^  UNW_ARM_WR10 = 122,$/;"	e	enum:__anon10
UNW_ARM_WR11	include/libunwind.h	/^  UNW_ARM_WR11 = 123,$/;"	e	enum:__anon10
UNW_ARM_WR12	include/libunwind.h	/^  UNW_ARM_WR12 = 124,$/;"	e	enum:__anon10
UNW_ARM_WR13	include/libunwind.h	/^  UNW_ARM_WR13 = 125,$/;"	e	enum:__anon10
UNW_ARM_WR14	include/libunwind.h	/^  UNW_ARM_WR14 = 126,$/;"	e	enum:__anon10
UNW_ARM_WR15	include/libunwind.h	/^  UNW_ARM_WR15 = 127,$/;"	e	enum:__anon10
UNW_ARM_WR2	include/libunwind.h	/^  UNW_ARM_WR2 = 114,$/;"	e	enum:__anon10
UNW_ARM_WR3	include/libunwind.h	/^  UNW_ARM_WR3 = 115,$/;"	e	enum:__anon10
UNW_ARM_WR4	include/libunwind.h	/^  UNW_ARM_WR4 = 116,$/;"	e	enum:__anon10
UNW_ARM_WR5	include/libunwind.h	/^  UNW_ARM_WR5 = 117,$/;"	e	enum:__anon10
UNW_ARM_WR6	include/libunwind.h	/^  UNW_ARM_WR6 = 118,$/;"	e	enum:__anon10
UNW_ARM_WR7	include/libunwind.h	/^  UNW_ARM_WR7 = 119,$/;"	e	enum:__anon10
UNW_ARM_WR8	include/libunwind.h	/^  UNW_ARM_WR8 = 120,$/;"	e	enum:__anon10
UNW_ARM_WR9	include/libunwind.h	/^  UNW_ARM_WR9 = 121,$/;"	e	enum:__anon10
UNW_EBADFRAME	include/libunwind.h	/^  UNW_EBADFRAME     = -6546, \/* bad frame *\/$/;"	e	enum:__anon3
UNW_EBADREG	include/libunwind.h	/^  UNW_EBADREG       = -6542, \/* bad register number *\/$/;"	e	enum:__anon3
UNW_EBADVERSION	include/libunwind.h	/^  UNW_EBADVERSION   = -6548, \/* unwind info has unsupported version *\/$/;"	e	enum:__anon3
UNW_ECROSSRASIGNING	include/libunwind.h	/^  , UNW_ECROSSRASIGNING = -6550 \/* cross unwind with return address signing *\/$/;"	e	enum:__anon3
UNW_EINVAL	include/libunwind.h	/^  UNW_EINVAL        = -6547, \/* unsupported operation or bad value *\/$/;"	e	enum:__anon3
UNW_EINVALIDIP	include/libunwind.h	/^  UNW_EINVALIDIP    = -6545, \/* invalid IP *\/$/;"	e	enum:__anon3
UNW_ENOINFO	include/libunwind.h	/^  UNW_ENOINFO       = -6549  \/* no unwind info found *\/$/;"	e	enum:__anon3
UNW_ENOMEM	include/libunwind.h	/^  UNW_ENOMEM        = -6541, \/* out of memory *\/$/;"	e	enum:__anon3
UNW_EREADONLYREG	include/libunwind.h	/^  UNW_EREADONLYREG  = -6543, \/* attempt to write read-only register *\/$/;"	e	enum:__anon3
UNW_ESTOPUNWIND	include/libunwind.h	/^  UNW_ESTOPUNWIND   = -6544, \/* stop unwinding *\/$/;"	e	enum:__anon3
UNW_ESUCCESS	include/libunwind.h	/^  UNW_ESUCCESS      = 0,     \/* no error *\/$/;"	e	enum:__anon3
UNW_EUNSPEC	include/libunwind.h	/^  UNW_EUNSPEC       = -6540, \/* unspecified (general) error *\/$/;"	e	enum:__anon3
UNW_EXIDX_CANTUNWIND	src/Unwind-EHABI.h	21;"	d
UNW_HEXAGON_P3_0	include/libunwind.h	/^  UNW_HEXAGON_P3_0,$/;"	e	enum:__anon14
UNW_HEXAGON_PC	include/libunwind.h	/^  UNW_HEXAGON_PC,$/;"	e	enum:__anon14
UNW_HEXAGON_R0	include/libunwind.h	/^  UNW_HEXAGON_R0,$/;"	e	enum:__anon14
UNW_HEXAGON_R1	include/libunwind.h	/^  UNW_HEXAGON_R1,$/;"	e	enum:__anon14
UNW_HEXAGON_R10	include/libunwind.h	/^  UNW_HEXAGON_R10,$/;"	e	enum:__anon14
UNW_HEXAGON_R11	include/libunwind.h	/^  UNW_HEXAGON_R11,$/;"	e	enum:__anon14
UNW_HEXAGON_R12	include/libunwind.h	/^  UNW_HEXAGON_R12,$/;"	e	enum:__anon14
UNW_HEXAGON_R13	include/libunwind.h	/^  UNW_HEXAGON_R13,$/;"	e	enum:__anon14
UNW_HEXAGON_R14	include/libunwind.h	/^  UNW_HEXAGON_R14,$/;"	e	enum:__anon14
UNW_HEXAGON_R15	include/libunwind.h	/^  UNW_HEXAGON_R15,$/;"	e	enum:__anon14
UNW_HEXAGON_R16	include/libunwind.h	/^  UNW_HEXAGON_R16,$/;"	e	enum:__anon14
UNW_HEXAGON_R17	include/libunwind.h	/^  UNW_HEXAGON_R17,$/;"	e	enum:__anon14
UNW_HEXAGON_R18	include/libunwind.h	/^  UNW_HEXAGON_R18,$/;"	e	enum:__anon14
UNW_HEXAGON_R19	include/libunwind.h	/^  UNW_HEXAGON_R19,$/;"	e	enum:__anon14
UNW_HEXAGON_R2	include/libunwind.h	/^  UNW_HEXAGON_R2,$/;"	e	enum:__anon14
UNW_HEXAGON_R20	include/libunwind.h	/^  UNW_HEXAGON_R20,$/;"	e	enum:__anon14
UNW_HEXAGON_R21	include/libunwind.h	/^  UNW_HEXAGON_R21,$/;"	e	enum:__anon14
UNW_HEXAGON_R22	include/libunwind.h	/^  UNW_HEXAGON_R22,$/;"	e	enum:__anon14
UNW_HEXAGON_R23	include/libunwind.h	/^  UNW_HEXAGON_R23,$/;"	e	enum:__anon14
UNW_HEXAGON_R24	include/libunwind.h	/^  UNW_HEXAGON_R24,$/;"	e	enum:__anon14
UNW_HEXAGON_R25	include/libunwind.h	/^  UNW_HEXAGON_R25,$/;"	e	enum:__anon14
UNW_HEXAGON_R26	include/libunwind.h	/^  UNW_HEXAGON_R26,$/;"	e	enum:__anon14
UNW_HEXAGON_R27	include/libunwind.h	/^  UNW_HEXAGON_R27,$/;"	e	enum:__anon14
UNW_HEXAGON_R28	include/libunwind.h	/^  UNW_HEXAGON_R28,$/;"	e	enum:__anon14
UNW_HEXAGON_R29	include/libunwind.h	/^  UNW_HEXAGON_R29,$/;"	e	enum:__anon14
UNW_HEXAGON_R3	include/libunwind.h	/^  UNW_HEXAGON_R3,$/;"	e	enum:__anon14
UNW_HEXAGON_R30	include/libunwind.h	/^  UNW_HEXAGON_R30,$/;"	e	enum:__anon14
UNW_HEXAGON_R31	include/libunwind.h	/^  UNW_HEXAGON_R31,$/;"	e	enum:__anon14
UNW_HEXAGON_R4	include/libunwind.h	/^  UNW_HEXAGON_R4,$/;"	e	enum:__anon14
UNW_HEXAGON_R5	include/libunwind.h	/^  UNW_HEXAGON_R5,$/;"	e	enum:__anon14
UNW_HEXAGON_R6	include/libunwind.h	/^  UNW_HEXAGON_R6,$/;"	e	enum:__anon14
UNW_HEXAGON_R7	include/libunwind.h	/^  UNW_HEXAGON_R7,$/;"	e	enum:__anon14
UNW_HEXAGON_R8	include/libunwind.h	/^  UNW_HEXAGON_R8,$/;"	e	enum:__anon14
UNW_HEXAGON_R9	include/libunwind.h	/^  UNW_HEXAGON_R9,$/;"	e	enum:__anon14
UNW_LOONGARCH_F0	include/libunwind.h	/^  UNW_LOONGARCH_F0 = 32,$/;"	e	enum:__anon18
UNW_LOONGARCH_F1	include/libunwind.h	/^  UNW_LOONGARCH_F1 = 33,$/;"	e	enum:__anon18
UNW_LOONGARCH_F10	include/libunwind.h	/^  UNW_LOONGARCH_F10 = 42,$/;"	e	enum:__anon18
UNW_LOONGARCH_F11	include/libunwind.h	/^  UNW_LOONGARCH_F11 = 43,$/;"	e	enum:__anon18
UNW_LOONGARCH_F12	include/libunwind.h	/^  UNW_LOONGARCH_F12 = 44,$/;"	e	enum:__anon18
UNW_LOONGARCH_F13	include/libunwind.h	/^  UNW_LOONGARCH_F13 = 45,$/;"	e	enum:__anon18
UNW_LOONGARCH_F14	include/libunwind.h	/^  UNW_LOONGARCH_F14 = 46,$/;"	e	enum:__anon18
UNW_LOONGARCH_F15	include/libunwind.h	/^  UNW_LOONGARCH_F15 = 47,$/;"	e	enum:__anon18
UNW_LOONGARCH_F16	include/libunwind.h	/^  UNW_LOONGARCH_F16 = 48,$/;"	e	enum:__anon18
UNW_LOONGARCH_F17	include/libunwind.h	/^  UNW_LOONGARCH_F17 = 49,$/;"	e	enum:__anon18
UNW_LOONGARCH_F18	include/libunwind.h	/^  UNW_LOONGARCH_F18 = 50,$/;"	e	enum:__anon18
UNW_LOONGARCH_F19	include/libunwind.h	/^  UNW_LOONGARCH_F19 = 51,$/;"	e	enum:__anon18
UNW_LOONGARCH_F2	include/libunwind.h	/^  UNW_LOONGARCH_F2 = 34,$/;"	e	enum:__anon18
UNW_LOONGARCH_F20	include/libunwind.h	/^  UNW_LOONGARCH_F20 = 52,$/;"	e	enum:__anon18
UNW_LOONGARCH_F21	include/libunwind.h	/^  UNW_LOONGARCH_F21 = 53,$/;"	e	enum:__anon18
UNW_LOONGARCH_F22	include/libunwind.h	/^  UNW_LOONGARCH_F22 = 54,$/;"	e	enum:__anon18
UNW_LOONGARCH_F23	include/libunwind.h	/^  UNW_LOONGARCH_F23 = 55,$/;"	e	enum:__anon18
UNW_LOONGARCH_F24	include/libunwind.h	/^  UNW_LOONGARCH_F24 = 56,$/;"	e	enum:__anon18
UNW_LOONGARCH_F25	include/libunwind.h	/^  UNW_LOONGARCH_F25 = 57,$/;"	e	enum:__anon18
UNW_LOONGARCH_F26	include/libunwind.h	/^  UNW_LOONGARCH_F26 = 58,$/;"	e	enum:__anon18
UNW_LOONGARCH_F27	include/libunwind.h	/^  UNW_LOONGARCH_F27 = 59,$/;"	e	enum:__anon18
UNW_LOONGARCH_F28	include/libunwind.h	/^  UNW_LOONGARCH_F28 = 60,$/;"	e	enum:__anon18
UNW_LOONGARCH_F29	include/libunwind.h	/^  UNW_LOONGARCH_F29 = 61,$/;"	e	enum:__anon18
UNW_LOONGARCH_F3	include/libunwind.h	/^  UNW_LOONGARCH_F3 = 35,$/;"	e	enum:__anon18
UNW_LOONGARCH_F30	include/libunwind.h	/^  UNW_LOONGARCH_F30 = 62,$/;"	e	enum:__anon18
UNW_LOONGARCH_F31	include/libunwind.h	/^  UNW_LOONGARCH_F31 = 63,$/;"	e	enum:__anon18
UNW_LOONGARCH_F4	include/libunwind.h	/^  UNW_LOONGARCH_F4 = 36,$/;"	e	enum:__anon18
UNW_LOONGARCH_F5	include/libunwind.h	/^  UNW_LOONGARCH_F5 = 37,$/;"	e	enum:__anon18
UNW_LOONGARCH_F6	include/libunwind.h	/^  UNW_LOONGARCH_F6 = 38,$/;"	e	enum:__anon18
UNW_LOONGARCH_F7	include/libunwind.h	/^  UNW_LOONGARCH_F7 = 39,$/;"	e	enum:__anon18
UNW_LOONGARCH_F8	include/libunwind.h	/^  UNW_LOONGARCH_F8 = 40,$/;"	e	enum:__anon18
UNW_LOONGARCH_F9	include/libunwind.h	/^  UNW_LOONGARCH_F9 = 41,$/;"	e	enum:__anon18
UNW_LOONGARCH_R0	include/libunwind.h	/^  UNW_LOONGARCH_R0 = 0,$/;"	e	enum:__anon18
UNW_LOONGARCH_R1	include/libunwind.h	/^  UNW_LOONGARCH_R1 = 1,$/;"	e	enum:__anon18
UNW_LOONGARCH_R10	include/libunwind.h	/^  UNW_LOONGARCH_R10 = 10,$/;"	e	enum:__anon18
UNW_LOONGARCH_R11	include/libunwind.h	/^  UNW_LOONGARCH_R11 = 11,$/;"	e	enum:__anon18
UNW_LOONGARCH_R12	include/libunwind.h	/^  UNW_LOONGARCH_R12 = 12,$/;"	e	enum:__anon18
UNW_LOONGARCH_R13	include/libunwind.h	/^  UNW_LOONGARCH_R13 = 13,$/;"	e	enum:__anon18
UNW_LOONGARCH_R14	include/libunwind.h	/^  UNW_LOONGARCH_R14 = 14,$/;"	e	enum:__anon18
UNW_LOONGARCH_R15	include/libunwind.h	/^  UNW_LOONGARCH_R15 = 15,$/;"	e	enum:__anon18
UNW_LOONGARCH_R16	include/libunwind.h	/^  UNW_LOONGARCH_R16 = 16,$/;"	e	enum:__anon18
UNW_LOONGARCH_R17	include/libunwind.h	/^  UNW_LOONGARCH_R17 = 17,$/;"	e	enum:__anon18
UNW_LOONGARCH_R18	include/libunwind.h	/^  UNW_LOONGARCH_R18 = 18,$/;"	e	enum:__anon18
UNW_LOONGARCH_R19	include/libunwind.h	/^  UNW_LOONGARCH_R19 = 19,$/;"	e	enum:__anon18
UNW_LOONGARCH_R2	include/libunwind.h	/^  UNW_LOONGARCH_R2 = 2,$/;"	e	enum:__anon18
UNW_LOONGARCH_R20	include/libunwind.h	/^  UNW_LOONGARCH_R20 = 20,$/;"	e	enum:__anon18
UNW_LOONGARCH_R21	include/libunwind.h	/^  UNW_LOONGARCH_R21 = 21,$/;"	e	enum:__anon18
UNW_LOONGARCH_R22	include/libunwind.h	/^  UNW_LOONGARCH_R22 = 22,$/;"	e	enum:__anon18
UNW_LOONGARCH_R23	include/libunwind.h	/^  UNW_LOONGARCH_R23 = 23,$/;"	e	enum:__anon18
UNW_LOONGARCH_R24	include/libunwind.h	/^  UNW_LOONGARCH_R24 = 24,$/;"	e	enum:__anon18
UNW_LOONGARCH_R25	include/libunwind.h	/^  UNW_LOONGARCH_R25 = 25,$/;"	e	enum:__anon18
UNW_LOONGARCH_R26	include/libunwind.h	/^  UNW_LOONGARCH_R26 = 26,$/;"	e	enum:__anon18
UNW_LOONGARCH_R27	include/libunwind.h	/^  UNW_LOONGARCH_R27 = 27,$/;"	e	enum:__anon18
UNW_LOONGARCH_R28	include/libunwind.h	/^  UNW_LOONGARCH_R28 = 28,$/;"	e	enum:__anon18
UNW_LOONGARCH_R29	include/libunwind.h	/^  UNW_LOONGARCH_R29 = 29,$/;"	e	enum:__anon18
UNW_LOONGARCH_R3	include/libunwind.h	/^  UNW_LOONGARCH_R3 = 3,$/;"	e	enum:__anon18
UNW_LOONGARCH_R30	include/libunwind.h	/^  UNW_LOONGARCH_R30 = 30,$/;"	e	enum:__anon18
UNW_LOONGARCH_R31	include/libunwind.h	/^  UNW_LOONGARCH_R31 = 31,$/;"	e	enum:__anon18
UNW_LOONGARCH_R4	include/libunwind.h	/^  UNW_LOONGARCH_R4 = 4,$/;"	e	enum:__anon18
UNW_LOONGARCH_R5	include/libunwind.h	/^  UNW_LOONGARCH_R5 = 5,$/;"	e	enum:__anon18
UNW_LOONGARCH_R6	include/libunwind.h	/^  UNW_LOONGARCH_R6 = 6,$/;"	e	enum:__anon18
UNW_LOONGARCH_R7	include/libunwind.h	/^  UNW_LOONGARCH_R7 = 7,$/;"	e	enum:__anon18
UNW_LOONGARCH_R8	include/libunwind.h	/^  UNW_LOONGARCH_R8 = 8,$/;"	e	enum:__anon18
UNW_LOONGARCH_R9	include/libunwind.h	/^  UNW_LOONGARCH_R9 = 9,$/;"	e	enum:__anon18
UNW_MIPS_F0	include/libunwind.h	/^  UNW_MIPS_F0  = 32,$/;"	e	enum:__anon12
UNW_MIPS_F1	include/libunwind.h	/^  UNW_MIPS_F1  = 33,$/;"	e	enum:__anon12
UNW_MIPS_F10	include/libunwind.h	/^  UNW_MIPS_F10 = 42,$/;"	e	enum:__anon12
UNW_MIPS_F11	include/libunwind.h	/^  UNW_MIPS_F11 = 43,$/;"	e	enum:__anon12
UNW_MIPS_F12	include/libunwind.h	/^  UNW_MIPS_F12 = 44,$/;"	e	enum:__anon12
UNW_MIPS_F13	include/libunwind.h	/^  UNW_MIPS_F13 = 45,$/;"	e	enum:__anon12
UNW_MIPS_F14	include/libunwind.h	/^  UNW_MIPS_F14 = 46,$/;"	e	enum:__anon12
UNW_MIPS_F15	include/libunwind.h	/^  UNW_MIPS_F15 = 47,$/;"	e	enum:__anon12
UNW_MIPS_F16	include/libunwind.h	/^  UNW_MIPS_F16 = 48,$/;"	e	enum:__anon12
UNW_MIPS_F17	include/libunwind.h	/^  UNW_MIPS_F17 = 49,$/;"	e	enum:__anon12
UNW_MIPS_F18	include/libunwind.h	/^  UNW_MIPS_F18 = 50,$/;"	e	enum:__anon12
UNW_MIPS_F19	include/libunwind.h	/^  UNW_MIPS_F19 = 51,$/;"	e	enum:__anon12
UNW_MIPS_F2	include/libunwind.h	/^  UNW_MIPS_F2  = 34,$/;"	e	enum:__anon12
UNW_MIPS_F20	include/libunwind.h	/^  UNW_MIPS_F20 = 52,$/;"	e	enum:__anon12
UNW_MIPS_F21	include/libunwind.h	/^  UNW_MIPS_F21 = 53,$/;"	e	enum:__anon12
UNW_MIPS_F22	include/libunwind.h	/^  UNW_MIPS_F22 = 54,$/;"	e	enum:__anon12
UNW_MIPS_F23	include/libunwind.h	/^  UNW_MIPS_F23 = 55,$/;"	e	enum:__anon12
UNW_MIPS_F24	include/libunwind.h	/^  UNW_MIPS_F24 = 56,$/;"	e	enum:__anon12
UNW_MIPS_F25	include/libunwind.h	/^  UNW_MIPS_F25 = 57,$/;"	e	enum:__anon12
UNW_MIPS_F26	include/libunwind.h	/^  UNW_MIPS_F26 = 58,$/;"	e	enum:__anon12
UNW_MIPS_F27	include/libunwind.h	/^  UNW_MIPS_F27 = 59,$/;"	e	enum:__anon12
UNW_MIPS_F28	include/libunwind.h	/^  UNW_MIPS_F28 = 60,$/;"	e	enum:__anon12
UNW_MIPS_F29	include/libunwind.h	/^  UNW_MIPS_F29 = 61,$/;"	e	enum:__anon12
UNW_MIPS_F3	include/libunwind.h	/^  UNW_MIPS_F3  = 35,$/;"	e	enum:__anon12
UNW_MIPS_F30	include/libunwind.h	/^  UNW_MIPS_F30 = 62,$/;"	e	enum:__anon12
UNW_MIPS_F31	include/libunwind.h	/^  UNW_MIPS_F31 = 63,$/;"	e	enum:__anon12
UNW_MIPS_F4	include/libunwind.h	/^  UNW_MIPS_F4  = 36,$/;"	e	enum:__anon12
UNW_MIPS_F5	include/libunwind.h	/^  UNW_MIPS_F5  = 37,$/;"	e	enum:__anon12
UNW_MIPS_F6	include/libunwind.h	/^  UNW_MIPS_F6  = 38,$/;"	e	enum:__anon12
UNW_MIPS_F7	include/libunwind.h	/^  UNW_MIPS_F7  = 39,$/;"	e	enum:__anon12
UNW_MIPS_F8	include/libunwind.h	/^  UNW_MIPS_F8  = 40,$/;"	e	enum:__anon12
UNW_MIPS_F9	include/libunwind.h	/^  UNW_MIPS_F9  = 41,$/;"	e	enum:__anon12
UNW_MIPS_HI	include/libunwind.h	/^  UNW_MIPS_HI = 64,$/;"	e	enum:__anon12
UNW_MIPS_LO	include/libunwind.h	/^  UNW_MIPS_LO = 65,$/;"	e	enum:__anon12
UNW_MIPS_R0	include/libunwind.h	/^  UNW_MIPS_R0  = 0,$/;"	e	enum:__anon12
UNW_MIPS_R1	include/libunwind.h	/^  UNW_MIPS_R1  = 1,$/;"	e	enum:__anon12
UNW_MIPS_R10	include/libunwind.h	/^  UNW_MIPS_R10 = 10,$/;"	e	enum:__anon12
UNW_MIPS_R11	include/libunwind.h	/^  UNW_MIPS_R11 = 11,$/;"	e	enum:__anon12
UNW_MIPS_R12	include/libunwind.h	/^  UNW_MIPS_R12 = 12,$/;"	e	enum:__anon12
UNW_MIPS_R13	include/libunwind.h	/^  UNW_MIPS_R13 = 13,$/;"	e	enum:__anon12
UNW_MIPS_R14	include/libunwind.h	/^  UNW_MIPS_R14 = 14,$/;"	e	enum:__anon12
UNW_MIPS_R15	include/libunwind.h	/^  UNW_MIPS_R15 = 15,$/;"	e	enum:__anon12
UNW_MIPS_R16	include/libunwind.h	/^  UNW_MIPS_R16 = 16,$/;"	e	enum:__anon12
UNW_MIPS_R17	include/libunwind.h	/^  UNW_MIPS_R17 = 17,$/;"	e	enum:__anon12
UNW_MIPS_R18	include/libunwind.h	/^  UNW_MIPS_R18 = 18,$/;"	e	enum:__anon12
UNW_MIPS_R19	include/libunwind.h	/^  UNW_MIPS_R19 = 19,$/;"	e	enum:__anon12
UNW_MIPS_R2	include/libunwind.h	/^  UNW_MIPS_R2  = 2,$/;"	e	enum:__anon12
UNW_MIPS_R20	include/libunwind.h	/^  UNW_MIPS_R20 = 20,$/;"	e	enum:__anon12
UNW_MIPS_R21	include/libunwind.h	/^  UNW_MIPS_R21 = 21,$/;"	e	enum:__anon12
UNW_MIPS_R22	include/libunwind.h	/^  UNW_MIPS_R22 = 22,$/;"	e	enum:__anon12
UNW_MIPS_R23	include/libunwind.h	/^  UNW_MIPS_R23 = 23,$/;"	e	enum:__anon12
UNW_MIPS_R24	include/libunwind.h	/^  UNW_MIPS_R24 = 24,$/;"	e	enum:__anon12
UNW_MIPS_R25	include/libunwind.h	/^  UNW_MIPS_R25 = 25,$/;"	e	enum:__anon12
UNW_MIPS_R26	include/libunwind.h	/^  UNW_MIPS_R26 = 26,$/;"	e	enum:__anon12
UNW_MIPS_R27	include/libunwind.h	/^  UNW_MIPS_R27 = 27,$/;"	e	enum:__anon12
UNW_MIPS_R28	include/libunwind.h	/^  UNW_MIPS_R28 = 28,$/;"	e	enum:__anon12
UNW_MIPS_R29	include/libunwind.h	/^  UNW_MIPS_R29 = 29,$/;"	e	enum:__anon12
UNW_MIPS_R3	include/libunwind.h	/^  UNW_MIPS_R3  = 3,$/;"	e	enum:__anon12
UNW_MIPS_R30	include/libunwind.h	/^  UNW_MIPS_R30 = 30,$/;"	e	enum:__anon12
UNW_MIPS_R31	include/libunwind.h	/^  UNW_MIPS_R31 = 31,$/;"	e	enum:__anon12
UNW_MIPS_R4	include/libunwind.h	/^  UNW_MIPS_R4  = 4,$/;"	e	enum:__anon12
UNW_MIPS_R5	include/libunwind.h	/^  UNW_MIPS_R5  = 5,$/;"	e	enum:__anon12
UNW_MIPS_R6	include/libunwind.h	/^  UNW_MIPS_R6  = 6,$/;"	e	enum:__anon12
UNW_MIPS_R7	include/libunwind.h	/^  UNW_MIPS_R7  = 7,$/;"	e	enum:__anon12
UNW_MIPS_R8	include/libunwind.h	/^  UNW_MIPS_R8  = 8,$/;"	e	enum:__anon12
UNW_MIPS_R9	include/libunwind.h	/^  UNW_MIPS_R9  = 9,$/;"	e	enum:__anon12
UNW_OR1K_EPCR	include/libunwind.h	/^  UNW_OR1K_EPCR = 32,$/;"	e	enum:__anon11
UNW_OR1K_R0	include/libunwind.h	/^  UNW_OR1K_R0  = 0,$/;"	e	enum:__anon11
UNW_OR1K_R1	include/libunwind.h	/^  UNW_OR1K_R1  = 1,$/;"	e	enum:__anon11
UNW_OR1K_R10	include/libunwind.h	/^  UNW_OR1K_R10 = 10,$/;"	e	enum:__anon11
UNW_OR1K_R11	include/libunwind.h	/^  UNW_OR1K_R11 = 11,$/;"	e	enum:__anon11
UNW_OR1K_R12	include/libunwind.h	/^  UNW_OR1K_R12 = 12,$/;"	e	enum:__anon11
UNW_OR1K_R13	include/libunwind.h	/^  UNW_OR1K_R13 = 13,$/;"	e	enum:__anon11
UNW_OR1K_R14	include/libunwind.h	/^  UNW_OR1K_R14 = 14,$/;"	e	enum:__anon11
UNW_OR1K_R15	include/libunwind.h	/^  UNW_OR1K_R15 = 15,$/;"	e	enum:__anon11
UNW_OR1K_R16	include/libunwind.h	/^  UNW_OR1K_R16 = 16,$/;"	e	enum:__anon11
UNW_OR1K_R17	include/libunwind.h	/^  UNW_OR1K_R17 = 17,$/;"	e	enum:__anon11
UNW_OR1K_R18	include/libunwind.h	/^  UNW_OR1K_R18 = 18,$/;"	e	enum:__anon11
UNW_OR1K_R19	include/libunwind.h	/^  UNW_OR1K_R19 = 19,$/;"	e	enum:__anon11
UNW_OR1K_R2	include/libunwind.h	/^  UNW_OR1K_R2  = 2,$/;"	e	enum:__anon11
UNW_OR1K_R20	include/libunwind.h	/^  UNW_OR1K_R20 = 20,$/;"	e	enum:__anon11
UNW_OR1K_R21	include/libunwind.h	/^  UNW_OR1K_R21 = 21,$/;"	e	enum:__anon11
UNW_OR1K_R22	include/libunwind.h	/^  UNW_OR1K_R22 = 22,$/;"	e	enum:__anon11
UNW_OR1K_R23	include/libunwind.h	/^  UNW_OR1K_R23 = 23,$/;"	e	enum:__anon11
UNW_OR1K_R24	include/libunwind.h	/^  UNW_OR1K_R24 = 24,$/;"	e	enum:__anon11
UNW_OR1K_R25	include/libunwind.h	/^  UNW_OR1K_R25 = 25,$/;"	e	enum:__anon11
UNW_OR1K_R26	include/libunwind.h	/^  UNW_OR1K_R26 = 26,$/;"	e	enum:__anon11
UNW_OR1K_R27	include/libunwind.h	/^  UNW_OR1K_R27 = 27,$/;"	e	enum:__anon11
UNW_OR1K_R28	include/libunwind.h	/^  UNW_OR1K_R28 = 28,$/;"	e	enum:__anon11
UNW_OR1K_R29	include/libunwind.h	/^  UNW_OR1K_R29 = 29,$/;"	e	enum:__anon11
UNW_OR1K_R3	include/libunwind.h	/^  UNW_OR1K_R3  = 3,$/;"	e	enum:__anon11
UNW_OR1K_R30	include/libunwind.h	/^  UNW_OR1K_R30 = 30,$/;"	e	enum:__anon11
UNW_OR1K_R31	include/libunwind.h	/^  UNW_OR1K_R31 = 31,$/;"	e	enum:__anon11
UNW_OR1K_R4	include/libunwind.h	/^  UNW_OR1K_R4  = 4,$/;"	e	enum:__anon11
UNW_OR1K_R5	include/libunwind.h	/^  UNW_OR1K_R5  = 5,$/;"	e	enum:__anon11
UNW_OR1K_R6	include/libunwind.h	/^  UNW_OR1K_R6  = 6,$/;"	e	enum:__anon11
UNW_OR1K_R7	include/libunwind.h	/^  UNW_OR1K_R7  = 7,$/;"	e	enum:__anon11
UNW_OR1K_R8	include/libunwind.h	/^  UNW_OR1K_R8  = 8,$/;"	e	enum:__anon11
UNW_OR1K_R9	include/libunwind.h	/^  UNW_OR1K_R9  = 9,$/;"	e	enum:__anon11
UNW_PPC64_CR0	include/libunwind.h	/^  UNW_PPC64_CR0     = 68,$/;"	e	enum:__anon8
UNW_PPC64_CR1	include/libunwind.h	/^  UNW_PPC64_CR1     = 69,$/;"	e	enum:__anon8
UNW_PPC64_CR2	include/libunwind.h	/^  UNW_PPC64_CR2     = 70,$/;"	e	enum:__anon8
UNW_PPC64_CR3	include/libunwind.h	/^  UNW_PPC64_CR3     = 71,$/;"	e	enum:__anon8
UNW_PPC64_CR4	include/libunwind.h	/^  UNW_PPC64_CR4     = 72,$/;"	e	enum:__anon8
UNW_PPC64_CR5	include/libunwind.h	/^  UNW_PPC64_CR5     = 73,$/;"	e	enum:__anon8
UNW_PPC64_CR6	include/libunwind.h	/^  UNW_PPC64_CR6     = 74,$/;"	e	enum:__anon8
UNW_PPC64_CR7	include/libunwind.h	/^  UNW_PPC64_CR7     = 75,$/;"	e	enum:__anon8
UNW_PPC64_CTR	include/libunwind.h	/^  UNW_PPC64_CTR     = 66,$/;"	e	enum:__anon8
UNW_PPC64_F0	include/libunwind.h	/^  UNW_PPC64_F0      = 32,$/;"	e	enum:__anon8
UNW_PPC64_F1	include/libunwind.h	/^  UNW_PPC64_F1      = 33,$/;"	e	enum:__anon8
UNW_PPC64_F10	include/libunwind.h	/^  UNW_PPC64_F10     = 42,$/;"	e	enum:__anon8
UNW_PPC64_F11	include/libunwind.h	/^  UNW_PPC64_F11     = 43,$/;"	e	enum:__anon8
UNW_PPC64_F12	include/libunwind.h	/^  UNW_PPC64_F12     = 44,$/;"	e	enum:__anon8
UNW_PPC64_F13	include/libunwind.h	/^  UNW_PPC64_F13     = 45,$/;"	e	enum:__anon8
UNW_PPC64_F14	include/libunwind.h	/^  UNW_PPC64_F14     = 46,$/;"	e	enum:__anon8
UNW_PPC64_F15	include/libunwind.h	/^  UNW_PPC64_F15     = 47,$/;"	e	enum:__anon8
UNW_PPC64_F16	include/libunwind.h	/^  UNW_PPC64_F16     = 48,$/;"	e	enum:__anon8
UNW_PPC64_F17	include/libunwind.h	/^  UNW_PPC64_F17     = 49,$/;"	e	enum:__anon8
UNW_PPC64_F18	include/libunwind.h	/^  UNW_PPC64_F18     = 50,$/;"	e	enum:__anon8
UNW_PPC64_F19	include/libunwind.h	/^  UNW_PPC64_F19     = 51,$/;"	e	enum:__anon8
UNW_PPC64_F2	include/libunwind.h	/^  UNW_PPC64_F2      = 34,$/;"	e	enum:__anon8
UNW_PPC64_F20	include/libunwind.h	/^  UNW_PPC64_F20     = 52,$/;"	e	enum:__anon8
UNW_PPC64_F21	include/libunwind.h	/^  UNW_PPC64_F21     = 53,$/;"	e	enum:__anon8
UNW_PPC64_F22	include/libunwind.h	/^  UNW_PPC64_F22     = 54,$/;"	e	enum:__anon8
UNW_PPC64_F23	include/libunwind.h	/^  UNW_PPC64_F23     = 55,$/;"	e	enum:__anon8
UNW_PPC64_F24	include/libunwind.h	/^  UNW_PPC64_F24     = 56,$/;"	e	enum:__anon8
UNW_PPC64_F25	include/libunwind.h	/^  UNW_PPC64_F25     = 57,$/;"	e	enum:__anon8
UNW_PPC64_F26	include/libunwind.h	/^  UNW_PPC64_F26     = 58,$/;"	e	enum:__anon8
UNW_PPC64_F27	include/libunwind.h	/^  UNW_PPC64_F27     = 59,$/;"	e	enum:__anon8
UNW_PPC64_F28	include/libunwind.h	/^  UNW_PPC64_F28     = 60,$/;"	e	enum:__anon8
UNW_PPC64_F29	include/libunwind.h	/^  UNW_PPC64_F29     = 61,$/;"	e	enum:__anon8
UNW_PPC64_F3	include/libunwind.h	/^  UNW_PPC64_F3      = 35,$/;"	e	enum:__anon8
UNW_PPC64_F30	include/libunwind.h	/^  UNW_PPC64_F30     = 62,$/;"	e	enum:__anon8
UNW_PPC64_F31	include/libunwind.h	/^  UNW_PPC64_F31     = 63,$/;"	e	enum:__anon8
UNW_PPC64_F4	include/libunwind.h	/^  UNW_PPC64_F4      = 36,$/;"	e	enum:__anon8
UNW_PPC64_F5	include/libunwind.h	/^  UNW_PPC64_F5      = 37,$/;"	e	enum:__anon8
UNW_PPC64_F6	include/libunwind.h	/^  UNW_PPC64_F6      = 38,$/;"	e	enum:__anon8
UNW_PPC64_F7	include/libunwind.h	/^  UNW_PPC64_F7      = 39,$/;"	e	enum:__anon8
UNW_PPC64_F8	include/libunwind.h	/^  UNW_PPC64_F8      = 40,$/;"	e	enum:__anon8
UNW_PPC64_F9	include/libunwind.h	/^  UNW_PPC64_F9      = 41,$/;"	e	enum:__anon8
UNW_PPC64_LR	include/libunwind.h	/^  UNW_PPC64_LR      = 65,$/;"	e	enum:__anon8
UNW_PPC64_R0	include/libunwind.h	/^  UNW_PPC64_R0      = 0,$/;"	e	enum:__anon8
UNW_PPC64_R1	include/libunwind.h	/^  UNW_PPC64_R1      = 1,$/;"	e	enum:__anon8
UNW_PPC64_R10	include/libunwind.h	/^  UNW_PPC64_R10     = 10,$/;"	e	enum:__anon8
UNW_PPC64_R11	include/libunwind.h	/^  UNW_PPC64_R11     = 11,$/;"	e	enum:__anon8
UNW_PPC64_R12	include/libunwind.h	/^  UNW_PPC64_R12     = 12,$/;"	e	enum:__anon8
UNW_PPC64_R13	include/libunwind.h	/^  UNW_PPC64_R13     = 13,$/;"	e	enum:__anon8
UNW_PPC64_R14	include/libunwind.h	/^  UNW_PPC64_R14     = 14,$/;"	e	enum:__anon8
UNW_PPC64_R15	include/libunwind.h	/^  UNW_PPC64_R15     = 15,$/;"	e	enum:__anon8
UNW_PPC64_R16	include/libunwind.h	/^  UNW_PPC64_R16     = 16,$/;"	e	enum:__anon8
UNW_PPC64_R17	include/libunwind.h	/^  UNW_PPC64_R17     = 17,$/;"	e	enum:__anon8
UNW_PPC64_R18	include/libunwind.h	/^  UNW_PPC64_R18     = 18,$/;"	e	enum:__anon8
UNW_PPC64_R19	include/libunwind.h	/^  UNW_PPC64_R19     = 19,$/;"	e	enum:__anon8
UNW_PPC64_R2	include/libunwind.h	/^  UNW_PPC64_R2      = 2,$/;"	e	enum:__anon8
UNW_PPC64_R20	include/libunwind.h	/^  UNW_PPC64_R20     = 20,$/;"	e	enum:__anon8
UNW_PPC64_R21	include/libunwind.h	/^  UNW_PPC64_R21     = 21,$/;"	e	enum:__anon8
UNW_PPC64_R22	include/libunwind.h	/^  UNW_PPC64_R22     = 22,$/;"	e	enum:__anon8
UNW_PPC64_R23	include/libunwind.h	/^  UNW_PPC64_R23     = 23,$/;"	e	enum:__anon8
UNW_PPC64_R24	include/libunwind.h	/^  UNW_PPC64_R24     = 24,$/;"	e	enum:__anon8
UNW_PPC64_R25	include/libunwind.h	/^  UNW_PPC64_R25     = 25,$/;"	e	enum:__anon8
UNW_PPC64_R26	include/libunwind.h	/^  UNW_PPC64_R26     = 26,$/;"	e	enum:__anon8
UNW_PPC64_R27	include/libunwind.h	/^  UNW_PPC64_R27     = 27,$/;"	e	enum:__anon8
UNW_PPC64_R28	include/libunwind.h	/^  UNW_PPC64_R28     = 28,$/;"	e	enum:__anon8
UNW_PPC64_R29	include/libunwind.h	/^  UNW_PPC64_R29     = 29,$/;"	e	enum:__anon8
UNW_PPC64_R3	include/libunwind.h	/^  UNW_PPC64_R3      = 3,$/;"	e	enum:__anon8
UNW_PPC64_R30	include/libunwind.h	/^  UNW_PPC64_R30     = 30,$/;"	e	enum:__anon8
UNW_PPC64_R31	include/libunwind.h	/^  UNW_PPC64_R31     = 31,$/;"	e	enum:__anon8
UNW_PPC64_R4	include/libunwind.h	/^  UNW_PPC64_R4      = 4,$/;"	e	enum:__anon8
UNW_PPC64_R5	include/libunwind.h	/^  UNW_PPC64_R5      = 5,$/;"	e	enum:__anon8
UNW_PPC64_R6	include/libunwind.h	/^  UNW_PPC64_R6      = 6,$/;"	e	enum:__anon8
UNW_PPC64_R7	include/libunwind.h	/^  UNW_PPC64_R7      = 7,$/;"	e	enum:__anon8
UNW_PPC64_R8	include/libunwind.h	/^  UNW_PPC64_R8      = 8,$/;"	e	enum:__anon8
UNW_PPC64_R9	include/libunwind.h	/^  UNW_PPC64_R9      = 9,$/;"	e	enum:__anon8
UNW_PPC64_TEXASR	include/libunwind.h	/^  UNW_PPC64_TEXASR  = 116,$/;"	e	enum:__anon8
UNW_PPC64_TFHAR	include/libunwind.h	/^  UNW_PPC64_TFHAR   = 114,$/;"	e	enum:__anon8
UNW_PPC64_TFIAR	include/libunwind.h	/^  UNW_PPC64_TFIAR   = 115,$/;"	e	enum:__anon8
UNW_PPC64_V0	include/libunwind.h	/^  UNW_PPC64_V0      = 77,$/;"	e	enum:__anon8
UNW_PPC64_V1	include/libunwind.h	/^  UNW_PPC64_V1      = 78,$/;"	e	enum:__anon8
UNW_PPC64_V10	include/libunwind.h	/^  UNW_PPC64_V10     = 87,$/;"	e	enum:__anon8
UNW_PPC64_V11	include/libunwind.h	/^  UNW_PPC64_V11     = 88,$/;"	e	enum:__anon8
UNW_PPC64_V12	include/libunwind.h	/^  UNW_PPC64_V12     = 89,$/;"	e	enum:__anon8
UNW_PPC64_V13	include/libunwind.h	/^  UNW_PPC64_V13     = 90,$/;"	e	enum:__anon8
UNW_PPC64_V14	include/libunwind.h	/^  UNW_PPC64_V14     = 91,$/;"	e	enum:__anon8
UNW_PPC64_V15	include/libunwind.h	/^  UNW_PPC64_V15     = 92,$/;"	e	enum:__anon8
UNW_PPC64_V16	include/libunwind.h	/^  UNW_PPC64_V16     = 93,$/;"	e	enum:__anon8
UNW_PPC64_V17	include/libunwind.h	/^  UNW_PPC64_V17     = 94,$/;"	e	enum:__anon8
UNW_PPC64_V18	include/libunwind.h	/^  UNW_PPC64_V18     = 95,$/;"	e	enum:__anon8
UNW_PPC64_V19	include/libunwind.h	/^  UNW_PPC64_V19     = 96,$/;"	e	enum:__anon8
UNW_PPC64_V2	include/libunwind.h	/^  UNW_PPC64_V2      = 79,$/;"	e	enum:__anon8
UNW_PPC64_V20	include/libunwind.h	/^  UNW_PPC64_V20     = 97,$/;"	e	enum:__anon8
UNW_PPC64_V21	include/libunwind.h	/^  UNW_PPC64_V21     = 98,$/;"	e	enum:__anon8
UNW_PPC64_V22	include/libunwind.h	/^  UNW_PPC64_V22     = 99,$/;"	e	enum:__anon8
UNW_PPC64_V23	include/libunwind.h	/^  UNW_PPC64_V23     = 100,$/;"	e	enum:__anon8
UNW_PPC64_V24	include/libunwind.h	/^  UNW_PPC64_V24     = 101,$/;"	e	enum:__anon8
UNW_PPC64_V25	include/libunwind.h	/^  UNW_PPC64_V25     = 102,$/;"	e	enum:__anon8
UNW_PPC64_V26	include/libunwind.h	/^  UNW_PPC64_V26     = 103,$/;"	e	enum:__anon8
UNW_PPC64_V27	include/libunwind.h	/^  UNW_PPC64_V27     = 104,$/;"	e	enum:__anon8
UNW_PPC64_V28	include/libunwind.h	/^  UNW_PPC64_V28     = 105,$/;"	e	enum:__anon8
UNW_PPC64_V29	include/libunwind.h	/^  UNW_PPC64_V29     = 106,$/;"	e	enum:__anon8
UNW_PPC64_V3	include/libunwind.h	/^  UNW_PPC64_V3      = 80,$/;"	e	enum:__anon8
UNW_PPC64_V30	include/libunwind.h	/^  UNW_PPC64_V30     = 107,$/;"	e	enum:__anon8
UNW_PPC64_V31	include/libunwind.h	/^  UNW_PPC64_V31     = 108,$/;"	e	enum:__anon8
UNW_PPC64_V4	include/libunwind.h	/^  UNW_PPC64_V4      = 81,$/;"	e	enum:__anon8
UNW_PPC64_V5	include/libunwind.h	/^  UNW_PPC64_V5      = 82,$/;"	e	enum:__anon8
UNW_PPC64_V6	include/libunwind.h	/^  UNW_PPC64_V6      = 83,$/;"	e	enum:__anon8
UNW_PPC64_V7	include/libunwind.h	/^  UNW_PPC64_V7      = 84,$/;"	e	enum:__anon8
UNW_PPC64_V8	include/libunwind.h	/^  UNW_PPC64_V8      = 85,$/;"	e	enum:__anon8
UNW_PPC64_V9	include/libunwind.h	/^  UNW_PPC64_V9      = 86,$/;"	e	enum:__anon8
UNW_PPC64_VRSAVE	include/libunwind.h	/^  UNW_PPC64_VRSAVE  = 109,$/;"	e	enum:__anon8
UNW_PPC64_VS0	include/libunwind.h	/^  UNW_PPC64_VS0     = UNW_PPC64_F0,$/;"	e	enum:__anon8
UNW_PPC64_VS1	include/libunwind.h	/^  UNW_PPC64_VS1     = UNW_PPC64_F1,$/;"	e	enum:__anon8
UNW_PPC64_VS10	include/libunwind.h	/^  UNW_PPC64_VS10    = UNW_PPC64_F10,$/;"	e	enum:__anon8
UNW_PPC64_VS11	include/libunwind.h	/^  UNW_PPC64_VS11    = UNW_PPC64_F11,$/;"	e	enum:__anon8
UNW_PPC64_VS12	include/libunwind.h	/^  UNW_PPC64_VS12    = UNW_PPC64_F12,$/;"	e	enum:__anon8
UNW_PPC64_VS13	include/libunwind.h	/^  UNW_PPC64_VS13    = UNW_PPC64_F13,$/;"	e	enum:__anon8
UNW_PPC64_VS14	include/libunwind.h	/^  UNW_PPC64_VS14    = UNW_PPC64_F14,$/;"	e	enum:__anon8
UNW_PPC64_VS15	include/libunwind.h	/^  UNW_PPC64_VS15    = UNW_PPC64_F15,$/;"	e	enum:__anon8
UNW_PPC64_VS16	include/libunwind.h	/^  UNW_PPC64_VS16    = UNW_PPC64_F16,$/;"	e	enum:__anon8
UNW_PPC64_VS17	include/libunwind.h	/^  UNW_PPC64_VS17    = UNW_PPC64_F17,$/;"	e	enum:__anon8
UNW_PPC64_VS18	include/libunwind.h	/^  UNW_PPC64_VS18    = UNW_PPC64_F18,$/;"	e	enum:__anon8
UNW_PPC64_VS19	include/libunwind.h	/^  UNW_PPC64_VS19    = UNW_PPC64_F19,$/;"	e	enum:__anon8
UNW_PPC64_VS2	include/libunwind.h	/^  UNW_PPC64_VS2     = UNW_PPC64_F2,$/;"	e	enum:__anon8
UNW_PPC64_VS20	include/libunwind.h	/^  UNW_PPC64_VS20    = UNW_PPC64_F20,$/;"	e	enum:__anon8
UNW_PPC64_VS21	include/libunwind.h	/^  UNW_PPC64_VS21    = UNW_PPC64_F21,$/;"	e	enum:__anon8
UNW_PPC64_VS22	include/libunwind.h	/^  UNW_PPC64_VS22    = UNW_PPC64_F22,$/;"	e	enum:__anon8
UNW_PPC64_VS23	include/libunwind.h	/^  UNW_PPC64_VS23    = UNW_PPC64_F23,$/;"	e	enum:__anon8
UNW_PPC64_VS24	include/libunwind.h	/^  UNW_PPC64_VS24    = UNW_PPC64_F24,$/;"	e	enum:__anon8
UNW_PPC64_VS25	include/libunwind.h	/^  UNW_PPC64_VS25    = UNW_PPC64_F25,$/;"	e	enum:__anon8
UNW_PPC64_VS26	include/libunwind.h	/^  UNW_PPC64_VS26    = UNW_PPC64_F26,$/;"	e	enum:__anon8
UNW_PPC64_VS27	include/libunwind.h	/^  UNW_PPC64_VS27    = UNW_PPC64_F27,$/;"	e	enum:__anon8
UNW_PPC64_VS28	include/libunwind.h	/^  UNW_PPC64_VS28    = UNW_PPC64_F28,$/;"	e	enum:__anon8
UNW_PPC64_VS29	include/libunwind.h	/^  UNW_PPC64_VS29    = UNW_PPC64_F29,$/;"	e	enum:__anon8
UNW_PPC64_VS3	include/libunwind.h	/^  UNW_PPC64_VS3     = UNW_PPC64_F3,$/;"	e	enum:__anon8
UNW_PPC64_VS30	include/libunwind.h	/^  UNW_PPC64_VS30    = UNW_PPC64_F30,$/;"	e	enum:__anon8
UNW_PPC64_VS31	include/libunwind.h	/^  UNW_PPC64_VS31    = UNW_PPC64_F31,$/;"	e	enum:__anon8
UNW_PPC64_VS32	include/libunwind.h	/^  UNW_PPC64_VS32    = UNW_PPC64_V0,$/;"	e	enum:__anon8
UNW_PPC64_VS33	include/libunwind.h	/^  UNW_PPC64_VS33    = UNW_PPC64_V1,$/;"	e	enum:__anon8
UNW_PPC64_VS34	include/libunwind.h	/^  UNW_PPC64_VS34    = UNW_PPC64_V2,$/;"	e	enum:__anon8
UNW_PPC64_VS35	include/libunwind.h	/^  UNW_PPC64_VS35    = UNW_PPC64_V3,$/;"	e	enum:__anon8
UNW_PPC64_VS36	include/libunwind.h	/^  UNW_PPC64_VS36    = UNW_PPC64_V4,$/;"	e	enum:__anon8
UNW_PPC64_VS37	include/libunwind.h	/^  UNW_PPC64_VS37    = UNW_PPC64_V5,$/;"	e	enum:__anon8
UNW_PPC64_VS38	include/libunwind.h	/^  UNW_PPC64_VS38    = UNW_PPC64_V6,$/;"	e	enum:__anon8
UNW_PPC64_VS39	include/libunwind.h	/^  UNW_PPC64_VS39    = UNW_PPC64_V7,$/;"	e	enum:__anon8
UNW_PPC64_VS4	include/libunwind.h	/^  UNW_PPC64_VS4     = UNW_PPC64_F4,$/;"	e	enum:__anon8
UNW_PPC64_VS40	include/libunwind.h	/^  UNW_PPC64_VS40    = UNW_PPC64_V8,$/;"	e	enum:__anon8
UNW_PPC64_VS41	include/libunwind.h	/^  UNW_PPC64_VS41    = UNW_PPC64_V9,$/;"	e	enum:__anon8
UNW_PPC64_VS42	include/libunwind.h	/^  UNW_PPC64_VS42    = UNW_PPC64_V10,$/;"	e	enum:__anon8
UNW_PPC64_VS43	include/libunwind.h	/^  UNW_PPC64_VS43    = UNW_PPC64_V11,$/;"	e	enum:__anon8
UNW_PPC64_VS44	include/libunwind.h	/^  UNW_PPC64_VS44    = UNW_PPC64_V12,$/;"	e	enum:__anon8
UNW_PPC64_VS45	include/libunwind.h	/^  UNW_PPC64_VS45    = UNW_PPC64_V13,$/;"	e	enum:__anon8
UNW_PPC64_VS46	include/libunwind.h	/^  UNW_PPC64_VS46    = UNW_PPC64_V14,$/;"	e	enum:__anon8
UNW_PPC64_VS47	include/libunwind.h	/^  UNW_PPC64_VS47    = UNW_PPC64_V15,$/;"	e	enum:__anon8
UNW_PPC64_VS48	include/libunwind.h	/^  UNW_PPC64_VS48    = UNW_PPC64_V16,$/;"	e	enum:__anon8
UNW_PPC64_VS49	include/libunwind.h	/^  UNW_PPC64_VS49    = UNW_PPC64_V17,$/;"	e	enum:__anon8
UNW_PPC64_VS5	include/libunwind.h	/^  UNW_PPC64_VS5     = UNW_PPC64_F5,$/;"	e	enum:__anon8
UNW_PPC64_VS50	include/libunwind.h	/^  UNW_PPC64_VS50    = UNW_PPC64_V18,$/;"	e	enum:__anon8
UNW_PPC64_VS51	include/libunwind.h	/^  UNW_PPC64_VS51    = UNW_PPC64_V19,$/;"	e	enum:__anon8
UNW_PPC64_VS52	include/libunwind.h	/^  UNW_PPC64_VS52    = UNW_PPC64_V20,$/;"	e	enum:__anon8
UNW_PPC64_VS53	include/libunwind.h	/^  UNW_PPC64_VS53    = UNW_PPC64_V21,$/;"	e	enum:__anon8
UNW_PPC64_VS54	include/libunwind.h	/^  UNW_PPC64_VS54    = UNW_PPC64_V22,$/;"	e	enum:__anon8
UNW_PPC64_VS55	include/libunwind.h	/^  UNW_PPC64_VS55    = UNW_PPC64_V23,$/;"	e	enum:__anon8
UNW_PPC64_VS56	include/libunwind.h	/^  UNW_PPC64_VS56    = UNW_PPC64_V24,$/;"	e	enum:__anon8
UNW_PPC64_VS57	include/libunwind.h	/^  UNW_PPC64_VS57    = UNW_PPC64_V25,$/;"	e	enum:__anon8
UNW_PPC64_VS58	include/libunwind.h	/^  UNW_PPC64_VS58    = UNW_PPC64_V26,$/;"	e	enum:__anon8
UNW_PPC64_VS59	include/libunwind.h	/^  UNW_PPC64_VS59    = UNW_PPC64_V27,$/;"	e	enum:__anon8
UNW_PPC64_VS6	include/libunwind.h	/^  UNW_PPC64_VS6     = UNW_PPC64_F6,$/;"	e	enum:__anon8
UNW_PPC64_VS60	include/libunwind.h	/^  UNW_PPC64_VS60    = UNW_PPC64_V28,$/;"	e	enum:__anon8
UNW_PPC64_VS61	include/libunwind.h	/^  UNW_PPC64_VS61    = UNW_PPC64_V29,$/;"	e	enum:__anon8
UNW_PPC64_VS62	include/libunwind.h	/^  UNW_PPC64_VS62    = UNW_PPC64_V30,$/;"	e	enum:__anon8
UNW_PPC64_VS63	include/libunwind.h	/^  UNW_PPC64_VS63    = UNW_PPC64_V31$/;"	e	enum:__anon8
UNW_PPC64_VS7	include/libunwind.h	/^  UNW_PPC64_VS7     = UNW_PPC64_F7,$/;"	e	enum:__anon8
UNW_PPC64_VS8	include/libunwind.h	/^  UNW_PPC64_VS8     = UNW_PPC64_F8,$/;"	e	enum:__anon8
UNW_PPC64_VS9	include/libunwind.h	/^  UNW_PPC64_VS9     = UNW_PPC64_F9,$/;"	e	enum:__anon8
UNW_PPC64_VSCR	include/libunwind.h	/^  UNW_PPC64_VSCR    = 110,$/;"	e	enum:__anon8
UNW_PPC64_XER	include/libunwind.h	/^  UNW_PPC64_XER     = 76,$/;"	e	enum:__anon8
UNW_PPC_AP	include/libunwind.h	/^  UNW_PPC_AP  = 67,$/;"	e	enum:__anon7
UNW_PPC_CR0	include/libunwind.h	/^  UNW_PPC_CR0 = 68,$/;"	e	enum:__anon7
UNW_PPC_CR1	include/libunwind.h	/^  UNW_PPC_CR1 = 69,$/;"	e	enum:__anon7
UNW_PPC_CR2	include/libunwind.h	/^  UNW_PPC_CR2 = 70,$/;"	e	enum:__anon7
UNW_PPC_CR3	include/libunwind.h	/^  UNW_PPC_CR3 = 71,$/;"	e	enum:__anon7
UNW_PPC_CR4	include/libunwind.h	/^  UNW_PPC_CR4 = 72,$/;"	e	enum:__anon7
UNW_PPC_CR5	include/libunwind.h	/^  UNW_PPC_CR5 = 73,$/;"	e	enum:__anon7
UNW_PPC_CR6	include/libunwind.h	/^  UNW_PPC_CR6 = 74,$/;"	e	enum:__anon7
UNW_PPC_CR7	include/libunwind.h	/^  UNW_PPC_CR7 = 75,$/;"	e	enum:__anon7
UNW_PPC_CTR	include/libunwind.h	/^  UNW_PPC_CTR = 66,$/;"	e	enum:__anon7
UNW_PPC_F0	include/libunwind.h	/^  UNW_PPC_F0  = 32,$/;"	e	enum:__anon7
UNW_PPC_F1	include/libunwind.h	/^  UNW_PPC_F1  = 33,$/;"	e	enum:__anon7
UNW_PPC_F10	include/libunwind.h	/^  UNW_PPC_F10 = 42,$/;"	e	enum:__anon7
UNW_PPC_F11	include/libunwind.h	/^  UNW_PPC_F11 = 43,$/;"	e	enum:__anon7
UNW_PPC_F12	include/libunwind.h	/^  UNW_PPC_F12 = 44,$/;"	e	enum:__anon7
UNW_PPC_F13	include/libunwind.h	/^  UNW_PPC_F13 = 45,$/;"	e	enum:__anon7
UNW_PPC_F14	include/libunwind.h	/^  UNW_PPC_F14 = 46,$/;"	e	enum:__anon7
UNW_PPC_F15	include/libunwind.h	/^  UNW_PPC_F15 = 47,$/;"	e	enum:__anon7
UNW_PPC_F16	include/libunwind.h	/^  UNW_PPC_F16 = 48,$/;"	e	enum:__anon7
UNW_PPC_F17	include/libunwind.h	/^  UNW_PPC_F17 = 49,$/;"	e	enum:__anon7
UNW_PPC_F18	include/libunwind.h	/^  UNW_PPC_F18 = 50,$/;"	e	enum:__anon7
UNW_PPC_F19	include/libunwind.h	/^  UNW_PPC_F19 = 51,$/;"	e	enum:__anon7
UNW_PPC_F2	include/libunwind.h	/^  UNW_PPC_F2  = 34,$/;"	e	enum:__anon7
UNW_PPC_F20	include/libunwind.h	/^  UNW_PPC_F20 = 52,$/;"	e	enum:__anon7
UNW_PPC_F21	include/libunwind.h	/^  UNW_PPC_F21 = 53,$/;"	e	enum:__anon7
UNW_PPC_F22	include/libunwind.h	/^  UNW_PPC_F22 = 54,$/;"	e	enum:__anon7
UNW_PPC_F23	include/libunwind.h	/^  UNW_PPC_F23 = 55,$/;"	e	enum:__anon7
UNW_PPC_F24	include/libunwind.h	/^  UNW_PPC_F24 = 56,$/;"	e	enum:__anon7
UNW_PPC_F25	include/libunwind.h	/^  UNW_PPC_F25 = 57,$/;"	e	enum:__anon7
UNW_PPC_F26	include/libunwind.h	/^  UNW_PPC_F26 = 58,$/;"	e	enum:__anon7
UNW_PPC_F27	include/libunwind.h	/^  UNW_PPC_F27 = 59,$/;"	e	enum:__anon7
UNW_PPC_F28	include/libunwind.h	/^  UNW_PPC_F28 = 60,$/;"	e	enum:__anon7
UNW_PPC_F29	include/libunwind.h	/^  UNW_PPC_F29 = 61,$/;"	e	enum:__anon7
UNW_PPC_F3	include/libunwind.h	/^  UNW_PPC_F3  = 35,$/;"	e	enum:__anon7
UNW_PPC_F30	include/libunwind.h	/^  UNW_PPC_F30 = 62,$/;"	e	enum:__anon7
UNW_PPC_F31	include/libunwind.h	/^  UNW_PPC_F31 = 63,$/;"	e	enum:__anon7
UNW_PPC_F4	include/libunwind.h	/^  UNW_PPC_F4  = 36,$/;"	e	enum:__anon7
UNW_PPC_F5	include/libunwind.h	/^  UNW_PPC_F5  = 37,$/;"	e	enum:__anon7
UNW_PPC_F6	include/libunwind.h	/^  UNW_PPC_F6  = 38,$/;"	e	enum:__anon7
UNW_PPC_F7	include/libunwind.h	/^  UNW_PPC_F7  = 39,$/;"	e	enum:__anon7
UNW_PPC_F8	include/libunwind.h	/^  UNW_PPC_F8  = 40,$/;"	e	enum:__anon7
UNW_PPC_F9	include/libunwind.h	/^  UNW_PPC_F9  = 41,$/;"	e	enum:__anon7
UNW_PPC_LR	include/libunwind.h	/^  UNW_PPC_LR  = 65,$/;"	e	enum:__anon7
UNW_PPC_MQ	include/libunwind.h	/^  UNW_PPC_MQ  = 64,$/;"	e	enum:__anon7
UNW_PPC_R0	include/libunwind.h	/^  UNW_PPC_R0  = 0,$/;"	e	enum:__anon7
UNW_PPC_R1	include/libunwind.h	/^  UNW_PPC_R1  = 1,$/;"	e	enum:__anon7
UNW_PPC_R10	include/libunwind.h	/^  UNW_PPC_R10 = 10,$/;"	e	enum:__anon7
UNW_PPC_R11	include/libunwind.h	/^  UNW_PPC_R11 = 11,$/;"	e	enum:__anon7
UNW_PPC_R12	include/libunwind.h	/^  UNW_PPC_R12 = 12,$/;"	e	enum:__anon7
UNW_PPC_R13	include/libunwind.h	/^  UNW_PPC_R13 = 13,$/;"	e	enum:__anon7
UNW_PPC_R14	include/libunwind.h	/^  UNW_PPC_R14 = 14,$/;"	e	enum:__anon7
UNW_PPC_R15	include/libunwind.h	/^  UNW_PPC_R15 = 15,$/;"	e	enum:__anon7
UNW_PPC_R16	include/libunwind.h	/^  UNW_PPC_R16 = 16,$/;"	e	enum:__anon7
UNW_PPC_R17	include/libunwind.h	/^  UNW_PPC_R17 = 17,$/;"	e	enum:__anon7
UNW_PPC_R18	include/libunwind.h	/^  UNW_PPC_R18 = 18,$/;"	e	enum:__anon7
UNW_PPC_R19	include/libunwind.h	/^  UNW_PPC_R19 = 19,$/;"	e	enum:__anon7
UNW_PPC_R2	include/libunwind.h	/^  UNW_PPC_R2  = 2,$/;"	e	enum:__anon7
UNW_PPC_R20	include/libunwind.h	/^  UNW_PPC_R20 = 20,$/;"	e	enum:__anon7
UNW_PPC_R21	include/libunwind.h	/^  UNW_PPC_R21 = 21,$/;"	e	enum:__anon7
UNW_PPC_R22	include/libunwind.h	/^  UNW_PPC_R22 = 22,$/;"	e	enum:__anon7
UNW_PPC_R23	include/libunwind.h	/^  UNW_PPC_R23 = 23,$/;"	e	enum:__anon7
UNW_PPC_R24	include/libunwind.h	/^  UNW_PPC_R24 = 24,$/;"	e	enum:__anon7
UNW_PPC_R25	include/libunwind.h	/^  UNW_PPC_R25 = 25,$/;"	e	enum:__anon7
UNW_PPC_R26	include/libunwind.h	/^  UNW_PPC_R26 = 26,$/;"	e	enum:__anon7
UNW_PPC_R27	include/libunwind.h	/^  UNW_PPC_R27 = 27,$/;"	e	enum:__anon7
UNW_PPC_R28	include/libunwind.h	/^  UNW_PPC_R28 = 28,$/;"	e	enum:__anon7
UNW_PPC_R29	include/libunwind.h	/^  UNW_PPC_R29 = 29,$/;"	e	enum:__anon7
UNW_PPC_R3	include/libunwind.h	/^  UNW_PPC_R3  = 3,$/;"	e	enum:__anon7
UNW_PPC_R30	include/libunwind.h	/^  UNW_PPC_R30 = 30,$/;"	e	enum:__anon7
UNW_PPC_R31	include/libunwind.h	/^  UNW_PPC_R31 = 31,$/;"	e	enum:__anon7
UNW_PPC_R4	include/libunwind.h	/^  UNW_PPC_R4  = 4,$/;"	e	enum:__anon7
UNW_PPC_R5	include/libunwind.h	/^  UNW_PPC_R5  = 5,$/;"	e	enum:__anon7
UNW_PPC_R6	include/libunwind.h	/^  UNW_PPC_R6  = 6,$/;"	e	enum:__anon7
UNW_PPC_R7	include/libunwind.h	/^  UNW_PPC_R7  = 7,$/;"	e	enum:__anon7
UNW_PPC_R8	include/libunwind.h	/^  UNW_PPC_R8  = 8,$/;"	e	enum:__anon7
UNW_PPC_R9	include/libunwind.h	/^  UNW_PPC_R9  = 9,$/;"	e	enum:__anon7
UNW_PPC_SPEFSCR	include/libunwind.h	/^  UNW_PPC_SPEFSCR = 112$/;"	e	enum:__anon7
UNW_PPC_SPE_ACC	include/libunwind.h	/^  UNW_PPC_SPE_ACC = 111,$/;"	e	enum:__anon7
UNW_PPC_V0	include/libunwind.h	/^  UNW_PPC_V0  = 77,$/;"	e	enum:__anon7
UNW_PPC_V1	include/libunwind.h	/^  UNW_PPC_V1  = 78,$/;"	e	enum:__anon7
UNW_PPC_V10	include/libunwind.h	/^  UNW_PPC_V10 = 87,$/;"	e	enum:__anon7
UNW_PPC_V11	include/libunwind.h	/^  UNW_PPC_V11 = 88,$/;"	e	enum:__anon7
UNW_PPC_V12	include/libunwind.h	/^  UNW_PPC_V12 = 89,$/;"	e	enum:__anon7
UNW_PPC_V13	include/libunwind.h	/^  UNW_PPC_V13 = 90,$/;"	e	enum:__anon7
UNW_PPC_V14	include/libunwind.h	/^  UNW_PPC_V14 = 91,$/;"	e	enum:__anon7
UNW_PPC_V15	include/libunwind.h	/^  UNW_PPC_V15 = 92,$/;"	e	enum:__anon7
UNW_PPC_V16	include/libunwind.h	/^  UNW_PPC_V16 = 93,$/;"	e	enum:__anon7
UNW_PPC_V17	include/libunwind.h	/^  UNW_PPC_V17 = 94,$/;"	e	enum:__anon7
UNW_PPC_V18	include/libunwind.h	/^  UNW_PPC_V18 = 95,$/;"	e	enum:__anon7
UNW_PPC_V19	include/libunwind.h	/^  UNW_PPC_V19 = 96,$/;"	e	enum:__anon7
UNW_PPC_V2	include/libunwind.h	/^  UNW_PPC_V2  = 79,$/;"	e	enum:__anon7
UNW_PPC_V20	include/libunwind.h	/^  UNW_PPC_V20 = 97,$/;"	e	enum:__anon7
UNW_PPC_V21	include/libunwind.h	/^  UNW_PPC_V21 = 98,$/;"	e	enum:__anon7
UNW_PPC_V22	include/libunwind.h	/^  UNW_PPC_V22 = 99,$/;"	e	enum:__anon7
UNW_PPC_V23	include/libunwind.h	/^  UNW_PPC_V23 = 100,$/;"	e	enum:__anon7
UNW_PPC_V24	include/libunwind.h	/^  UNW_PPC_V24 = 101,$/;"	e	enum:__anon7
UNW_PPC_V25	include/libunwind.h	/^  UNW_PPC_V25 = 102,$/;"	e	enum:__anon7
UNW_PPC_V26	include/libunwind.h	/^  UNW_PPC_V26 = 103,$/;"	e	enum:__anon7
UNW_PPC_V27	include/libunwind.h	/^  UNW_PPC_V27 = 104,$/;"	e	enum:__anon7
UNW_PPC_V28	include/libunwind.h	/^  UNW_PPC_V28 = 105,$/;"	e	enum:__anon7
UNW_PPC_V29	include/libunwind.h	/^  UNW_PPC_V29 = 106,$/;"	e	enum:__anon7
UNW_PPC_V3	include/libunwind.h	/^  UNW_PPC_V3  = 80,$/;"	e	enum:__anon7
UNW_PPC_V30	include/libunwind.h	/^  UNW_PPC_V30 = 107,$/;"	e	enum:__anon7
UNW_PPC_V31	include/libunwind.h	/^  UNW_PPC_V31 = 108,$/;"	e	enum:__anon7
UNW_PPC_V4	include/libunwind.h	/^  UNW_PPC_V4  = 81,$/;"	e	enum:__anon7
UNW_PPC_V5	include/libunwind.h	/^  UNW_PPC_V5  = 82,$/;"	e	enum:__anon7
UNW_PPC_V6	include/libunwind.h	/^  UNW_PPC_V6  = 83,$/;"	e	enum:__anon7
UNW_PPC_V7	include/libunwind.h	/^  UNW_PPC_V7  = 84,$/;"	e	enum:__anon7
UNW_PPC_V8	include/libunwind.h	/^  UNW_PPC_V8  = 85,$/;"	e	enum:__anon7
UNW_PPC_V9	include/libunwind.h	/^  UNW_PPC_V9  = 86,$/;"	e	enum:__anon7
UNW_PPC_VRSAVE	include/libunwind.h	/^  UNW_PPC_VRSAVE  = 109,$/;"	e	enum:__anon7
UNW_PPC_VSCR	include/libunwind.h	/^  UNW_PPC_VSCR    = 110,$/;"	e	enum:__anon7
UNW_PPC_XER	include/libunwind.h	/^  UNW_PPC_XER = 76,$/;"	e	enum:__anon7
UNW_REG_IP	include/libunwind.h	/^  UNW_REG_IP = -1, \/\/ instruction pointer$/;"	e	enum:__anon4
UNW_REG_SP	include/libunwind.h	/^  UNW_REG_SP = -2, \/\/ stack pointer$/;"	e	enum:__anon4
UNW_RISCV_F0	include/libunwind.h	/^  UNW_RISCV_F0  = 32,$/;"	e	enum:__anon15
UNW_RISCV_F1	include/libunwind.h	/^  UNW_RISCV_F1  = 33,$/;"	e	enum:__anon15
UNW_RISCV_F10	include/libunwind.h	/^  UNW_RISCV_F10 = 42,$/;"	e	enum:__anon15
UNW_RISCV_F11	include/libunwind.h	/^  UNW_RISCV_F11 = 43,$/;"	e	enum:__anon15
UNW_RISCV_F12	include/libunwind.h	/^  UNW_RISCV_F12 = 44,$/;"	e	enum:__anon15
UNW_RISCV_F13	include/libunwind.h	/^  UNW_RISCV_F13 = 45,$/;"	e	enum:__anon15
UNW_RISCV_F14	include/libunwind.h	/^  UNW_RISCV_F14 = 46,$/;"	e	enum:__anon15
UNW_RISCV_F15	include/libunwind.h	/^  UNW_RISCV_F15 = 47,$/;"	e	enum:__anon15
UNW_RISCV_F16	include/libunwind.h	/^  UNW_RISCV_F16 = 48,$/;"	e	enum:__anon15
UNW_RISCV_F17	include/libunwind.h	/^  UNW_RISCV_F17 = 49,$/;"	e	enum:__anon15
UNW_RISCV_F18	include/libunwind.h	/^  UNW_RISCV_F18 = 50,$/;"	e	enum:__anon15
UNW_RISCV_F19	include/libunwind.h	/^  UNW_RISCV_F19 = 51,$/;"	e	enum:__anon15
UNW_RISCV_F2	include/libunwind.h	/^  UNW_RISCV_F2  = 34,$/;"	e	enum:__anon15
UNW_RISCV_F20	include/libunwind.h	/^  UNW_RISCV_F20 = 52,$/;"	e	enum:__anon15
UNW_RISCV_F21	include/libunwind.h	/^  UNW_RISCV_F21 = 53,$/;"	e	enum:__anon15
UNW_RISCV_F22	include/libunwind.h	/^  UNW_RISCV_F22 = 54,$/;"	e	enum:__anon15
UNW_RISCV_F23	include/libunwind.h	/^  UNW_RISCV_F23 = 55,$/;"	e	enum:__anon15
UNW_RISCV_F24	include/libunwind.h	/^  UNW_RISCV_F24 = 56,$/;"	e	enum:__anon15
UNW_RISCV_F25	include/libunwind.h	/^  UNW_RISCV_F25 = 57,$/;"	e	enum:__anon15
UNW_RISCV_F26	include/libunwind.h	/^  UNW_RISCV_F26 = 58,$/;"	e	enum:__anon15
UNW_RISCV_F27	include/libunwind.h	/^  UNW_RISCV_F27 = 59,$/;"	e	enum:__anon15
UNW_RISCV_F28	include/libunwind.h	/^  UNW_RISCV_F28 = 60,$/;"	e	enum:__anon15
UNW_RISCV_F29	include/libunwind.h	/^  UNW_RISCV_F29 = 61,$/;"	e	enum:__anon15
UNW_RISCV_F3	include/libunwind.h	/^  UNW_RISCV_F3  = 35,$/;"	e	enum:__anon15
UNW_RISCV_F30	include/libunwind.h	/^  UNW_RISCV_F30 = 62,$/;"	e	enum:__anon15
UNW_RISCV_F31	include/libunwind.h	/^  UNW_RISCV_F31 = 63,$/;"	e	enum:__anon15
UNW_RISCV_F4	include/libunwind.h	/^  UNW_RISCV_F4  = 36,$/;"	e	enum:__anon15
UNW_RISCV_F5	include/libunwind.h	/^  UNW_RISCV_F5  = 37,$/;"	e	enum:__anon15
UNW_RISCV_F6	include/libunwind.h	/^  UNW_RISCV_F6  = 38,$/;"	e	enum:__anon15
UNW_RISCV_F7	include/libunwind.h	/^  UNW_RISCV_F7  = 39,$/;"	e	enum:__anon15
UNW_RISCV_F8	include/libunwind.h	/^  UNW_RISCV_F8  = 40,$/;"	e	enum:__anon15
UNW_RISCV_F9	include/libunwind.h	/^  UNW_RISCV_F9  = 41,$/;"	e	enum:__anon15
UNW_RISCV_X0	include/libunwind.h	/^  UNW_RISCV_X0  = 0,$/;"	e	enum:__anon15
UNW_RISCV_X1	include/libunwind.h	/^  UNW_RISCV_X1  = 1,$/;"	e	enum:__anon15
UNW_RISCV_X10	include/libunwind.h	/^  UNW_RISCV_X10 = 10,$/;"	e	enum:__anon15
UNW_RISCV_X11	include/libunwind.h	/^  UNW_RISCV_X11 = 11,$/;"	e	enum:__anon15
UNW_RISCV_X12	include/libunwind.h	/^  UNW_RISCV_X12 = 12,$/;"	e	enum:__anon15
UNW_RISCV_X13	include/libunwind.h	/^  UNW_RISCV_X13 = 13,$/;"	e	enum:__anon15
UNW_RISCV_X14	include/libunwind.h	/^  UNW_RISCV_X14 = 14,$/;"	e	enum:__anon15
UNW_RISCV_X15	include/libunwind.h	/^  UNW_RISCV_X15 = 15,$/;"	e	enum:__anon15
UNW_RISCV_X16	include/libunwind.h	/^  UNW_RISCV_X16 = 16,$/;"	e	enum:__anon15
UNW_RISCV_X17	include/libunwind.h	/^  UNW_RISCV_X17 = 17,$/;"	e	enum:__anon15
UNW_RISCV_X18	include/libunwind.h	/^  UNW_RISCV_X18 = 18,$/;"	e	enum:__anon15
UNW_RISCV_X19	include/libunwind.h	/^  UNW_RISCV_X19 = 19,$/;"	e	enum:__anon15
UNW_RISCV_X2	include/libunwind.h	/^  UNW_RISCV_X2  = 2,$/;"	e	enum:__anon15
UNW_RISCV_X20	include/libunwind.h	/^  UNW_RISCV_X20 = 20,$/;"	e	enum:__anon15
UNW_RISCV_X21	include/libunwind.h	/^  UNW_RISCV_X21 = 21,$/;"	e	enum:__anon15
UNW_RISCV_X22	include/libunwind.h	/^  UNW_RISCV_X22 = 22,$/;"	e	enum:__anon15
UNW_RISCV_X23	include/libunwind.h	/^  UNW_RISCV_X23 = 23,$/;"	e	enum:__anon15
UNW_RISCV_X24	include/libunwind.h	/^  UNW_RISCV_X24 = 24,$/;"	e	enum:__anon15
UNW_RISCV_X25	include/libunwind.h	/^  UNW_RISCV_X25 = 25,$/;"	e	enum:__anon15
UNW_RISCV_X26	include/libunwind.h	/^  UNW_RISCV_X26 = 26,$/;"	e	enum:__anon15
UNW_RISCV_X27	include/libunwind.h	/^  UNW_RISCV_X27 = 27,$/;"	e	enum:__anon15
UNW_RISCV_X28	include/libunwind.h	/^  UNW_RISCV_X28 = 28,$/;"	e	enum:__anon15
UNW_RISCV_X29	include/libunwind.h	/^  UNW_RISCV_X29 = 29,$/;"	e	enum:__anon15
UNW_RISCV_X3	include/libunwind.h	/^  UNW_RISCV_X3  = 3,$/;"	e	enum:__anon15
UNW_RISCV_X30	include/libunwind.h	/^  UNW_RISCV_X30 = 30,$/;"	e	enum:__anon15
UNW_RISCV_X31	include/libunwind.h	/^  UNW_RISCV_X31 = 31,$/;"	e	enum:__anon15
UNW_RISCV_X4	include/libunwind.h	/^  UNW_RISCV_X4  = 4,$/;"	e	enum:__anon15
UNW_RISCV_X5	include/libunwind.h	/^  UNW_RISCV_X5  = 5,$/;"	e	enum:__anon15
UNW_RISCV_X6	include/libunwind.h	/^  UNW_RISCV_X6  = 6,$/;"	e	enum:__anon15
UNW_RISCV_X7	include/libunwind.h	/^  UNW_RISCV_X7  = 7,$/;"	e	enum:__anon15
UNW_RISCV_X8	include/libunwind.h	/^  UNW_RISCV_X8  = 8,$/;"	e	enum:__anon15
UNW_RISCV_X9	include/libunwind.h	/^  UNW_RISCV_X9  = 9,$/;"	e	enum:__anon15
UNW_S390X_F0	include/libunwind.h	/^  UNW_S390X_F0      = 16,$/;"	e	enum:__anon17
UNW_S390X_F1	include/libunwind.h	/^  UNW_S390X_F1      = 20,$/;"	e	enum:__anon17
UNW_S390X_F10	include/libunwind.h	/^  UNW_S390X_F10     = 25,$/;"	e	enum:__anon17
UNW_S390X_F11	include/libunwind.h	/^  UNW_S390X_F11     = 29,$/;"	e	enum:__anon17
UNW_S390X_F12	include/libunwind.h	/^  UNW_S390X_F12     = 26,$/;"	e	enum:__anon17
UNW_S390X_F13	include/libunwind.h	/^  UNW_S390X_F13     = 30,$/;"	e	enum:__anon17
UNW_S390X_F14	include/libunwind.h	/^  UNW_S390X_F14     = 27,$/;"	e	enum:__anon17
UNW_S390X_F15	include/libunwind.h	/^  UNW_S390X_F15     = 31,$/;"	e	enum:__anon17
UNW_S390X_F2	include/libunwind.h	/^  UNW_S390X_F2      = 17,$/;"	e	enum:__anon17
UNW_S390X_F3	include/libunwind.h	/^  UNW_S390X_F3      = 21,$/;"	e	enum:__anon17
UNW_S390X_F4	include/libunwind.h	/^  UNW_S390X_F4      = 18,$/;"	e	enum:__anon17
UNW_S390X_F5	include/libunwind.h	/^  UNW_S390X_F5      = 22,$/;"	e	enum:__anon17
UNW_S390X_F6	include/libunwind.h	/^  UNW_S390X_F6      = 19,$/;"	e	enum:__anon17
UNW_S390X_F7	include/libunwind.h	/^  UNW_S390X_F7      = 23,$/;"	e	enum:__anon17
UNW_S390X_F8	include/libunwind.h	/^  UNW_S390X_F8      = 24,$/;"	e	enum:__anon17
UNW_S390X_F9	include/libunwind.h	/^  UNW_S390X_F9      = 28,$/;"	e	enum:__anon17
UNW_S390X_PSWA	include/libunwind.h	/^  UNW_S390X_PSWA    = 65,$/;"	e	enum:__anon17
UNW_S390X_PSWM	include/libunwind.h	/^  UNW_S390X_PSWM    = 64,$/;"	e	enum:__anon17
UNW_S390X_R0	include/libunwind.h	/^  UNW_S390X_R0      = 0,$/;"	e	enum:__anon17
UNW_S390X_R1	include/libunwind.h	/^  UNW_S390X_R1      = 1,$/;"	e	enum:__anon17
UNW_S390X_R10	include/libunwind.h	/^  UNW_S390X_R10     = 10,$/;"	e	enum:__anon17
UNW_S390X_R11	include/libunwind.h	/^  UNW_S390X_R11     = 11,$/;"	e	enum:__anon17
UNW_S390X_R12	include/libunwind.h	/^  UNW_S390X_R12     = 12,$/;"	e	enum:__anon17
UNW_S390X_R13	include/libunwind.h	/^  UNW_S390X_R13     = 13,$/;"	e	enum:__anon17
UNW_S390X_R14	include/libunwind.h	/^  UNW_S390X_R14     = 14,$/;"	e	enum:__anon17
UNW_S390X_R15	include/libunwind.h	/^  UNW_S390X_R15     = 15,$/;"	e	enum:__anon17
UNW_S390X_R2	include/libunwind.h	/^  UNW_S390X_R2      = 2,$/;"	e	enum:__anon17
UNW_S390X_R3	include/libunwind.h	/^  UNW_S390X_R3      = 3,$/;"	e	enum:__anon17
UNW_S390X_R4	include/libunwind.h	/^  UNW_S390X_R4      = 4,$/;"	e	enum:__anon17
UNW_S390X_R5	include/libunwind.h	/^  UNW_S390X_R5      = 5,$/;"	e	enum:__anon17
UNW_S390X_R6	include/libunwind.h	/^  UNW_S390X_R6      = 6,$/;"	e	enum:__anon17
UNW_S390X_R7	include/libunwind.h	/^  UNW_S390X_R7      = 7,$/;"	e	enum:__anon17
UNW_S390X_R8	include/libunwind.h	/^  UNW_S390X_R8      = 8,$/;"	e	enum:__anon17
UNW_S390X_R9	include/libunwind.h	/^  UNW_S390X_R9      = 9,$/;"	e	enum:__anon17
UNW_SPARC_G0	include/libunwind.h	/^  UNW_SPARC_G0 = 0,$/;"	e	enum:__anon13
UNW_SPARC_G1	include/libunwind.h	/^  UNW_SPARC_G1 = 1,$/;"	e	enum:__anon13
UNW_SPARC_G2	include/libunwind.h	/^  UNW_SPARC_G2 = 2,$/;"	e	enum:__anon13
UNW_SPARC_G3	include/libunwind.h	/^  UNW_SPARC_G3 = 3,$/;"	e	enum:__anon13
UNW_SPARC_G4	include/libunwind.h	/^  UNW_SPARC_G4 = 4,$/;"	e	enum:__anon13
UNW_SPARC_G5	include/libunwind.h	/^  UNW_SPARC_G5 = 5,$/;"	e	enum:__anon13
UNW_SPARC_G6	include/libunwind.h	/^  UNW_SPARC_G6 = 6,$/;"	e	enum:__anon13
UNW_SPARC_G7	include/libunwind.h	/^  UNW_SPARC_G7 = 7,$/;"	e	enum:__anon13
UNW_SPARC_I0	include/libunwind.h	/^  UNW_SPARC_I0 = 24,$/;"	e	enum:__anon13
UNW_SPARC_I1	include/libunwind.h	/^  UNW_SPARC_I1 = 25,$/;"	e	enum:__anon13
UNW_SPARC_I2	include/libunwind.h	/^  UNW_SPARC_I2 = 26,$/;"	e	enum:__anon13
UNW_SPARC_I3	include/libunwind.h	/^  UNW_SPARC_I3 = 27,$/;"	e	enum:__anon13
UNW_SPARC_I4	include/libunwind.h	/^  UNW_SPARC_I4 = 28,$/;"	e	enum:__anon13
UNW_SPARC_I5	include/libunwind.h	/^  UNW_SPARC_I5 = 29,$/;"	e	enum:__anon13
UNW_SPARC_I6	include/libunwind.h	/^  UNW_SPARC_I6 = 30,$/;"	e	enum:__anon13
UNW_SPARC_I7	include/libunwind.h	/^  UNW_SPARC_I7 = 31,$/;"	e	enum:__anon13
UNW_SPARC_L0	include/libunwind.h	/^  UNW_SPARC_L0 = 16,$/;"	e	enum:__anon13
UNW_SPARC_L1	include/libunwind.h	/^  UNW_SPARC_L1 = 17,$/;"	e	enum:__anon13
UNW_SPARC_L2	include/libunwind.h	/^  UNW_SPARC_L2 = 18,$/;"	e	enum:__anon13
UNW_SPARC_L3	include/libunwind.h	/^  UNW_SPARC_L3 = 19,$/;"	e	enum:__anon13
UNW_SPARC_L4	include/libunwind.h	/^  UNW_SPARC_L4 = 20,$/;"	e	enum:__anon13
UNW_SPARC_L5	include/libunwind.h	/^  UNW_SPARC_L5 = 21,$/;"	e	enum:__anon13
UNW_SPARC_L6	include/libunwind.h	/^  UNW_SPARC_L6 = 22,$/;"	e	enum:__anon13
UNW_SPARC_L7	include/libunwind.h	/^  UNW_SPARC_L7 = 23,$/;"	e	enum:__anon13
UNW_SPARC_O0	include/libunwind.h	/^  UNW_SPARC_O0 = 8,$/;"	e	enum:__anon13
UNW_SPARC_O1	include/libunwind.h	/^  UNW_SPARC_O1 = 9,$/;"	e	enum:__anon13
UNW_SPARC_O2	include/libunwind.h	/^  UNW_SPARC_O2 = 10,$/;"	e	enum:__anon13
UNW_SPARC_O3	include/libunwind.h	/^  UNW_SPARC_O3 = 11,$/;"	e	enum:__anon13
UNW_SPARC_O4	include/libunwind.h	/^  UNW_SPARC_O4 = 12,$/;"	e	enum:__anon13
UNW_SPARC_O5	include/libunwind.h	/^  UNW_SPARC_O5 = 13,$/;"	e	enum:__anon13
UNW_SPARC_O6	include/libunwind.h	/^  UNW_SPARC_O6 = 14,$/;"	e	enum:__anon13
UNW_SPARC_O7	include/libunwind.h	/^  UNW_SPARC_O7 = 15,$/;"	e	enum:__anon13
UNW_STEP_END	src/libunwind_ext.h	20;"	d
UNW_STEP_SUCCESS	src/libunwind_ext.h	19;"	d
UNW_VE_S0	include/libunwind.h	/^  UNW_VE_S0   = 0,$/;"	e	enum:__anon16
UNW_VE_S1	include/libunwind.h	/^  UNW_VE_S1   = 1,$/;"	e	enum:__anon16
UNW_VE_S10	include/libunwind.h	/^  UNW_VE_S10  = 10,$/;"	e	enum:__anon16
UNW_VE_S11	include/libunwind.h	/^  UNW_VE_S11  = 11,$/;"	e	enum:__anon16
UNW_VE_S12	include/libunwind.h	/^  UNW_VE_S12  = 12,$/;"	e	enum:__anon16
UNW_VE_S13	include/libunwind.h	/^  UNW_VE_S13  = 13,$/;"	e	enum:__anon16
UNW_VE_S14	include/libunwind.h	/^  UNW_VE_S14  = 14,$/;"	e	enum:__anon16
UNW_VE_S15	include/libunwind.h	/^  UNW_VE_S15  = 15,$/;"	e	enum:__anon16
UNW_VE_S16	include/libunwind.h	/^  UNW_VE_S16  = 16,$/;"	e	enum:__anon16
UNW_VE_S17	include/libunwind.h	/^  UNW_VE_S17  = 17,$/;"	e	enum:__anon16
UNW_VE_S18	include/libunwind.h	/^  UNW_VE_S18  = 18,$/;"	e	enum:__anon16
UNW_VE_S19	include/libunwind.h	/^  UNW_VE_S19  = 19,$/;"	e	enum:__anon16
UNW_VE_S2	include/libunwind.h	/^  UNW_VE_S2   = 2,$/;"	e	enum:__anon16
UNW_VE_S20	include/libunwind.h	/^  UNW_VE_S20  = 20,$/;"	e	enum:__anon16
UNW_VE_S21	include/libunwind.h	/^  UNW_VE_S21  = 21,$/;"	e	enum:__anon16
UNW_VE_S22	include/libunwind.h	/^  UNW_VE_S22  = 22,$/;"	e	enum:__anon16
UNW_VE_S23	include/libunwind.h	/^  UNW_VE_S23  = 23,$/;"	e	enum:__anon16
UNW_VE_S24	include/libunwind.h	/^  UNW_VE_S24  = 24,$/;"	e	enum:__anon16
UNW_VE_S25	include/libunwind.h	/^  UNW_VE_S25  = 25,$/;"	e	enum:__anon16
UNW_VE_S26	include/libunwind.h	/^  UNW_VE_S26  = 26,$/;"	e	enum:__anon16
UNW_VE_S27	include/libunwind.h	/^  UNW_VE_S27  = 27,$/;"	e	enum:__anon16
UNW_VE_S28	include/libunwind.h	/^  UNW_VE_S28  = 28,$/;"	e	enum:__anon16
UNW_VE_S29	include/libunwind.h	/^  UNW_VE_S29  = 29,$/;"	e	enum:__anon16
UNW_VE_S3	include/libunwind.h	/^  UNW_VE_S3   = 3,$/;"	e	enum:__anon16
UNW_VE_S30	include/libunwind.h	/^  UNW_VE_S30  = 30,$/;"	e	enum:__anon16
UNW_VE_S31	include/libunwind.h	/^  UNW_VE_S31  = 31,$/;"	e	enum:__anon16
UNW_VE_S32	include/libunwind.h	/^  UNW_VE_S32  = 32,$/;"	e	enum:__anon16
UNW_VE_S33	include/libunwind.h	/^  UNW_VE_S33  = 33,$/;"	e	enum:__anon16
UNW_VE_S34	include/libunwind.h	/^  UNW_VE_S34  = 34,$/;"	e	enum:__anon16
UNW_VE_S35	include/libunwind.h	/^  UNW_VE_S35  = 35,$/;"	e	enum:__anon16
UNW_VE_S36	include/libunwind.h	/^  UNW_VE_S36  = 36,$/;"	e	enum:__anon16
UNW_VE_S37	include/libunwind.h	/^  UNW_VE_S37  = 37,$/;"	e	enum:__anon16
UNW_VE_S38	include/libunwind.h	/^  UNW_VE_S38  = 38,$/;"	e	enum:__anon16
UNW_VE_S39	include/libunwind.h	/^  UNW_VE_S39  = 39,$/;"	e	enum:__anon16
UNW_VE_S4	include/libunwind.h	/^  UNW_VE_S4   = 4,$/;"	e	enum:__anon16
UNW_VE_S40	include/libunwind.h	/^  UNW_VE_S40  = 40,$/;"	e	enum:__anon16
UNW_VE_S41	include/libunwind.h	/^  UNW_VE_S41  = 41,$/;"	e	enum:__anon16
UNW_VE_S42	include/libunwind.h	/^  UNW_VE_S42  = 42,$/;"	e	enum:__anon16
UNW_VE_S43	include/libunwind.h	/^  UNW_VE_S43  = 43,$/;"	e	enum:__anon16
UNW_VE_S44	include/libunwind.h	/^  UNW_VE_S44  = 44,$/;"	e	enum:__anon16
UNW_VE_S45	include/libunwind.h	/^  UNW_VE_S45  = 45,$/;"	e	enum:__anon16
UNW_VE_S46	include/libunwind.h	/^  UNW_VE_S46  = 46,$/;"	e	enum:__anon16
UNW_VE_S47	include/libunwind.h	/^  UNW_VE_S47  = 47,$/;"	e	enum:__anon16
UNW_VE_S48	include/libunwind.h	/^  UNW_VE_S48  = 48,$/;"	e	enum:__anon16
UNW_VE_S49	include/libunwind.h	/^  UNW_VE_S49  = 49,$/;"	e	enum:__anon16
UNW_VE_S5	include/libunwind.h	/^  UNW_VE_S5   = 5,$/;"	e	enum:__anon16
UNW_VE_S50	include/libunwind.h	/^  UNW_VE_S50  = 50,$/;"	e	enum:__anon16
UNW_VE_S51	include/libunwind.h	/^  UNW_VE_S51  = 51,$/;"	e	enum:__anon16
UNW_VE_S52	include/libunwind.h	/^  UNW_VE_S52  = 52,$/;"	e	enum:__anon16
UNW_VE_S53	include/libunwind.h	/^  UNW_VE_S53  = 53,$/;"	e	enum:__anon16
UNW_VE_S54	include/libunwind.h	/^  UNW_VE_S54  = 54,$/;"	e	enum:__anon16
UNW_VE_S55	include/libunwind.h	/^  UNW_VE_S55  = 55,$/;"	e	enum:__anon16
UNW_VE_S56	include/libunwind.h	/^  UNW_VE_S56  = 56,$/;"	e	enum:__anon16
UNW_VE_S57	include/libunwind.h	/^  UNW_VE_S57  = 57,$/;"	e	enum:__anon16
UNW_VE_S58	include/libunwind.h	/^  UNW_VE_S58  = 58,$/;"	e	enum:__anon16
UNW_VE_S59	include/libunwind.h	/^  UNW_VE_S59  = 59,$/;"	e	enum:__anon16
UNW_VE_S6	include/libunwind.h	/^  UNW_VE_S6   = 6,$/;"	e	enum:__anon16
UNW_VE_S60	include/libunwind.h	/^  UNW_VE_S60  = 60,$/;"	e	enum:__anon16
UNW_VE_S61	include/libunwind.h	/^  UNW_VE_S61  = 61,$/;"	e	enum:__anon16
UNW_VE_S62	include/libunwind.h	/^  UNW_VE_S62  = 62,$/;"	e	enum:__anon16
UNW_VE_S63	include/libunwind.h	/^  UNW_VE_S63  = 63,$/;"	e	enum:__anon16
UNW_VE_S7	include/libunwind.h	/^  UNW_VE_S7   = 7,$/;"	e	enum:__anon16
UNW_VE_S8	include/libunwind.h	/^  UNW_VE_S8   = 8,$/;"	e	enum:__anon16
UNW_VE_S9	include/libunwind.h	/^  UNW_VE_S9   = 9,$/;"	e	enum:__anon16
UNW_VE_V0	include/libunwind.h	/^  UNW_VE_V0   = 64 + 0,$/;"	e	enum:__anon16
UNW_VE_V1	include/libunwind.h	/^  UNW_VE_V1   = 64 + 1,$/;"	e	enum:__anon16
UNW_VE_V10	include/libunwind.h	/^  UNW_VE_V10  = 64 + 10,$/;"	e	enum:__anon16
UNW_VE_V11	include/libunwind.h	/^  UNW_VE_V11  = 64 + 11,$/;"	e	enum:__anon16
UNW_VE_V12	include/libunwind.h	/^  UNW_VE_V12  = 64 + 12,$/;"	e	enum:__anon16
UNW_VE_V13	include/libunwind.h	/^  UNW_VE_V13  = 64 + 13,$/;"	e	enum:__anon16
UNW_VE_V14	include/libunwind.h	/^  UNW_VE_V14  = 64 + 14,$/;"	e	enum:__anon16
UNW_VE_V15	include/libunwind.h	/^  UNW_VE_V15  = 64 + 15,$/;"	e	enum:__anon16
UNW_VE_V16	include/libunwind.h	/^  UNW_VE_V16  = 64 + 16,$/;"	e	enum:__anon16
UNW_VE_V17	include/libunwind.h	/^  UNW_VE_V17  = 64 + 17,$/;"	e	enum:__anon16
UNW_VE_V18	include/libunwind.h	/^  UNW_VE_V18  = 64 + 18,$/;"	e	enum:__anon16
UNW_VE_V19	include/libunwind.h	/^  UNW_VE_V19  = 64 + 19,$/;"	e	enum:__anon16
UNW_VE_V2	include/libunwind.h	/^  UNW_VE_V2   = 64 + 2,$/;"	e	enum:__anon16
UNW_VE_V20	include/libunwind.h	/^  UNW_VE_V20  = 64 + 20,$/;"	e	enum:__anon16
UNW_VE_V21	include/libunwind.h	/^  UNW_VE_V21  = 64 + 21,$/;"	e	enum:__anon16
UNW_VE_V22	include/libunwind.h	/^  UNW_VE_V22  = 64 + 22,$/;"	e	enum:__anon16
UNW_VE_V23	include/libunwind.h	/^  UNW_VE_V23  = 64 + 23,$/;"	e	enum:__anon16
UNW_VE_V24	include/libunwind.h	/^  UNW_VE_V24  = 64 + 24,$/;"	e	enum:__anon16
UNW_VE_V25	include/libunwind.h	/^  UNW_VE_V25  = 64 + 25,$/;"	e	enum:__anon16
UNW_VE_V26	include/libunwind.h	/^  UNW_VE_V26  = 64 + 26,$/;"	e	enum:__anon16
UNW_VE_V27	include/libunwind.h	/^  UNW_VE_V27  = 64 + 27,$/;"	e	enum:__anon16
UNW_VE_V28	include/libunwind.h	/^  UNW_VE_V28  = 64 + 28,$/;"	e	enum:__anon16
UNW_VE_V29	include/libunwind.h	/^  UNW_VE_V29  = 64 + 29,$/;"	e	enum:__anon16
UNW_VE_V3	include/libunwind.h	/^  UNW_VE_V3   = 64 + 3,$/;"	e	enum:__anon16
UNW_VE_V30	include/libunwind.h	/^  UNW_VE_V30  = 64 + 30,$/;"	e	enum:__anon16
UNW_VE_V31	include/libunwind.h	/^  UNW_VE_V31  = 64 + 31,$/;"	e	enum:__anon16
UNW_VE_V32	include/libunwind.h	/^  UNW_VE_V32  = 64 + 32,$/;"	e	enum:__anon16
UNW_VE_V33	include/libunwind.h	/^  UNW_VE_V33  = 64 + 33,$/;"	e	enum:__anon16
UNW_VE_V34	include/libunwind.h	/^  UNW_VE_V34  = 64 + 34,$/;"	e	enum:__anon16
UNW_VE_V35	include/libunwind.h	/^  UNW_VE_V35  = 64 + 35,$/;"	e	enum:__anon16
UNW_VE_V36	include/libunwind.h	/^  UNW_VE_V36  = 64 + 36,$/;"	e	enum:__anon16
UNW_VE_V37	include/libunwind.h	/^  UNW_VE_V37  = 64 + 37,$/;"	e	enum:__anon16
UNW_VE_V38	include/libunwind.h	/^  UNW_VE_V38  = 64 + 38,$/;"	e	enum:__anon16
UNW_VE_V39	include/libunwind.h	/^  UNW_VE_V39  = 64 + 39,$/;"	e	enum:__anon16
UNW_VE_V4	include/libunwind.h	/^  UNW_VE_V4   = 64 + 4,$/;"	e	enum:__anon16
UNW_VE_V40	include/libunwind.h	/^  UNW_VE_V40  = 64 + 40,$/;"	e	enum:__anon16
UNW_VE_V41	include/libunwind.h	/^  UNW_VE_V41  = 64 + 41,$/;"	e	enum:__anon16
UNW_VE_V42	include/libunwind.h	/^  UNW_VE_V42  = 64 + 42,$/;"	e	enum:__anon16
UNW_VE_V43	include/libunwind.h	/^  UNW_VE_V43  = 64 + 43,$/;"	e	enum:__anon16
UNW_VE_V44	include/libunwind.h	/^  UNW_VE_V44  = 64 + 44,$/;"	e	enum:__anon16
UNW_VE_V45	include/libunwind.h	/^  UNW_VE_V45  = 64 + 45,$/;"	e	enum:__anon16
UNW_VE_V46	include/libunwind.h	/^  UNW_VE_V46  = 64 + 46,$/;"	e	enum:__anon16
UNW_VE_V47	include/libunwind.h	/^  UNW_VE_V47  = 64 + 47,$/;"	e	enum:__anon16
UNW_VE_V48	include/libunwind.h	/^  UNW_VE_V48  = 64 + 48,$/;"	e	enum:__anon16
UNW_VE_V49	include/libunwind.h	/^  UNW_VE_V49  = 64 + 49,$/;"	e	enum:__anon16
UNW_VE_V5	include/libunwind.h	/^  UNW_VE_V5   = 64 + 5,$/;"	e	enum:__anon16
UNW_VE_V50	include/libunwind.h	/^  UNW_VE_V50  = 64 + 50,$/;"	e	enum:__anon16
UNW_VE_V51	include/libunwind.h	/^  UNW_VE_V51  = 64 + 51,$/;"	e	enum:__anon16
UNW_VE_V52	include/libunwind.h	/^  UNW_VE_V52  = 64 + 52,$/;"	e	enum:__anon16
UNW_VE_V53	include/libunwind.h	/^  UNW_VE_V53  = 64 + 53,$/;"	e	enum:__anon16
UNW_VE_V54	include/libunwind.h	/^  UNW_VE_V54  = 64 + 54,$/;"	e	enum:__anon16
UNW_VE_V55	include/libunwind.h	/^  UNW_VE_V55  = 64 + 55,$/;"	e	enum:__anon16
UNW_VE_V56	include/libunwind.h	/^  UNW_VE_V56  = 64 + 56,$/;"	e	enum:__anon16
UNW_VE_V57	include/libunwind.h	/^  UNW_VE_V57  = 64 + 57,$/;"	e	enum:__anon16
UNW_VE_V58	include/libunwind.h	/^  UNW_VE_V58  = 64 + 58,$/;"	e	enum:__anon16
UNW_VE_V59	include/libunwind.h	/^  UNW_VE_V59  = 64 + 59,$/;"	e	enum:__anon16
UNW_VE_V6	include/libunwind.h	/^  UNW_VE_V6   = 64 + 6,$/;"	e	enum:__anon16
UNW_VE_V60	include/libunwind.h	/^  UNW_VE_V60  = 64 + 60,$/;"	e	enum:__anon16
UNW_VE_V61	include/libunwind.h	/^  UNW_VE_V61  = 64 + 61,$/;"	e	enum:__anon16
UNW_VE_V62	include/libunwind.h	/^  UNW_VE_V62  = 64 + 62,$/;"	e	enum:__anon16
UNW_VE_V63	include/libunwind.h	/^  UNW_VE_V63  = 64 + 63,$/;"	e	enum:__anon16
UNW_VE_V7	include/libunwind.h	/^  UNW_VE_V7   = 64 + 7,$/;"	e	enum:__anon16
UNW_VE_V8	include/libunwind.h	/^  UNW_VE_V8   = 64 + 8,$/;"	e	enum:__anon16
UNW_VE_V9	include/libunwind.h	/^  UNW_VE_V9   = 64 + 9,$/;"	e	enum:__anon16
UNW_VE_VIXR	include/libunwind.h	/^  UNW_VE_VIXR = 144,$/;"	e	enum:__anon16
UNW_VE_VL	include/libunwind.h	/^  UNW_VE_VL   = 145,$/;"	e	enum:__anon16
UNW_VE_VM0	include/libunwind.h	/^  UNW_VE_VM0  = 128 + 0,$/;"	e	enum:__anon16
UNW_VE_VM1	include/libunwind.h	/^  UNW_VE_VM1  = 128 + 1,$/;"	e	enum:__anon16
UNW_VE_VM10	include/libunwind.h	/^  UNW_VE_VM10 = 128 + 10,$/;"	e	enum:__anon16
UNW_VE_VM11	include/libunwind.h	/^  UNW_VE_VM11 = 128 + 11,$/;"	e	enum:__anon16
UNW_VE_VM12	include/libunwind.h	/^  UNW_VE_VM12 = 128 + 12,$/;"	e	enum:__anon16
UNW_VE_VM13	include/libunwind.h	/^  UNW_VE_VM13 = 128 + 13,$/;"	e	enum:__anon16
UNW_VE_VM14	include/libunwind.h	/^  UNW_VE_VM14 = 128 + 14,$/;"	e	enum:__anon16
UNW_VE_VM15	include/libunwind.h	/^  UNW_VE_VM15 = 128 + 15, \/\/ = 143$/;"	e	enum:__anon16
UNW_VE_VM2	include/libunwind.h	/^  UNW_VE_VM2  = 128 + 2,$/;"	e	enum:__anon16
UNW_VE_VM3	include/libunwind.h	/^  UNW_VE_VM3  = 128 + 3,$/;"	e	enum:__anon16
UNW_VE_VM4	include/libunwind.h	/^  UNW_VE_VM4  = 128 + 4,$/;"	e	enum:__anon16
UNW_VE_VM5	include/libunwind.h	/^  UNW_VE_VM5  = 128 + 5,$/;"	e	enum:__anon16
UNW_VE_VM6	include/libunwind.h	/^  UNW_VE_VM6  = 128 + 6,$/;"	e	enum:__anon16
UNW_VE_VM7	include/libunwind.h	/^  UNW_VE_VM7  = 128 + 7,$/;"	e	enum:__anon16
UNW_VE_VM8	include/libunwind.h	/^  UNW_VE_VM8  = 128 + 8,$/;"	e	enum:__anon16
UNW_VE_VM9	include/libunwind.h	/^  UNW_VE_VM9  = 128 + 9,$/;"	e	enum:__anon16
UNW_X86_64_R10	include/libunwind.h	/^  UNW_X86_64_R10 = 10,$/;"	e	enum:__anon6
UNW_X86_64_R11	include/libunwind.h	/^  UNW_X86_64_R11 = 11,$/;"	e	enum:__anon6
UNW_X86_64_R12	include/libunwind.h	/^  UNW_X86_64_R12 = 12,$/;"	e	enum:__anon6
UNW_X86_64_R13	include/libunwind.h	/^  UNW_X86_64_R13 = 13,$/;"	e	enum:__anon6
UNW_X86_64_R14	include/libunwind.h	/^  UNW_X86_64_R14 = 14,$/;"	e	enum:__anon6
UNW_X86_64_R15	include/libunwind.h	/^  UNW_X86_64_R15 = 15,$/;"	e	enum:__anon6
UNW_X86_64_R8	include/libunwind.h	/^  UNW_X86_64_R8  = 8,$/;"	e	enum:__anon6
UNW_X86_64_R9	include/libunwind.h	/^  UNW_X86_64_R9  = 9,$/;"	e	enum:__anon6
UNW_X86_64_RAX	include/libunwind.h	/^  UNW_X86_64_RAX = 0,$/;"	e	enum:__anon6
UNW_X86_64_RBP	include/libunwind.h	/^  UNW_X86_64_RBP = 6,$/;"	e	enum:__anon6
UNW_X86_64_RBX	include/libunwind.h	/^  UNW_X86_64_RBX = 3,$/;"	e	enum:__anon6
UNW_X86_64_RCX	include/libunwind.h	/^  UNW_X86_64_RCX = 2,$/;"	e	enum:__anon6
UNW_X86_64_RDI	include/libunwind.h	/^  UNW_X86_64_RDI = 5,$/;"	e	enum:__anon6
UNW_X86_64_RDX	include/libunwind.h	/^  UNW_X86_64_RDX = 1,$/;"	e	enum:__anon6
UNW_X86_64_RIP	include/libunwind.h	/^  UNW_X86_64_RIP = 16,$/;"	e	enum:__anon6
UNW_X86_64_RSI	include/libunwind.h	/^  UNW_X86_64_RSI = 4,$/;"	e	enum:__anon6
UNW_X86_64_RSP	include/libunwind.h	/^  UNW_X86_64_RSP = 7,$/;"	e	enum:__anon6
UNW_X86_64_XMM0	include/libunwind.h	/^  UNW_X86_64_XMM0 = 17,$/;"	e	enum:__anon6
UNW_X86_64_XMM1	include/libunwind.h	/^  UNW_X86_64_XMM1 = 18,$/;"	e	enum:__anon6
UNW_X86_64_XMM10	include/libunwind.h	/^  UNW_X86_64_XMM10 = 27,$/;"	e	enum:__anon6
UNW_X86_64_XMM11	include/libunwind.h	/^  UNW_X86_64_XMM11 = 28,$/;"	e	enum:__anon6
UNW_X86_64_XMM12	include/libunwind.h	/^  UNW_X86_64_XMM12 = 29,$/;"	e	enum:__anon6
UNW_X86_64_XMM13	include/libunwind.h	/^  UNW_X86_64_XMM13 = 30,$/;"	e	enum:__anon6
UNW_X86_64_XMM14	include/libunwind.h	/^  UNW_X86_64_XMM14 = 31,$/;"	e	enum:__anon6
UNW_X86_64_XMM15	include/libunwind.h	/^  UNW_X86_64_XMM15 = 32,$/;"	e	enum:__anon6
UNW_X86_64_XMM2	include/libunwind.h	/^  UNW_X86_64_XMM2 = 19,$/;"	e	enum:__anon6
UNW_X86_64_XMM3	include/libunwind.h	/^  UNW_X86_64_XMM3 = 20,$/;"	e	enum:__anon6
UNW_X86_64_XMM4	include/libunwind.h	/^  UNW_X86_64_XMM4 = 21,$/;"	e	enum:__anon6
UNW_X86_64_XMM5	include/libunwind.h	/^  UNW_X86_64_XMM5 = 22,$/;"	e	enum:__anon6
UNW_X86_64_XMM6	include/libunwind.h	/^  UNW_X86_64_XMM6 = 23,$/;"	e	enum:__anon6
UNW_X86_64_XMM7	include/libunwind.h	/^  UNW_X86_64_XMM7 = 24,$/;"	e	enum:__anon6
UNW_X86_64_XMM8	include/libunwind.h	/^  UNW_X86_64_XMM8 = 25,$/;"	e	enum:__anon6
UNW_X86_64_XMM9	include/libunwind.h	/^  UNW_X86_64_XMM9 = 26,$/;"	e	enum:__anon6
UNW_X86_EAX	include/libunwind.h	/^  UNW_X86_EAX = 0,$/;"	e	enum:__anon5
UNW_X86_EBP	include/libunwind.h	/^  UNW_X86_EBP = 4,$/;"	e	enum:__anon5
UNW_X86_EBX	include/libunwind.h	/^  UNW_X86_EBX = 3,$/;"	e	enum:__anon5
UNW_X86_ECX	include/libunwind.h	/^  UNW_X86_ECX = 1,$/;"	e	enum:__anon5
UNW_X86_EDI	include/libunwind.h	/^  UNW_X86_EDI = 7$/;"	e	enum:__anon5
UNW_X86_EDX	include/libunwind.h	/^  UNW_X86_EDX = 2,$/;"	e	enum:__anon5
UNW_X86_ESI	include/libunwind.h	/^  UNW_X86_ESI = 6,$/;"	e	enum:__anon5
UNW_X86_ESP	include/libunwind.h	/^  UNW_X86_ESP = 5,$/;"	e	enum:__anon5
Unused	src/FrameHeaderCache.hpp	/^  CacheEntry *Unused;$/;"	m	class:FrameHeaderCache
UnwindCodes	src/UnwindCursor.hpp	/^  uint16_t UnwindCodes[2];$/;"	m	struct:UNWIND_INFO
UnwindCursor	src/UnwindCursor.hpp	/^UnwindCursor<A, R>::UnwindCursor(A &as, void *)$/;"	f	class:libunwind::UnwindCursor
UnwindCursor	src/UnwindCursor.hpp	/^UnwindCursor<A, R>::UnwindCursor(CONTEXT *context, A &as)$/;"	f	class:libunwind::UnwindCursor
UnwindCursor	src/UnwindCursor.hpp	/^UnwindCursor<A, R>::UnwindCursor(unw_context_t *context, A &as)$/;"	f	class:libunwind::UnwindCursor
UnwindCursor	src/UnwindCursor.hpp	/^class UnwindCursor : public AbstractUnwindCursor {$/;"	c	namespace:libunwind
UnwindCursor	src/UnwindCursor.hpp	/^class UnwindCursor : public AbstractUnwindCursor{$/;"	c	namespace:libunwind
UnwindInfoSections	src/AddressSpace.hpp	/^struct UnwindInfoSections {$/;"	s	namespace:libunwind
UnwindSectionCompressedArray	src/UnwindCursor.hpp	/^  UnwindSectionCompressedArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionCompressedArray
UnwindSectionCompressedArray	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionCompressedArray {$/;"	c	namespace:libunwind
UnwindSectionCompressedPageHeader	src/UnwindCursor.hpp	/^  UnwindSectionCompressedPageHeader(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
UnwindSectionCompressedPageHeader	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionCompressedPageHeader {$/;"	c	namespace:libunwind
UnwindSectionHeader	src/UnwindCursor.hpp	/^  UnwindSectionHeader(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionHeader
UnwindSectionHeader	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionHeader {$/;"	c	namespace:libunwind
UnwindSectionIndexArray	src/UnwindCursor.hpp	/^  UnwindSectionIndexArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionIndexArray
UnwindSectionIndexArray	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionIndexArray {$/;"	c	namespace:libunwind
UnwindSectionLsdaArray	src/UnwindCursor.hpp	/^  UnwindSectionLsdaArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionLsdaArray
UnwindSectionLsdaArray	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionLsdaArray {$/;"	c	namespace:libunwind
UnwindSectionRegularArray	src/UnwindCursor.hpp	/^  UnwindSectionRegularArray(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionRegularArray
UnwindSectionRegularArray	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionRegularArray {$/;"	c	namespace:libunwind
UnwindSectionRegularPageHeader	src/UnwindCursor.hpp	/^  UnwindSectionRegularPageHeader(A &addressSpace, typename A::pint_t addr)$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
UnwindSectionRegularPageHeader	src/UnwindCursor.hpp	/^template <typename A> class UnwindSectionRegularPageHeader {$/;"	c	namespace:libunwind
ValueAsBitPattern	src/Unwind-EHABI.cpp	/^static uint64_t ValueAsBitPattern(_Unwind_VRS_DataRepresentation representation,$/;"	f	file:
Version	src/UnwindCursor.hpp	/^  uint8_t Version : 3;$/;"	m	struct:UNWIND_INFO
WEAK_ALIAS	src/assembly.h	127;"	d
XSTR	src/config.h	73;"	d
_DISPATCHER_CONTEXT	src/UnwindCursor.hpp	/^struct _DISPATCHER_CONTEXT {$/;"	s
_GCC_specific_handler	src/Unwind-seh.cpp	/^_GCC_specific_handler(PEXCEPTION_RECORD ms_exc, PVOID frame, PCONTEXT ms_ctx,$/;"	f
_LIBUNWIND_ABORT	src/config.h	148;"	d
_LIBUNWIND_ABORT	src/config.h	153;"	d
_LIBUNWIND_ALIAS_VISIBILITY	src/config.h	78;"	d
_LIBUNWIND_ALIAS_VISIBILITY	src/config.h	80;"	d
_LIBUNWIND_ARM_EHABI	include/__libunwind_config.h	16;"	d
_LIBUNWIND_BUILD_SJLJ_APIS	src/config.h	108;"	d
_LIBUNWIND_BUILD_ZERO_COST_APIS	src/config.h	120;"	d
_LIBUNWIND_CET_ENDBR	src/assembly.h	20;"	d
_LIBUNWIND_CET_ENDBR	src/assembly.h	22;"	d
_LIBUNWIND_CHECK_LINUX_SIGRETURN	src/UnwindCursor.hpp	38;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	105;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	108;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	114;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	117;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	123;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	126;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	137;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	142;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	151;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	162;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	167;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	173;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	200;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	41;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	47;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	54;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	60;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	65;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	70;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	80;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	83;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	86;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	92;"	d
_LIBUNWIND_CONTEXT_SIZE	include/__libunwind_config.h	98;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	106;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	109;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	115;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	118;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	124;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	127;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	138;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	143;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	153;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	155;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	163;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	168;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	174;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	201;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	42;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	49;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	51;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	55;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	61;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	66;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	72;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	74;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	81;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	84;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	87;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	93;"	d
_LIBUNWIND_CURSOR_SIZE	include/__libunwind_config.h	99;"	d
_LIBUNWIND_DEBUG_LOG	src/config.h	184;"	d
_LIBUNWIND_DEBUG_LOG	src/config.h	200;"	d
_LIBUNWIND_EXPORT	src/config.h	60;"	d
_LIBUNWIND_EXPORT	src/config.h	64;"	d
_LIBUNWIND_EXPORT	src/config.h	67;"	d
_LIBUNWIND_EXPORT_UNWIND_LEVEL1	include/unwind_arm_ehabi.h	129;"	d
_LIBUNWIND_EXPORT_UNWIND_LEVEL1	include/unwind_arm_ehabi.h	131;"	d
_LIBUNWIND_FRAMEHEADERCACHE_TRACE	src/FrameHeaderCache.hpp	20;"	d
_LIBUNWIND_FRAMEHEADERCACHE_TRACE	src/FrameHeaderCache.hpp	24;"	d
_LIBUNWIND_FRAMEHEADERCACHE_TRACE0	src/FrameHeaderCache.hpp	19;"	d
_LIBUNWIND_FRAMEHEADERCACHE_TRACE0	src/FrameHeaderCache.hpp	23;"	d
_LIBUNWIND_HIDDEN	src/config.h	61;"	d
_LIBUNWIND_HIDDEN	src/config.h	65;"	d
_LIBUNWIND_HIDDEN	src/config.h	68;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	100;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	132;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	135;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	141;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	159;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	164;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	169;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	178;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	202;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	43;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	57;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	62;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	67;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	76;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	89;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER	include/__libunwind_config.h	94;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM	include/__libunwind_config.h	24;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_ARM64	include/__libunwind_config.h	23;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_HEXAGON	include/__libunwind_config.h	29;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_LOONGARCH	include/__libunwind_config.h	33;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_MIPS	include/__libunwind_config.h	26;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_OR1K	include/__libunwind_config.h	25;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC	include/__libunwind_config.h	21;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_PPC64	include/__libunwind_config.h	22;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_RISCV	include/__libunwind_config.h	30;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_S390X	include/__libunwind_config.h	32;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_SPARC	include/__libunwind_config.h	27;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_SPARC64	include/__libunwind_config.h	28;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_VE	include/__libunwind_config.h	31;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_X86	include/__libunwind_config.h	19;"	d
_LIBUNWIND_HIGHEST_DWARF_REGISTER_X86_64	include/__libunwind_config.h	20;"	d
_LIBUNWIND_LOG	src/config.h	163;"	d
_LIBUNWIND_LOG	src/config.h	167;"	d
_LIBUNWIND_LOG0	src/config.h	162;"	d
_LIBUNWIND_LOG0	src/config.h	165;"	d
_LIBUNWIND_LOG_IF_FALSE	src/config.h	172;"	d
_LIBUNWIND_LOG_IF_FALSE	src/config.h	174;"	d
_LIBUNWIND_POP_CET_SSP	src/cet_unwind.h	24;"	d
_LIBUNWIND_REMEMBER_ALLOC	src/config.h	128;"	d
_LIBUNWIND_REMEMBER_ALLOC	src/config.h	133;"	d
_LIBUNWIND_REMEMBER_ALLOC	src/config.h	137;"	d
_LIBUNWIND_REMEMBER_ALLOC	src/config.h	142;"	d
_LIBUNWIND_REMEMBER_CLEANUP_NEEDED	src/config.h	135;"	d
_LIBUNWIND_REMEMBER_CLEANUP_NEEDED	src/config.h	139;"	d
_LIBUNWIND_REMEMBER_CLEANUP_NEEDED	src/config.h	144;"	d
_LIBUNWIND_REMEMBER_FREE	src/config.h	129;"	d
_LIBUNWIND_REMEMBER_FREE	src/config.h	134;"	d
_LIBUNWIND_REMEMBER_FREE	src/config.h	138;"	d
_LIBUNWIND_REMEMBER_FREE	src/config.h	143;"	d
_LIBUNWIND_SUPPORT_COMPACT_UNWIND	src/config.h	26;"	d
_LIBUNWIND_SUPPORT_COMPACT_UNWIND	src/config.h	28;"	d
_LIBUNWIND_SUPPORT_DWARF_INDEX	src/config.h	40;"	d
_LIBUNWIND_SUPPORT_DWARF_INDEX	src/config.h	54;"	d
_LIBUNWIND_SUPPORT_DWARF_UNWIND	src/config.h	29;"	d
_LIBUNWIND_SUPPORT_DWARF_UNWIND	src/config.h	35;"	d
_LIBUNWIND_SUPPORT_DWARF_UNWIND	src/config.h	39;"	d
_LIBUNWIND_SUPPORT_DWARF_UNWIND	src/config.h	53;"	d
_LIBUNWIND_SUPPORT_FRAME_APIS	src/config.h	112;"	d
_LIBUNWIND_SUPPORT_SEH_UNWIND	src/config.h	33;"	d
_LIBUNWIND_SUPPORT_TBTAB_UNWIND	src/config.h	48;"	d
_LIBUNWIND_TARGET_AARCH64	include/__libunwind_config.h	188;"	d
_LIBUNWIND_TARGET_AARCH64	include/__libunwind_config.h	69;"	d
_LIBUNWIND_TARGET_ARM	include/__libunwind_config.h	189;"	d
_LIBUNWIND_TARGET_ARM	include/__libunwind_config.h	78;"	d
_LIBUNWIND_TARGET_HEXAGON	include/__libunwind_config.h	195;"	d
_LIBUNWIND_TARGET_HEXAGON	include/__libunwind_config.h	96;"	d
_LIBUNWIND_TARGET_I386	include/__libunwind_config.h	184;"	d
_LIBUNWIND_TARGET_I386	include/__libunwind_config.h	40;"	d
_LIBUNWIND_TARGET_LINUX	include/__libunwind_config.h	37;"	d
_LIBUNWIND_TARGET_LOONGARCH	include/__libunwind_config.h	171;"	d
_LIBUNWIND_TARGET_LOONGARCH	include/__libunwind_config.h	199;"	d
_LIBUNWIND_TARGET_MIPS_NEWABI	include/__libunwind_config.h	112;"	d
_LIBUNWIND_TARGET_MIPS_NEWABI	include/__libunwind_config.h	121;"	d
_LIBUNWIND_TARGET_MIPS_NEWABI	include/__libunwind_config.h	192;"	d
_LIBUNWIND_TARGET_MIPS_O32	include/__libunwind_config.h	103;"	d
_LIBUNWIND_TARGET_MIPS_O32	include/__libunwind_config.h	191;"	d
_LIBUNWIND_TARGET_OR1K	include/__libunwind_config.h	190;"	d
_LIBUNWIND_TARGET_OR1K	include/__libunwind_config.h	91;"	d
_LIBUNWIND_TARGET_PPC	include/__libunwind_config.h	186;"	d
_LIBUNWIND_TARGET_PPC	include/__libunwind_config.h	64;"	d
_LIBUNWIND_TARGET_PPC64	include/__libunwind_config.h	187;"	d
_LIBUNWIND_TARGET_PPC64	include/__libunwind_config.h	59;"	d
_LIBUNWIND_TARGET_RISCV	include/__libunwind_config.h	145;"	d
_LIBUNWIND_TARGET_RISCV	include/__libunwind_config.h	196;"	d
_LIBUNWIND_TARGET_S390X	include/__libunwind_config.h	166;"	d
_LIBUNWIND_TARGET_S390X	include/__libunwind_config.h	198;"	d
_LIBUNWIND_TARGET_SPARC	include/__libunwind_config.h	140;"	d
_LIBUNWIND_TARGET_SPARC	include/__libunwind_config.h	193;"	d
_LIBUNWIND_TARGET_SPARC64	include/__libunwind_config.h	134;"	d
_LIBUNWIND_TARGET_SPARC64	include/__libunwind_config.h	194;"	d
_LIBUNWIND_TARGET_VE	include/__libunwind_config.h	161;"	d
_LIBUNWIND_TARGET_VE	include/__libunwind_config.h	197;"	d
_LIBUNWIND_TARGET_X86_64	include/__libunwind_config.h	185;"	d
_LIBUNWIND_TARGET_X86_64	include/__libunwind_config.h	45;"	d
_LIBUNWIND_THREAD_LOCAL	src/Unwind-sjlj.c	63;"	d	file:
_LIBUNWIND_THREAD_LOCAL	src/Unwind-sjlj.c	66;"	d	file:
_LIBUNWIND_THREAD_LOCAL	src/Unwind-sjlj.c	68;"	d	file:
_LIBUNWIND_THREAD_LOCAL	src/Unwind-sjlj.c	70;"	d	file:
_LIBUNWIND_TRACE_API	src/config.h	185;"	d
_LIBUNWIND_TRACE_API	src/config.h	201;"	d
_LIBUNWIND_TRACE_DWARF	src/config.h	189;"	d
_LIBUNWIND_TRACE_DWARF	src/config.h	213;"	d
_LIBUNWIND_TRACE_UNWINDING	src/config.h	188;"	d
_LIBUNWIND_TRACE_UNWINDING	src/config.h	208;"	d
_LIBUNWIND_TRACING_DWARF	src/config.h	187;"	d
_LIBUNWIND_TRACING_DWARF	src/config.h	207;"	d
_LIBUNWIND_TRACING_UNWINDING	src/config.h	186;"	d
_LIBUNWIND_TRACING_UNWINDING	src/config.h	206;"	d
_LIBUNWIND_UNWIND_LEVEL1_EXTERNAL_LINKAGE	src/UnwindLevel1.c	19;"	d	file:
_LIBUNWIND_USE_CET	src/cet_unwind.h	17;"	d
_LIBUNWIND_USE_DLADDR	src/AddressSpace.hpp	28;"	d
_LIBUNWIND_USE_DLADDR	src/AddressSpace.hpp	30;"	d
_LIBUNWIND_USE_DL_ITERATE_PHDR	src/config.h	51;"	d
_LIBUNWIND_USE_DL_UNWIND_FIND_EXIDX	src/config.h	45;"	d
_LIBUNWIND_VERSION	include/__libunwind_config.h	12;"	d
_LIBUNWIND_WEAK_ALIAS	src/config.h	82;"	d
_LIBUNWIND_WEAK_ALIAS	src/config.h	87;"	d
_LIBUNWIND_WEAK_ALIAS	src/config.h	92;"	d
_LIBUNWIND_WEAK_ALIAS	src/config.h	96;"	d
_Self	src/UnwindCursor.hpp	/^  typedef EHABISectionIterator _Self;$/;"	t	struct:libunwind::EHABISectionIterator
_UA_CLEANUP_PHASE	include/unwind.h	/^  _UA_CLEANUP_PHASE = 2,$/;"	e	enum:__anon2
_UA_END_OF_STACK	include/unwind.h	/^  _UA_END_OF_STACK = 16 \/\/ gcc extension to C++ ABI$/;"	e	enum:__anon2
_UA_FORCE_UNWIND	include/unwind.h	/^  _UA_FORCE_UNWIND = 8,$/;"	e	enum:__anon2
_UA_HANDLER_FRAME	include/unwind.h	/^  _UA_HANDLER_FRAME = 4,$/;"	e	enum:__anon2
_UA_SEARCH_PHASE	include/unwind.h	/^  _UA_SEARCH_PHASE = 1,$/;"	e	enum:__anon2
_URC_CONTINUE_UNWIND	include/unwind.h	/^  _URC_CONTINUE_UNWIND = 8,$/;"	e	enum:__anon1
_URC_END_OF_STACK	include/unwind.h	/^  _URC_END_OF_STACK = 5,$/;"	e	enum:__anon1
_URC_FAILURE	include/unwind.h	/^  _URC_FAILURE = 9$/;"	e	enum:__anon1
_URC_FATAL_PHASE1_ERROR	include/unwind.h	/^  _URC_FATAL_PHASE1_ERROR = 3,$/;"	e	enum:__anon1
_URC_FATAL_PHASE2_ERROR	include/unwind.h	/^  _URC_FATAL_PHASE2_ERROR = 2,$/;"	e	enum:__anon1
_URC_FOREIGN_EXCEPTION_CAUGHT	include/unwind.h	/^  _URC_FOREIGN_EXCEPTION_CAUGHT = 1,$/;"	e	enum:__anon1
_URC_HANDLER_FOUND	include/unwind.h	/^  _URC_HANDLER_FOUND = 6,$/;"	e	enum:__anon1
_URC_INSTALL_CONTEXT	include/unwind.h	/^  _URC_INSTALL_CONTEXT = 7,$/;"	e	enum:__anon1
_URC_NORMAL_STOP	include/unwind.h	/^  _URC_NORMAL_STOP = 4,$/;"	e	enum:__anon1
_URC_NO_REASON	include/unwind.h	/^  _URC_NO_REASON = 0,$/;"	e	enum:__anon1
_URC_OK	include/unwind.h	/^  _URC_OK = 0,$/;"	e	enum:__anon1
_US_ACTION_MASK	include/unwind_arm_ehabi.h	/^static const _Unwind_State _US_ACTION_MASK            = 3;$/;"	v
_US_FORCE_UNWIND	include/unwind_arm_ehabi.h	/^static const _Unwind_State _US_FORCE_UNWIND           = 8;$/;"	v
_US_UNWIND_FRAME_RESUME	include/unwind_arm_ehabi.h	/^static const _Unwind_State _US_UNWIND_FRAME_RESUME    = 2;$/;"	v
_US_UNWIND_FRAME_STARTING	include/unwind_arm_ehabi.h	/^static const _Unwind_State _US_UNWIND_FRAME_STARTING  = 1;$/;"	v
_US_VIRTUAL_UNWIND_FRAME	include/unwind_arm_ehabi.h	/^static const _Unwind_State _US_VIRTUAL_UNWIND_FRAME   = 0;$/;"	v
_UVRSC_CORE	include/unwind_arm_ehabi.h	/^  _UVRSC_CORE = 0,  \/* integer register *\/$/;"	e	enum:__anon23
_UVRSC_PSEUDO	include/unwind_arm_ehabi.h	/^  _UVRSC_PSEUDO = 5 \/* Special purpose pseudo register *\/$/;"	e	enum:__anon23
_UVRSC_VFP	include/unwind_arm_ehabi.h	/^  _UVRSC_VFP = 1,   \/* vfp *\/$/;"	e	enum:__anon23
_UVRSC_WMMXC	include/unwind_arm_ehabi.h	/^  _UVRSC_WMMXC = 4, \/* Intel WMMX control register *\/$/;"	e	enum:__anon23
_UVRSC_WMMXD	include/unwind_arm_ehabi.h	/^  _UVRSC_WMMXD = 3, \/* Intel WMMX data register *\/$/;"	e	enum:__anon23
_UVRSD_DOUBLE	include/unwind_arm_ehabi.h	/^  _UVRSD_DOUBLE = 5$/;"	e	enum:__anon24
_UVRSD_FLOAT	include/unwind_arm_ehabi.h	/^  _UVRSD_FLOAT = 4,$/;"	e	enum:__anon24
_UVRSD_UINT32	include/unwind_arm_ehabi.h	/^  _UVRSD_UINT32 = 0,$/;"	e	enum:__anon24
_UVRSD_UINT64	include/unwind_arm_ehabi.h	/^  _UVRSD_UINT64 = 3,$/;"	e	enum:__anon24
_UVRSD_VFPX	include/unwind_arm_ehabi.h	/^  _UVRSD_VFPX = 1,$/;"	e	enum:__anon24
_UVRSR_FAILED	include/unwind_arm_ehabi.h	/^  _UVRSR_FAILED = 2$/;"	e	enum:__anon25
_UVRSR_NOT_IMPLEMENTED	include/unwind_arm_ehabi.h	/^  _UVRSR_NOT_IMPLEMENTED = 1,$/;"	e	enum:__anon25
_UVRSR_OK	include/unwind_arm_ehabi.h	/^  _UVRSR_OK = 0,$/;"	e	enum:__anon25
_Unwind_Action	include/unwind.h	/^} _Unwind_Action;$/;"	t	typeref:enum:__anon2
_Unwind_Backtrace	src/UnwindLevel1-gcc-ext.c	/^_Unwind_Backtrace(_Unwind_Trace_Fn callback, void *ref) {$/;"	f
_Unwind_Complete	src/Unwind-EHABI.cpp	/^_LIBUNWIND_EXPORT void _Unwind_Complete(_Unwind_Exception* exception_object) {$/;"	f
_Unwind_Context	include/unwind.h	/^typedef struct _Unwind_Context _Unwind_Context;   \/\/ opaque$/;"	t	typeref:struct:_Unwind_Context
_Unwind_Control_Block	include/unwind_arm_ehabi.h	/^struct _Unwind_Control_Block {$/;"	s
_Unwind_Control_Block	include/unwind_arm_ehabi.h	/^typedef struct _Unwind_Control_Block _Unwind_Control_Block;$/;"	t	typeref:struct:_Unwind_Control_Block
_Unwind_DeleteException	src/Unwind-EHABI.cpp	/^_Unwind_DeleteException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_DeleteException	src/Unwind-sjlj.c	/^_Unwind_DeleteException(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_DeleteException	src/UnwindLevel1.c	/^_Unwind_DeleteException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_EHT_Header	include/unwind_arm_ehabi.h	/^typedef uint32_t _Unwind_EHT_Header;$/;"	t
_Unwind_Exception	include/unwind_arm_ehabi.h	29;"	d
_Unwind_Exception	include/unwind_itanium.h	/^struct _Unwind_Exception {$/;"	s
_Unwind_Exception	include/unwind_itanium.h	/^typedef struct _Unwind_Exception _Unwind_Exception;$/;"	t	typeref:struct:_Unwind_Exception
_Unwind_Exception_Class	include/unwind_arm_ehabi.h	/^typedef uint8_t _Unwind_Exception_Class[8];$/;"	t
_Unwind_Exception_Class	include/unwind_itanium.h	/^typedef uint64_t _Unwind_Exception_Class;$/;"	t
_Unwind_FindEnclosingFunction	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void *_Unwind_FindEnclosingFunction(void *pc) {$/;"	f
_Unwind_Find_FDE	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT const void *_Unwind_Find_FDE(const void *pc,$/;"	f
_Unwind_ForcedUnwind	src/Unwind-EHABI.cpp	/^_Unwind_ForcedUnwind(_Unwind_Exception *exception_object, _Unwind_Stop_Fn stop,$/;"	f
_Unwind_ForcedUnwind	src/Unwind-seh.cpp	/^_Unwind_ForcedUnwind(_Unwind_Exception *exception_object,$/;"	f
_Unwind_ForcedUnwind	src/UnwindLevel1.c	/^_Unwind_ForcedUnwind(_Unwind_Exception *exception_object,$/;"	f
_Unwind_FunctionContext	src/Unwind-sjlj.c	/^struct _Unwind_FunctionContext {$/;"	s	file:
_Unwind_FunctionContext_t	include/unwind.h	/^typedef struct _Unwind_FunctionContext *_Unwind_FunctionContext_t;$/;"	t	typeref:struct:_Unwind_FunctionContext
_Unwind_GetCFA	src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetCFA(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetCFA	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetCFA(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetDataRelBase	src/Unwind-sjlj.c	/^_Unwind_GetDataRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetDataRelBase	src/UnwindLevel1-gcc-ext.c	/^_Unwind_GetDataRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetGR	include/unwind_arm_ehabi.h	/^uintptr_t _Unwind_GetGR(struct _Unwind_Context *context, int index) {$/;"	f
_Unwind_GetGR	src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetGR(struct _Unwind_Context *context,$/;"	f
_Unwind_GetGR	src/UnwindLevel1.c	/^_Unwind_GetGR(struct _Unwind_Context *context, int index) {$/;"	f
_Unwind_GetIP	include/unwind_arm_ehabi.h	/^uintptr_t _Unwind_GetIP(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetIP	src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIP(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetIP	src/UnwindLevel1.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIP(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetIPInfo	src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIPInfo(struct _Unwind_Context *context,$/;"	f
_Unwind_GetIPInfo	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT uintptr_t _Unwind_GetIPInfo(struct _Unwind_Context *context,$/;"	f
_Unwind_GetLanguageSpecificData	src/Unwind-EHABI.cpp	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetLanguageSpecificData	src/Unwind-seh.cpp	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetLanguageSpecificData	src/Unwind-sjlj.c	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetLanguageSpecificData	src/UnwindLevel1.c	/^_Unwind_GetLanguageSpecificData(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	src/Unwind-EHABI.cpp	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	src/Unwind-seh.cpp	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	src/Unwind-sjlj.c	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetRegionStart	src/UnwindLevel1.c	/^_Unwind_GetRegionStart(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetTextRelBase	src/Unwind-sjlj.c	/^_Unwind_GetTextRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_GetTextRelBase	src/UnwindLevel1-gcc-ext.c	/^_Unwind_GetTextRelBase(struct _Unwind_Context *context) {$/;"	f
_Unwind_Personality_Fn	include/unwind_arm_ehabi.h	/^typedef _Unwind_Reason_Code (*_Unwind_Personality_Fn)($/;"	t
_Unwind_Personality_Fn	include/unwind_itanium.h	/^typedef _Unwind_Reason_Code (*_Unwind_Personality_Fn)($/;"	t
_Unwind_RaiseException	src/Unwind-EHABI.cpp	/^_Unwind_RaiseException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_RaiseException	src/Unwind-seh.cpp	/^_Unwind_RaiseException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_RaiseException	src/UnwindLevel1.c	/^_Unwind_RaiseException(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Reason_Code	include/unwind.h	/^} _Unwind_Reason_Code;$/;"	t	typeref:enum:__anon1
_Unwind_Resume	src/Unwind-EHABI.cpp	/^_Unwind_Resume(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Resume	src/Unwind-seh.cpp	/^_Unwind_Resume(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Resume	src/UnwindLevel1.c	/^_Unwind_Resume(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_Resume_or_Rethrow	src/UnwindLevel1-gcc-ext.c	/^_Unwind_Resume_or_Rethrow(_Unwind_Exception *exception_object) {$/;"	f
_Unwind_SetGR	include/unwind_arm_ehabi.h	/^void _Unwind_SetGR(struct _Unwind_Context *context, int index,$/;"	f
_Unwind_SetGR	src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT void _Unwind_SetGR(struct _Unwind_Context *context, int index,$/;"	f
_Unwind_SetGR	src/UnwindLevel1.c	/^_LIBUNWIND_EXPORT void _Unwind_SetGR(struct _Unwind_Context *context, int index,$/;"	f
_Unwind_SetIP	include/unwind_arm_ehabi.h	/^void _Unwind_SetIP(struct _Unwind_Context *context, uintptr_t value) {$/;"	f
_Unwind_SetIP	src/Unwind-sjlj.c	/^_LIBUNWIND_EXPORT void _Unwind_SetIP(struct _Unwind_Context *context,$/;"	f
_Unwind_SetIP	src/UnwindLevel1.c	/^_LIBUNWIND_EXPORT void _Unwind_SetIP(struct _Unwind_Context *context,$/;"	f
_Unwind_SjLj_RaiseException	src/Unwind-sjlj.c	/^_Unwind_SjLj_RaiseException(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_SjLj_Register	src/Unwind-sjlj.c	/^_Unwind_SjLj_Register(struct _Unwind_FunctionContext *fc) {$/;"	f
_Unwind_SjLj_Resume	src/Unwind-sjlj.c	/^_Unwind_SjLj_Resume(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_SjLj_Resume_or_Rethrow	src/Unwind-sjlj.c	/^_Unwind_SjLj_Resume_or_Rethrow(struct _Unwind_Exception *exception_object) {$/;"	f
_Unwind_SjLj_Unregister	src/Unwind-sjlj.c	/^_Unwind_SjLj_Unregister(struct _Unwind_FunctionContext *fc) {$/;"	f
_Unwind_State	include/unwind_arm_ehabi.h	/^typedef uint32_t _Unwind_State;$/;"	t
_Unwind_Stop_Fn	include/unwind.h	/^typedef _Unwind_Reason_Code (*_Unwind_Stop_Fn)$/;"	t
_Unwind_Trace_Fn	include/unwind.h	/^typedef _Unwind_Reason_Code (*_Unwind_Trace_Fn)(struct _Unwind_Context *,$/;"	t
_Unwind_VRS_DataRepresentation	include/unwind_arm_ehabi.h	/^} _Unwind_VRS_DataRepresentation;$/;"	t	typeref:enum:__anon24
_Unwind_VRS_Get	src/Unwind-EHABI.cpp	/^_Unwind_VRS_Get(_Unwind_Context *context, _Unwind_VRS_RegClass regclass,$/;"	f
_Unwind_VRS_Get_Internal	src/Unwind-EHABI.cpp	/^_Unwind_VRS_Get_Internal(_Unwind_Context *context,$/;"	f	file:
_Unwind_VRS_Interpret	src/Unwind-EHABI.cpp	/^_Unwind_VRS_Interpret(_Unwind_Context *context, const uint32_t *data,$/;"	f
_Unwind_VRS_Pop	src/Unwind-EHABI.cpp	/^_Unwind_VRS_Pop(_Unwind_Context *context, _Unwind_VRS_RegClass regclass,$/;"	f
_Unwind_VRS_RegClass	include/unwind_arm_ehabi.h	/^} _Unwind_VRS_RegClass;$/;"	t	typeref:enum:__anon23
_Unwind_VRS_Result	include/unwind_arm_ehabi.h	/^} _Unwind_VRS_Result;$/;"	t	typeref:enum:__anon25
_Unwind_VRS_Set	src/Unwind-EHABI.cpp	/^_Unwind_VRS_Set(_Unwind_Context *context, _Unwind_VRS_RegClass regclass,$/;"	f
__ADDRESSSPACE_HPP__	src/AddressSpace.hpp	13;"	d
__ARM_ARCH	src/assembly.h	270;"	d
__ARM_EHABI_UNWIND_H__	include/unwind_arm_ehabi.h	14;"	d
__COMPACT_UNWINDER_HPP__	src/CompactUnwinder.hpp	13;"	d
__COMPACT_UNWIND_ENCODING__	include/mach-o/compact_unwind_encoding.h	14;"	d
__DWARF2__	src/dwarf2.h	17;"	d
__DWARF_INSTRUCTIONS_HPP__	src/DwarfInstructions.hpp	13;"	d
__DWARF_PARSER_HPP__	src/DwarfParser.hpp	13;"	d
__EHHEADERPARSER_HPP__	src/EHHeaderParser.hpp	13;"	d
__FRAMEHEADER_CACHE_HPP__	src/FrameHeaderCache.hpp	13;"	d
__ITANIUM_UNWIND_H__	include/unwind_itanium.h	14;"	d
__LIBUNWIND_EXT__	src/libunwind_ext.h	13;"	d
__LIBUNWIND__	include/libunwind.h	14;"	d
__REGISTERS_HPP__	src/Registers.hpp	13;"	d
__RWMUTEX_HPP__	src/RWMutex.hpp	14;"	d
__UNWINDCURSOR_HPP__	src/UnwindCursor.hpp	12;"	d
__UNWIND_EHABI_H__	src/Unwind-EHABI.h	11;"	d
__UNWIND_H__	include/unwind.h	14;"	d
__Unwind_SjLj_GetTopOfFunctionStack	src/Unwind-sjlj.c	/^static struct _Unwind_FunctionContext *__Unwind_SjLj_GetTopOfFunctionStack() {$/;"	f	file:
__Unwind_SjLj_SetTopOfFunctionStack	src/Unwind-sjlj.c	/^__Unwind_SjLj_SetTopOfFunctionStack(struct _Unwind_FunctionContext *fc) {$/;"	f	file:
____LIBUNWIND_CONFIG_H__	include/__libunwind_config.h	10;"	d
__aeabi_unwind_cpp_pr0	src/Unwind-EHABI.cpp	/^__aeabi_unwind_cpp_pr0(_Unwind_State state, _Unwind_Control_Block *ucbp,$/;"	f
__aeabi_unwind_cpp_pr1	src/Unwind-EHABI.cpp	/^__aeabi_unwind_cpp_pr1(_Unwind_State state, _Unwind_Control_Block *ucbp,$/;"	f
__aeabi_unwind_cpp_pr2	src/Unwind-EHABI.cpp	/^__aeabi_unwind_cpp_pr2(_Unwind_State state, _Unwind_Control_Block *ucbp,$/;"	f
__cr	src/Registers.hpp	/^    uint64_t __cr;      \/\/ Condition register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__cr	src/Registers.hpp	/^    unsigned int __cr;     \/* Condition register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__cs	src/Registers.hpp	/^    uint64_t __cs;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__cs	src/Registers.hpp	/^    unsigned int __cs;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ctr	src/Registers.hpp	/^    uint64_t __ctr;     \/\/ Count register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__ctr	src/Registers.hpp	/^    unsigned int __ctr;    \/* Count register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__deregister_frame	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __deregister_frame(const void *fde) {$/;"	f
__deregister_frame_info	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void *__deregister_frame_info(const void *fde) {$/;"	f
__deregister_frame_info_bases	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void *__deregister_frame_info_bases(const void *fde) {$/;"	f
__ds	src/Registers.hpp	/^    unsigned int __ds;$/;"	m	struct:libunwind::Registers_x86::GPRs
__eax	src/Registers.hpp	/^    unsigned int __eax;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ebp	src/Registers.hpp	/^    unsigned int __ebp;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ebx	src/Registers.hpp	/^    unsigned int __ebx;$/;"	m	struct:libunwind::Registers_x86::GPRs
__ecx	src/Registers.hpp	/^    unsigned int __ecx;$/;"	m	struct:libunwind::Registers_x86::GPRs
__edi	src/Registers.hpp	/^    unsigned int __edi;$/;"	m	struct:libunwind::Registers_x86::GPRs
__edx	src/Registers.hpp	/^    unsigned int __edx;$/;"	m	struct:libunwind::Registers_x86::GPRs
__eflags	src/Registers.hpp	/^    unsigned int __eflags;$/;"	m	struct:libunwind::Registers_x86::GPRs
__eip	src/Registers.hpp	/^    unsigned int __eip;$/;"	m	struct:libunwind::Registers_x86::GPRs
__epcr	src/Registers.hpp	/^    unsigned int __epcr;  \/\/ Program counter at exception$/;"	m	struct:libunwind::Registers_or1k::or1k_thread_state_t
__es	src/Registers.hpp	/^    unsigned int __es;$/;"	m	struct:libunwind::Registers_x86::GPRs
__esi	src/Registers.hpp	/^    unsigned int __esi;$/;"	m	struct:libunwind::Registers_x86::GPRs
__esp	src/Registers.hpp	/^    unsigned int __esp;$/;"	m	struct:libunwind::Registers_x86::GPRs
__fp	src/Registers.hpp	/^    uint64_t __fp;    \/\/ Frame pointer x29$/;"	m	struct:libunwind::Registers_arm64::GPRs
__fpr	src/Registers.hpp	/^    double __fpr[16];   \/\/ Floating-Point Registers$/;"	m	struct:libunwind::Registers_s390x::s390x_thread_state_t
__fpregs	src/Registers.hpp	/^    double __fpregs[32];$/;"	m	struct:libunwind::Registers_ppc::ppc_float_state_t
__fpscr	src/Registers.hpp	/^    unsigned int __fpscr;     \/* floating point status register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_float_state_t
__fpscr_pad	src/Registers.hpp	/^    unsigned int __fpscr_pad; \/* fpscr is 64 bits, 32 bits of rubbish *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_float_state_t
__fs	src/Registers.hpp	/^    uint64_t __fs;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__fs	src/Registers.hpp	/^    unsigned int __fs;$/;"	m	struct:libunwind::Registers_x86::GPRs
__gnu_unwind_frame	src/Unwind-EHABI.cpp	/^__gnu_unwind_frame(_Unwind_Exception *exception_object,$/;"	f
__gpr	src/Registers.hpp	/^    uint64_t __gpr[16]; \/\/ General Purpose Registers$/;"	m	struct:libunwind::Registers_s390x::s390x_thread_state_t
__gs	src/Registers.hpp	/^    uint64_t __gs;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__gs	src/Registers.hpp	/^    unsigned int __gs;$/;"	m	struct:libunwind::Registers_x86::GPRs
__has_feature	src/libunwind.cpp	22;"	d	file:
__hi	src/Registers.hpp	/^    uint32_t __hi;$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__hi	src/Registers.hpp	/^    uint64_t __hi;$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__ic	src/Registers.hpp	/^    uint64_t __ic;    \/\/ Instruction counter (IC)$/;"	m	struct:libunwind::Registers_ve::ve_thread_state_t
__init__	test/libunwind/test/config.py	/^    def __init__(self, lit_config, config):$/;"	m	class:Configuration
__libunwind_cet_get_jump_target	src/Registers.hpp	/^extern "C" void *__libunwind_cet_get_jump_target() {$/;"	f	namespace:libunwind
__libunwind_cet_get_registers	src/UnwindCursor.hpp	/^extern "C" void *__libunwind_cet_get_registers(unw_cursor_t *cursor) {$/;"	f	namespace:libunwind
__libunwind_seh_personality	src/Unwind-seh.cpp	/^__libunwind_seh_personality(int version, _Unwind_Action state,$/;"	f
__lo	src/Registers.hpp	/^    uint32_t __lo;$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__lo	src/Registers.hpp	/^    uint64_t __lo;$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__lr	src/Registers.hpp	/^    uint32_t __lr;    \/\/ Link register r14$/;"	m	struct:libunwind::Registers_arm::GPRs
__lr	src/Registers.hpp	/^    uint64_t __lr;      \/\/ Link register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__lr	src/Registers.hpp	/^    uint64_t __lr;    \/\/ Link register x30$/;"	m	struct:libunwind::Registers_arm64::GPRs
__lr	src/Registers.hpp	/^    unsigned int __lr;     \/* Link register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__mq	src/Registers.hpp	/^    unsigned int __mq;     \/* MQ register (601 only) *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__pac	src/Registers.hpp	/^    uint32_t __pac; \/\/ Return Authentication Code (PAC)$/;"	m	struct:libunwind::Registers_arm::PseudoRegisters
__padding	src/Registers.hpp	/^    uint64_t __padding; \/\/ 16-byte align$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__pc	src/Registers.hpp	/^    uint32_t __pc;    \/\/ Program counter r15$/;"	m	struct:libunwind::Registers_arm::GPRs
__pc	src/Registers.hpp	/^    uint32_t __pc;$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__pc	src/Registers.hpp	/^    uint64_t __pc;    \/\/ Program counter$/;"	m	struct:libunwind::Registers_arm64::GPRs
__pc	src/Registers.hpp	/^    uint64_t __pc;$/;"	m	struct:libunwind::Registers_loongarch::loongarch_thread_state_t
__pc	src/Registers.hpp	/^    uint64_t __pc;$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__pc	src/Registers.hpp	/^    unsigned int __pc;    \/\/ Program counter$/;"	m	struct:libunwind::Registers_or1k::or1k_thread_state_t
__pswa	src/Registers.hpp	/^    uint64_t __pswa;    \/\/ Problem Status Word: Address (PC)$/;"	m	struct:libunwind::Registers_s390x::s390x_thread_state_t
__pswm	src/Registers.hpp	/^    uint64_t __pswm;    \/\/ Problem Status Word: Mask$/;"	m	struct:libunwind::Registers_s390x::s390x_thread_state_t
__r	src/Registers.hpp	/^    uint32_t __r[13]; \/\/ r0-r12$/;"	m	struct:libunwind::Registers_arm::GPRs
__r	src/Registers.hpp	/^    uint32_t __r[32];$/;"	m	struct:libunwind::Registers_mips_o32::mips_o32_thread_state_t
__r	src/Registers.hpp	/^    uint64_t __r[32];$/;"	m	struct:libunwind::Registers_loongarch::loongarch_thread_state_t
__r	src/Registers.hpp	/^    uint64_t __r[32];$/;"	m	struct:libunwind::Registers_mips_newabi::mips_newabi_thread_state_t
__r	src/Registers.hpp	/^    unsigned int __r[32]; \/\/ r0-r31$/;"	m	struct:libunwind::Registers_or1k::or1k_thread_state_t
__r	src/Registers.hpp	/^    unsigned int __r[35];$/;"	m	struct:libunwind::Registers_hexagon::hexagon_thread_state_t
__r0	src/Registers.hpp	/^    uint64_t __r0;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r0	src/Registers.hpp	/^    unsigned int __r0;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r1	src/Registers.hpp	/^    uint64_t __r1;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r1	src/Registers.hpp	/^    unsigned int __r1;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r10	src/Registers.hpp	/^    uint64_t __r10;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r10	src/Registers.hpp	/^    uint64_t __r10;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r10	src/Registers.hpp	/^    unsigned int __r10;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r11	src/Registers.hpp	/^    uint64_t __r11;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r11	src/Registers.hpp	/^    uint64_t __r11;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r11	src/Registers.hpp	/^    unsigned int __r11;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r12	src/Registers.hpp	/^    uint64_t __r12;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r12	src/Registers.hpp	/^    uint64_t __r12;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r12	src/Registers.hpp	/^    unsigned int __r12;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r13	src/Registers.hpp	/^    uint64_t __r13;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r13	src/Registers.hpp	/^    uint64_t __r13;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r13	src/Registers.hpp	/^    unsigned int __r13;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r14	src/Registers.hpp	/^    uint64_t __r14;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r14	src/Registers.hpp	/^    uint64_t __r14;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r14	src/Registers.hpp	/^    unsigned int __r14;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r15	src/Registers.hpp	/^    uint64_t __r15;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r15	src/Registers.hpp	/^    uint64_t __r15;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r15	src/Registers.hpp	/^    unsigned int __r15;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r16	src/Registers.hpp	/^    uint64_t __r16;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r16	src/Registers.hpp	/^    unsigned int __r16;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r17	src/Registers.hpp	/^    uint64_t __r17;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r17	src/Registers.hpp	/^    unsigned int __r17;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r18	src/Registers.hpp	/^    uint64_t __r18;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r18	src/Registers.hpp	/^    unsigned int __r18;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r19	src/Registers.hpp	/^    uint64_t __r19;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r19	src/Registers.hpp	/^    unsigned int __r19;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r2	src/Registers.hpp	/^    uint64_t __r2;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r2	src/Registers.hpp	/^    unsigned int __r2;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r20	src/Registers.hpp	/^    uint64_t __r20;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r20	src/Registers.hpp	/^    unsigned int __r20;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r21	src/Registers.hpp	/^    uint64_t __r21;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r21	src/Registers.hpp	/^    unsigned int __r21;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r22	src/Registers.hpp	/^    uint64_t __r22;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r22	src/Registers.hpp	/^    unsigned int __r22;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r23	src/Registers.hpp	/^    uint64_t __r23;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r23	src/Registers.hpp	/^    unsigned int __r23;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r24	src/Registers.hpp	/^    uint64_t __r24;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r24	src/Registers.hpp	/^    unsigned int __r24;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r25	src/Registers.hpp	/^    uint64_t __r25;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r25	src/Registers.hpp	/^    unsigned int __r25;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r26	src/Registers.hpp	/^    uint64_t __r26;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r26	src/Registers.hpp	/^    unsigned int __r26;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r27	src/Registers.hpp	/^    uint64_t __r27;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r27	src/Registers.hpp	/^    unsigned int __r27;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r28	src/Registers.hpp	/^    uint64_t __r28;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r28	src/Registers.hpp	/^    unsigned int __r28;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r29	src/Registers.hpp	/^    uint64_t __r29;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r29	src/Registers.hpp	/^    unsigned int __r29;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r3	src/Registers.hpp	/^    uint64_t __r3;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r3	src/Registers.hpp	/^    unsigned int __r3;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r30	src/Registers.hpp	/^    uint64_t __r30;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r30	src/Registers.hpp	/^    unsigned int __r30;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r31	src/Registers.hpp	/^    uint64_t __r31;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r31	src/Registers.hpp	/^    unsigned int __r31;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r4	src/Registers.hpp	/^    uint64_t __r4;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r4	src/Registers.hpp	/^    unsigned int __r4;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r5	src/Registers.hpp	/^    uint64_t __r5;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r5	src/Registers.hpp	/^    unsigned int __r5;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r6	src/Registers.hpp	/^    uint64_t __r6;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r6	src/Registers.hpp	/^    unsigned int __r6;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r7	src/Registers.hpp	/^    uint64_t __r7;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r7	src/Registers.hpp	/^    unsigned int __r7;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r8	src/Registers.hpp	/^    uint64_t __r8;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r8	src/Registers.hpp	/^    uint64_t __r8;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r8	src/Registers.hpp	/^    unsigned int __r8;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__r9	src/Registers.hpp	/^    uint64_t __r9;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__r9	src/Registers.hpp	/^    uint64_t __r9;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__r9	src/Registers.hpp	/^    unsigned int __r9;$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__ra_sign_state	src/Registers.hpp	/^    uint64_t __ra_sign_state; \/\/ RA sign state register$/;"	m	struct:libunwind::Registers_arm64::GPRs
__rax	src/Registers.hpp	/^    uint64_t __rax;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rbp	src/Registers.hpp	/^    uint64_t __rbp;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rbx	src/Registers.hpp	/^    uint64_t __rbx;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rcx	src/Registers.hpp	/^    uint64_t __rcx;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rdi	src/Registers.hpp	/^    uint64_t __rdi;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rdx	src/Registers.hpp	/^    uint64_t __rdx;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__register_frame	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame(const void *fde) {$/;"	f
__register_frame_info	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info(const void *fde, void *ob) {$/;"	f
__register_frame_info_bases	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info_bases(const void *fde, void *ob,$/;"	f
__register_frame_info_table	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info_table(const void *fde, void *ob) {$/;"	f
__register_frame_info_table_bases	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_info_table_bases(const void *fde,$/;"	f
__register_frame_table	src/UnwindLevel1-gcc-ext.c	/^_LIBUNWIND_EXPORT void __register_frame_table(const void *fde) {$/;"	f
__regs	src/Registers.hpp	/^    uint64_t __regs[32];$/;"	m	struct:libunwind::Registers_sparc64::sparc64_thread_state_t
__regs	src/Registers.hpp	/^    unsigned int __regs[32];$/;"	m	struct:libunwind::Registers_sparc::sparc_thread_state_t
__rflags	src/Registers.hpp	/^    uint64_t __rflags;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rip	src/Registers.hpp	/^    uint64_t __rip;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__riscv_flen	src/Registers.hpp	4015;"	d
__riscv_xlen	src/Registers.hpp	4014;"	d
__rsi	src/Registers.hpp	/^    uint64_t __rsi;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__rsp	src/Registers.hpp	/^    uint64_t __rsp;$/;"	m	struct:libunwind::Registers_x86_64::GPRs
__s	src/Registers.hpp	/^    uint64_t __s[64]; \/\/ s0-s64$/;"	m	struct:libunwind::Registers_ve::ve_thread_state_t
__sp	src/Registers.hpp	/^    uint32_t __sp;    \/\/ Stack pointer r13$/;"	m	struct:libunwind::Registers_arm::GPRs
__sp	src/Registers.hpp	/^    uint64_t __sp;    \/\/ Stack pointer x31$/;"	m	struct:libunwind::Registers_arm64::GPRs
__srr0	src/Registers.hpp	/^    uint64_t __srr0;    \/\/ Instruction address register (PC)$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__srr0	src/Registers.hpp	/^    unsigned int __srr0; \/* Instruction address register (PC) *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__srr1	src/Registers.hpp	/^    uint64_t __srr1;    \/\/ Machine state register (supervisor)$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__srr1	src/Registers.hpp	/^    unsigned int __srr1; \/* Machine state register (supervisor) *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__ss	src/Registers.hpp	/^    unsigned int __ss;$/;"	m	struct:libunwind::Registers_x86::GPRs
__unw_add_dynamic_eh_frame_section	src/libunwind.cpp	/^void __unw_add_dynamic_eh_frame_section(unw_word_t eh_frame_start) {$/;"	f
__unw_add_dynamic_fde	src/libunwind.cpp	/^void __unw_add_dynamic_fde(unw_word_t fde) {$/;"	f
__unw_get_data_rel_base	src/libunwind.cpp	/^_LIBUNWIND_EXPORT uintptr_t __unw_get_data_rel_base(unw_cursor_t *cursor) {$/;"	f
__unw_get_fpreg	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_get_fpreg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
__unw_get_proc_info	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_get_proc_info(unw_cursor_t *cursor,$/;"	f
__unw_get_proc_name	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_get_proc_name(unw_cursor_t *cursor, char *buf,$/;"	f
__unw_get_reg	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_get_reg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
__unw_init_local	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_init_local(unw_cursor_t *cursor,$/;"	f
__unw_init_seh	src/Unwind-seh.cpp	/^static int __unw_init_seh(unw_cursor_t *cursor, CONTEXT *context) {$/;"	f	file:
__unw_is_fpreg	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_is_fpreg(unw_cursor_t *cursor,$/;"	f
__unw_is_signal_frame	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_is_signal_frame(unw_cursor_t *cursor) {$/;"	f
__unw_iterate_dwarf_unwind_cache	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN void __unw_iterate_dwarf_unwind_cache(void (*func)($/;"	f
__unw_phase2_resume	src/UnwindLevel1.c	47;"	d	file:
__unw_phase2_resume	src/UnwindLevel1.c	53;"	d	file:
__unw_phase2_resume	src/UnwindLevel1.c	64;"	d	file:
__unw_regname	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN const char *__unw_regname(unw_cursor_t *cursor,$/;"	f
__unw_remove_dynamic_eh_frame_section	src/libunwind.cpp	/^void __unw_remove_dynamic_eh_frame_section(unw_word_t eh_frame_start) {$/;"	f
__unw_remove_dynamic_fde	src/libunwind.cpp	/^void __unw_remove_dynamic_fde(unw_word_t fde) {$/;"	f
__unw_resume	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_resume(unw_cursor_t *cursor) {$/;"	f
__unw_save_vfp_as_X	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN void __unw_save_vfp_as_X(unw_cursor_t *cursor) {$/;"	f
__unw_seh_get_disp_ctx	src/Unwind-seh.cpp	/^static DISPATCHER_CONTEXT *__unw_seh_get_disp_ctx(unw_cursor_t *cursor) {$/;"	f	file:
__unw_seh_set_disp_ctx	src/Unwind-seh.cpp	/^static void __unw_seh_set_disp_ctx(unw_cursor_t *cursor,$/;"	f	file:
__unw_set_fpreg	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_set_fpreg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
__unw_set_reg	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_set_reg(unw_cursor_t *cursor, unw_regnum_t regNum,$/;"	f
__unw_step	src/libunwind.cpp	/^_LIBUNWIND_HIDDEN int __unw_step(unw_cursor_t *cursor) {$/;"	f
__vixr	src/Registers.hpp	/^    uint64_t __vixr;  \/\/ Vector Index Register$/;"	m	struct:libunwind::Registers_ve::ve_thread_state_t
__vl	src/Registers.hpp	/^    uint64_t __vl;    \/\/ Vector Length Register$/;"	m	struct:libunwind::Registers_ve::ve_thread_state_t
__vrsave	src/Registers.hpp	/^    uint64_t __vrsave;  \/\/ Vector Save Register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__vrsave	src/Registers.hpp	/^    unsigned int __vrsave; \/* Vector Save Register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__x	src/Registers.hpp	/^    uint64_t __x[29]; \/\/ x0-x28$/;"	m	struct:libunwind::Registers_arm64::GPRs
__xer	src/Registers.hpp	/^    uint64_t __xer;     \/\/ User's integer exception register$/;"	m	struct:libunwind::Registers_ppc64::ppc64_thread_state_t
__xer	src/Registers.hpp	/^    unsigned int __xer;    \/* User's integer exception register *\/$/;"	m	struct:libunwind::Registers_ppc::ppc_thread_state_t
__xlcxx_personality_v0	src/UnwindCursor.hpp	/^__attribute__((__weak__)) __xlcxx_personality_v0_t __xlcxx_personality_v0;$/;"	v
__xlcxx_personality_v0_t	src/UnwindCursor.hpp	/^typedef _Unwind_Reason_Code __xlcxx_personality_v0_t(int, _Unwind_Action,$/;"	t
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t     _addr;$/;"	m	class:libunwind::UnwindSectionHeader
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t   _addr;$/;"	m	class:libunwind::UnwindSectionIndexArray
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t   _addr;$/;"	m	class:libunwind::UnwindSectionLsdaArray
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionCompressedArray
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionCompressedPageHeader
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionRegularArray
_addr	src/UnwindCursor.hpp	/^  typename A::pint_t _addr;$/;"	m	class:libunwind::UnwindSectionRegularPageHeader
_addressSpace	src/UnwindCursor.hpp	/^  A                     &_addressSpace;$/;"	m	class:libunwind::UnwindSectionHeader
_addressSpace	src/UnwindCursor.hpp	/^  A                   &_addressSpace;$/;"	m	class:libunwind::UnwindCursor
_addressSpace	src/UnwindCursor.hpp	/^  A                   &_addressSpace;$/;"	m	class:libunwind::UnwindSectionIndexArray
_addressSpace	src/UnwindCursor.hpp	/^  A                   &_addressSpace;$/;"	m	class:libunwind::UnwindSectionLsdaArray
_addressSpace	src/UnwindCursor.hpp	/^  A               &_addressSpace;$/;"	m	class:libunwind::UnwindCursor
_addressSpace	src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionCompressedArray
_addressSpace	src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionCompressedPageHeader
_addressSpace	src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionRegularArray
_addressSpace	src/UnwindCursor.hpp	/^  A &_addressSpace;$/;"	m	class:libunwind::UnwindSectionRegularPageHeader
_addressSpace	src/UnwindCursor.hpp	/^  A* _addressSpace;$/;"	m	struct:libunwind::EHABISectionIterator
_buffer	src/UnwindCursor.hpp	/^  static entry *_buffer;$/;"	m	class:libunwind::DwarfFDECache
_buffer	src/UnwindCursor.hpp	/^DwarfFDECache<A>::_buffer = _initialBuffer;$/;"	m	class:libunwind::DwarfFDECache
_bufferEnd	src/UnwindCursor.hpp	/^  static entry *_bufferEnd;$/;"	m	class:libunwind::DwarfFDECache
_bufferEnd	src/UnwindCursor.hpp	/^DwarfFDECache<A>::_bufferEnd = &_initialBuffer[64];$/;"	m	class:libunwind::DwarfFDECache
_bufferUsed	src/UnwindCursor.hpp	/^  static entry *_bufferUsed;$/;"	m	class:libunwind::DwarfFDECache
_bufferUsed	src/UnwindCursor.hpp	/^DwarfFDECache<A>::_bufferUsed = _initialBuffer;$/;"	m	class:libunwind::DwarfFDECache
_dispContext	src/UnwindCursor.hpp	/^  DISPATCHER_CONTEXT   _dispContext;$/;"	m	class:libunwind::UnwindCursor
_floatRegisters	src/Registers.hpp	/^  ppc_float_state_t  _floatRegisters;$/;"	m	class:libunwind::Registers_ppc
_floats	src/Registers.hpp	/^  double _floats[32];$/;"	m	class:libunwind::Registers_loongarch
_floats	src/Registers.hpp	/^  double _floats[32];$/;"	m	class:libunwind::Registers_mips_newabi
_floats	src/Registers.hpp	/^  double _floats[32];$/;"	m	class:libunwind::Registers_mips_o32
_floats	src/Registers.hpp	/^  fp_t _floats[32];$/;"	m	class:libunwind::Registers_riscv
_histTable	src/UnwindCursor.hpp	/^  UNWIND_HISTORY_TABLE _histTable;$/;"	m	class:libunwind::UnwindCursor
_i	src/UnwindCursor.hpp	/^  size_t _i;$/;"	m	struct:libunwind::EHABISectionIterator
_info	src/UnwindCursor.hpp	/^  unw_proc_info_t      _info;$/;"	m	class:libunwind::UnwindCursor
_info	src/UnwindCursor.hpp	/^  unw_proc_info_t  _info;$/;"	m	class:libunwind::UnwindCursor
_initialBuffer	src/UnwindCursor.hpp	/^  static entry _initialBuffer[64];$/;"	m	class:libunwind::DwarfFDECache
_initialBuffer	src/UnwindCursor.hpp	/^typename DwarfFDECache<A>::entry DwarfFDECache<A>::_initialBuffer[64];$/;"	m	class:libunwind::DwarfFDECache
_isSigReturn	src/UnwindCursor.hpp	/^  bool             _isSigReturn = false;$/;"	m	class:libunwind::UnwindCursor
_isSignalFrame	src/UnwindCursor.hpp	/^  bool             _isSignalFrame;$/;"	m	class:libunwind::UnwindCursor
_iwmmx	src/Registers.hpp	/^  unw_fpreg_t _iwmmx[16];$/;"	m	class:libunwind::Registers_arm
_iwmmx_control	src/Registers.hpp	/^  mutable uint32_t _iwmmx_control[4];$/;"	m	class:libunwind::Registers_arm
_lock	src/UnwindCursor.hpp	/^  static RWMutex _lock;$/;"	m	class:libunwind::DwarfFDECache
_lock	src/UnwindCursor.hpp	/^RWMutex DwarfFDECache<A>::_lock;$/;"	m	class:libunwind::DwarfFDECache
_msContext	src/UnwindCursor.hpp	/^  CONTEXT              _msContext;$/;"	m	class:libunwind::UnwindCursor
_padding	src/Registers.hpp	/^  uint32_t _padding;$/;"	m	class:libunwind::Registers_mips_o32
_pseudo_registers	src/Registers.hpp	/^  PseudoRegisters _pseudo_registers;$/;"	m	class:libunwind::Registers_arm
_registeredForDyldUnloads	src/UnwindCursor.hpp	/^  static bool _registeredForDyldUnloads;$/;"	m	class:libunwind::DwarfFDECache
_registeredForDyldUnloads	src/UnwindCursor.hpp	/^bool DwarfFDECache<A>::_registeredForDyldUnloads = false;$/;"	m	class:libunwind::DwarfFDECache
_registers	src/Registers.hpp	/^  GPRs    _registers;$/;"	m	class:libunwind::Registers_arm64
_registers	src/Registers.hpp	/^  GPRs _registers;$/;"	m	class:libunwind::Registers_arm
_registers	src/Registers.hpp	/^  GPRs _registers;$/;"	m	class:libunwind::Registers_x86
_registers	src/Registers.hpp	/^  GPRs _registers;$/;"	m	class:libunwind::Registers_x86_64
_registers	src/Registers.hpp	/^  hexagon_thread_state_t _registers;$/;"	m	class:libunwind::Registers_hexagon
_registers	src/Registers.hpp	/^  loongarch_thread_state_t _registers;$/;"	m	class:libunwind::Registers_loongarch
_registers	src/Registers.hpp	/^  mips_newabi_thread_state_t _registers;$/;"	m	class:libunwind::Registers_mips_newabi
_registers	src/Registers.hpp	/^  mips_o32_thread_state_t _registers;$/;"	m	class:libunwind::Registers_mips_o32
_registers	src/Registers.hpp	/^  or1k_thread_state_t _registers;$/;"	m	class:libunwind::Registers_or1k
_registers	src/Registers.hpp	/^  ppc64_thread_state_t _registers;$/;"	m	class:libunwind::Registers_ppc64
_registers	src/Registers.hpp	/^  ppc_thread_state_t _registers;$/;"	m	class:libunwind::Registers_ppc
_registers	src/Registers.hpp	/^  reg_t _registers[32];$/;"	m	class:libunwind::Registers_riscv
_registers	src/Registers.hpp	/^  s390x_thread_state_t _registers;$/;"	m	class:libunwind::Registers_s390x
_registers	src/Registers.hpp	/^  sparc_thread_state_t _registers;$/;"	m	class:libunwind::Registers_sparc
_registers	src/Registers.hpp	/^  ve_thread_state_t _registers; \/\/ total 67 registers$/;"	m	class:libunwind::Registers_ve
_registers	src/UnwindCursor.hpp	/^  R                _registers;$/;"	m	class:libunwind::UnwindCursor
_saved_iwmmx	src/Registers.hpp	/^  bool _saved_iwmmx;$/;"	m	class:libunwind::Registers_arm
_saved_iwmmx_control	src/Registers.hpp	/^  mutable bool _saved_iwmmx_control;$/;"	m	class:libunwind::Registers_arm
_saved_vfp_d0_d15	src/Registers.hpp	/^  bool _saved_vfp_d0_d15;$/;"	m	class:libunwind::Registers_arm
_saved_vfp_d16_d31	src/Registers.hpp	/^  bool _saved_vfp_d16_d31;$/;"	m	class:libunwind::Registers_arm
_sects	src/UnwindCursor.hpp	/^  const UnwindInfoSections* _sects;$/;"	m	struct:libunwind::EHABISectionIterator
_unwindInfoMissing	src/UnwindCursor.hpp	/^  bool                 _unwindInfoMissing;$/;"	m	class:libunwind::UnwindCursor
_unwindInfoMissing	src/UnwindCursor.hpp	/^  bool             _unwindInfoMissing;$/;"	m	class:libunwind::UnwindCursor
_use_X_for_vfp_save	src/Registers.hpp	/^  bool _use_X_for_vfp_save;$/;"	m	class:libunwind::Registers_arm
_vectorHalfRegisters	src/Registers.hpp	/^  double  _vectorHalfRegisters[32];$/;"	m	class:libunwind::Registers_arm64
_vectorRegisters	src/Registers.hpp	/^  v128               _vectorRegisters[32]; \/\/ offset 424$/;"	m	class:libunwind::Registers_ppc
_vectorScalarRegisters	src/Registers.hpp	/^  ppc64_vsr_t          _vectorScalarRegisters[64];$/;"	m	class:libunwind::Registers_ppc64
_vfp_d0_d15_pad	src/Registers.hpp	/^  unw_fpreg_t _vfp_d0_d15_pad[17];$/;"	m	class:libunwind::Registers_arm
_vfp_d16_d31	src/Registers.hpp	/^  unw_fpreg_t _vfp_d16_d31[16];$/;"	m	class:libunwind::Registers_arm
_wcookie	src/Registers.hpp	/^  uint64_t _wcookie = 0;$/;"	m	class:libunwind::Registers_sparc64
_xmm	src/Registers.hpp	/^  v128 _xmm[16];$/;"	m	class:libunwind::Registers_x86_64
add	src/FrameHeaderCache.hpp	/^  void add(const UnwindInfoSections *UIS) {$/;"	f	class:FrameHeaderCache
add	src/UnwindCursor.hpp	/^void DwarfFDECache<A>::add(pint_t mh, pint_t ip_start, pint_t ip_end,$/;"	f	class:libunwind::DwarfFDECache
additional	include/unwind_arm_ehabi.h	/^    uint32_t additional;$/;"	m	struct:_Unwind_Control_Block::__anon22
addressSpace	src/AddressSpace.hpp	/^  LocalAddressSpace *addressSpace;$/;"	m	struct:libunwind::dl_iterate_cb_data
addressesSignedWithBKey	src/DwarfParser.hpp	/^    bool      addressesSignedWithBKey;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
alignof	test/alignment.compile.pass.cpp	/^static_assert(alignof(_Unwind_Exception) == alignof(MaxAligned),$/;"	v
arm_section	src/AddressSpace.hpp	/^  uintptr_t       arm_section;$/;"	m	struct:libunwind::UnwindInfoSections
arm_section_length	src/AddressSpace.hpp	/^  size_t          arm_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
arrayoffsetof	src/UnwindCursor.hpp	233;"	d
asfloat	src/Registers.hpp	/^    } asfloat;$/;"	m	union:libunwind::Registers_ppc64::ppc64_vsr_t	typeref:struct:libunwind::Registers_ppc64::ppc64_vsr_t::asfloat_s
asfloat_s	src/Registers.hpp	/^    struct asfloat_s {$/;"	s	union:libunwind::Registers_ppc64::ppc64_vsr_t
backtrace	test/libunwind_01.pass.cpp	/^void backtrace(int lower_bound) {$/;"	f
bad_unwind_info	test/bad_unwind_info.pass.cpp	/^__attribute__((naked)) void bad_unwind_info() {$/;"	f
barrier_cache	include/unwind_arm_ehabi.h	/^  } barrier_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon20
begin	src/UnwindCursor.hpp	/^  static _Self begin(A& addressSpace, const UnwindInfoSections& sects) {$/;"	f	struct:libunwind::EHABISectionIterator
bitpattern	include/unwind_arm_ehabi.h	/^    uint32_t bitpattern[4];$/;"	m	struct:_Unwind_Control_Block::__anon21
bitpattern	include/unwind_arm_ehabi.h	/^    uint32_t bitpattern[5];$/;"	m	struct:_Unwind_Control_Block::__anon20
blk_count	src/config.h	/^  struct blk_count {$/;"	s	struct:check_fit
c4	src/UnwindRegistersRestore.S	/^  c4 = r1   \/\/ Predicate register$/;"	d
cacheNeedsReset	src/FrameHeaderCache.hpp	/^  bool cacheNeedsReset(dl_phdr_info *PInfo) {$/;"	f	class:FrameHeaderCache
calculateImageBase	src/AddressSpace.hpp	/^static Elf_Addr calculateImageBase(struct dl_phdr_info *pinfo) {$/;"	f	namespace:libunwind
callback	test/libunwind_02.pass.cpp	/^_Unwind_Reason_Code callback(_Unwind_Context *context, void *cnt) {$/;"	f
callback	test/remember_state_leak.pass.sh.s	/^callback:$/;"	l
cfaExpression	src/DwarfParser.hpp	/^    int64_t           cfaExpression;      \/\/ CFA = expression$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
cfaRegister	src/DwarfParser.hpp	/^    uint32_t          cfaRegister;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
cfaRegisterOffset	src/DwarfParser.hpp	/^    int32_t           cfaRegisterOffset;  \/\/ CFA = (cfaRegister)+cfaRegisterOffset$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
checkAddrInSegment	src/AddressSpace.hpp	/^static bool checkAddrInSegment(const Elf_Phdr *phdr, size_t image_base,$/;"	f	namespace:libunwind
checkForUnwindInfoSegment	src/AddressSpace.hpp	/^static bool checkForUnwindInfoSegment(const Elf_Phdr *phdr, size_t image_base,$/;"	f	namespace:libunwind
checkSaveRegister	src/DwarfParser.hpp	/^    void checkSaveRegister(uint64_t reg, PrologInfo &initialState) {$/;"	f	struct:libunwind::CFI_Parser::PrologInfo
check_fit	src/config.h	/^struct check_fit {$/;"	s
cieInstructions	src/DwarfParser.hpp	/^    pint_t    cieInstructions;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
cieLength	src/DwarfParser.hpp	/^    pint_t    cieLength;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
cieStart	src/DwarfParser.hpp	/^    pint_t    cieStart;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
cleanup_cache	include/unwind_arm_ehabi.h	/^  } cleanup_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon21
codeAlignFactor	src/DwarfParser.hpp	/^    uint32_t  codeAlignFactor;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
commonEncodingsArrayCount	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    commonEncodingsArrayCount;$/;"	m	struct:unwind_info_section_header
commonEncodingsArrayCount	src/UnwindCursor.hpp	/^  uint32_t commonEncodingsArrayCount() const {$/;"	f	class:libunwind::UnwindSectionHeader
commonEncodingsArraySectionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    commonEncodingsArraySectionOffset;$/;"	m	struct:unwind_info_section_header
commonEncodingsArraySectionOffset	src/UnwindCursor.hpp	/^  uint32_t commonEncodingsArraySectionOffset() const {$/;"	f	class:libunwind::UnwindSectionHeader
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_arm64 &, uint32_t *offset) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_loongarch &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_mips_newabi &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_mips_o32 &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_ppc &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_ppc64 &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_riscv &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_sparc &, uint32_t *) const { return true; }$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_sparc64 &, uint32_t *) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_x86 &, uint32_t *offset) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(Registers_x86_64 &, uint32_t *offset) const {$/;"	f	class:libunwind::UnwindCursor
compactSaysUseDwarf	src/UnwindCursor.hpp	/^  bool compactSaysUseDwarf(uint32_t *offset=NULL) const {$/;"	f	class:libunwind::UnwindCursor
compact_unwind_encoding_t	include/mach-o/compact_unwind_encoding.h	/^typedef uint32_t compact_unwind_encoding_t;$/;"	t
compact_unwind_section	src/AddressSpace.hpp	/^    const void*                 compact_unwind_section;$/;"	m	struct:dyld_unwind_sections
compact_unwind_section	src/AddressSpace.hpp	/^  uintptr_t       compact_unwind_section;$/;"	m	struct:libunwind::UnwindInfoSections
compact_unwind_section_length	src/AddressSpace.hpp	/^    uintptr_t                   compact_unwind_section_length;$/;"	m	struct:dyld_unwind_sections
compact_unwind_section_length	src/AddressSpace.hpp	/^  size_t          compact_unwind_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
configure_compile_flags	test/libunwind/test/config.py	/^    def configure_compile_flags(self):$/;"	m	class:Configuration
configure_compile_flags_header_includes	test/libunwind/test/config.py	/^    def configure_compile_flags_header_includes(self):$/;"	m	class:Configuration
configure_features	test/libunwind/test/config.py	/^    def configure_features(self):$/;"	m	class:Configuration
configure_link_flags_abi_library	test/libunwind/test/config.py	/^    def configure_link_flags_abi_library(self):$/;"	m	class:Configuration
configure_link_flags_cxx_library	test/libunwind/test/config.py	/^    def configure_link_flags_cxx_library(self):$/;"	m	class:Configuration
configure_obj_root	test/libunwind/test/config.py	/^    def configure_obj_root(self):$/;"	m	class:Configuration
configure_src_root	test/libunwind/test/config.py	/^    def configure_src_root(self):$/;"	m	class:Configuration
copyright	docs/conf.py	/^copyright = u'2011-%d, LLVM Project' % date.today().year$/;"	v
count	src/config.h	/^    static const size_t count =$/;"	m	struct:check_fit::blk_count
crashing_leaf_func	test/unwind_leaffunction.pass.cpp	/^__attribute__((noinline)) void crashing_leaf_func(void) {$/;"	f
data	include/libunwind.h	/^  uint64_t data[_LIBUNWIND_CONTEXT_SIZE];$/;"	m	struct:unw_context_t
data	include/libunwind.h	/^  uint64_t data[_LIBUNWIND_CURSOR_SIZE];$/;"	m	struct:unw_cursor_t
data	src/AddressSpace.hpp	/^  uint32_t data;$/;"	m	struct:EHABIIndexEntry
dataAddress	src/UnwindCursor.hpp	/^  typename A::pint_t dataAddress() {$/;"	f	struct:libunwind::EHABISectionIterator
dataAlignFactor	src/DwarfParser.hpp	/^    int       dataAlignFactor;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
dbase	include/unwind.h	/^  uintptr_t dbase;$/;"	m	struct:dwarf_eh_bases
decltype	src/DwarfInstructions.hpp	/^auto getSparcWCookie(const R &r, int) -> decltype(r.getWCookie()) {$/;"	f	namespace:libunwind
decodeEHHdr	src/EHHeaderParser.hpp	/^bool EHHeaderParser<A>::decodeEHHdr(A &addressSpace, pint_t ehHdrStart,$/;"	f	class:libunwind::EHHeaderParser
decodeFDE	src/DwarfParser.hpp	/^const char *CFI_Parser<A>::decodeFDE(A &addressSpace, pint_t fdeStart,$/;"	f	class:libunwind::CFI_Parser
decodeTableEntry	src/EHHeaderParser.hpp	/^bool EHHeaderParser<A>::decodeTableEntry($/;"	f	class:libunwind::EHHeaderParser
decode_eht_entry	src/Unwind-EHABI.cpp	/^decode_eht_entry(const uint32_t* data, size_t* off, size_t* len) {$/;"	f
difference_type	src/UnwindCursor.hpp	/^  typedef size_t difference_type;$/;"	t	struct:libunwind::EHABISectionIterator
dl_iterate_cb_data	src/AddressSpace.hpp	/^struct _LIBUNWIND_HIDDEN dl_iterate_cb_data {$/;"	s	namespace:libunwind
does_fit	src/config.h	/^  static const bool does_fit =$/;"	m	struct:check_fit
dso_base	src/AddressSpace.hpp	/^  uintptr_t       dso_base;$/;"	m	struct:libunwind::UnwindInfoSections
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding() const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_arm &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_arm64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_hexagon &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_loongarch &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_mips_newabi &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_mips_o32 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_or1k &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_ppc &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_ppc64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_riscv &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_s390x &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_sparc &) const { return 0; }$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_sparc64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_x86 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarfEncoding	src/UnwindCursor.hpp	/^  compact_unwind_encoding_t dwarfEncoding(Registers_x86_64 &) const {$/;"	f	class:libunwind::UnwindCursor
dwarf_eh_bases	include/unwind.h	/^struct dwarf_eh_bases {$/;"	s
dwarf_index_section	src/AddressSpace.hpp	/^  uintptr_t       dwarf_index_section;$/;"	m	struct:libunwind::UnwindInfoSections
dwarf_index_section_length	src/AddressSpace.hpp	/^  size_t          dwarf_index_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
dwarf_section	src/AddressSpace.hpp	/^    const void*                 dwarf_section;$/;"	m	struct:dyld_unwind_sections
dwarf_section	src/AddressSpace.hpp	/^  uintptr_t       dwarf_section;$/;"	m	struct:libunwind::UnwindInfoSections
dwarf_section_length	src/AddressSpace.hpp	/^    uintptr_t                   dwarf_section_length;$/;"	m	struct:dyld_unwind_sections
dwarf_section_length	src/AddressSpace.hpp	/^  size_t          dwarf_section_length;$/;"	m	struct:libunwind::UnwindInfoSections
dyldUnloadHook	src/UnwindCursor.hpp	/^void DwarfFDECache<A>::dyldUnloadHook(const struct mach_header *mh, intptr_t ) {$/;"	f	class:libunwind::DwarfFDECache
dyld_unwind_sections	src/AddressSpace.hpp	/^  struct dyld_unwind_sections$/;"	s
eh_frame_ptr	src/EHHeaderParser.hpp	/^    pint_t eh_frame_ptr;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
ehtp	include/unwind_arm_ehabi.h	/^    _Unwind_EHT_Header* ehtp; \/* pointer to EHT entry header word *\/$/;"	m	struct:_Unwind_Control_Block::__anon22
encoding	include/mach-o/compact_unwind_encoding.h	/^    compact_unwind_encoding_t    encoding;$/;"	m	struct:unwind_info_regular_second_level_entry
encoding	src/UnwindCursor.hpp	/^  uint32_t encoding(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionRegularArray
encodingIndex	src/UnwindCursor.hpp	/^  uint16_t encodingIndex(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionCompressedArray
encodingsCount	include/mach-o/compact_unwind_encoding.h	/^    uint16_t    encodingsCount;$/;"	m	struct:unwind_info_compressed_second_level_page_header
encodingsCount	src/UnwindCursor.hpp	/^  uint16_t encodingsCount() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
encodingsPageOffset	include/mach-o/compact_unwind_encoding.h	/^    uint16_t    encodingsPageOffset;$/;"	m	struct:unwind_info_compressed_second_level_page_header
encodingsPageOffset	src/UnwindCursor.hpp	/^  uint16_t encodingsPageOffset() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
end	src/UnwindCursor.hpp	/^  static _Self end(A& addressSpace, const UnwindInfoSections& sects) {$/;"	f	struct:libunwind::EHABISectionIterator
end_ip	include/libunwind.h	/^  unw_word_t  end_ip;           \/* address after end of function *\/$/;"	m	struct:unw_proc_info_t
entry	src/DwarfParser.hpp	/^    PrologInfoStackEntry *entry;$/;"	m	struct:libunwind::CFI_Parser::RememberStack
entry	src/UnwindCursor.hpp	/^  struct entry {$/;"	s	class:libunwind::DwarfFDECache
entryCount	include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryCount;$/;"	m	struct:unwind_info_compressed_second_level_page_header
entryCount	include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryCount;$/;"	m	struct:unwind_info_regular_second_level_page_header
entryCount	src/UnwindCursor.hpp	/^  uint16_t entryCount() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
entryCount	src/UnwindCursor.hpp	/^  uint16_t entryCount() const {$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
entryPageOffset	include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryPageOffset;$/;"	m	struct:unwind_info_compressed_second_level_page_header
entryPageOffset	include/mach-o/compact_unwind_encoding.h	/^    uint16_t    entryPageOffset;$/;"	m	struct:unwind_info_regular_second_level_page_header
entryPageOffset	src/UnwindCursor.hpp	/^  uint16_t entryPageOffset() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
entryPageOffset	src/UnwindCursor.hpp	/^  uint16_t entryPageOffset() const {$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
evaluateExpression	src/DwarfInstructions.hpp	/^DwarfInstructions<A, R>::evaluateExpression(pint_t expression, A &addressSpace,$/;"	f	class:libunwind::DwarfInstructions
ex	test/forceunwind.pass.cpp	/^_Unwind_Exception ex;$/;"	v
exception_class	include/unwind_arm_ehabi.h	/^  _Unwind_Exception_Class exception_class;$/;"	m	struct:_Unwind_Control_Block
exception_class	include/unwind_itanium.h	/^  _Unwind_Exception_Class exception_class;$/;"	m	struct:_Unwind_Exception
exception_cleanup	include/unwind_arm_ehabi.h	/^  void (*exception_cleanup)(_Unwind_Reason_Code, _Unwind_Control_Block*);$/;"	m	struct:_Unwind_Control_Block
exception_cleanup	include/unwind_itanium.h	/^  void (*exception_cleanup)(_Unwind_Reason_Code reason,$/;"	m	struct:_Unwind_Exception
exclude_patterns	docs/conf.py	/^exclude_patterns = ['_build']$/;"	v
extensions	docs/conf.py	/^extensions = ['sphinx.ext.intersphinx', 'sphinx.ext.todo']$/;"	v
extra	include/libunwind.h	/^  unw_word_t  extra;            \/* mach_header of mach-o image containing func *\/$/;"	m	struct:unw_proc_info_t
f	src/Registers.hpp	/^      double f;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_vsr_t::asfloat_s
fde	src/UnwindCursor.hpp	/^    pint_t fde;$/;"	m	struct:libunwind::DwarfFDECache::entry
fdeInstructions	src/DwarfParser.hpp	/^    pint_t  fdeInstructions;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
fdeLength	src/DwarfParser.hpp	/^    pint_t  fdeLength;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
fdeStart	src/DwarfParser.hpp	/^    pint_t  fdeStart;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
fde_count	src/EHHeaderParser.hpp	/^    size_t fde_count;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
fdesHaveAugmentationData	src/DwarfParser.hpp	/^    bool      fdesHaveAugmentationData;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
find	src/FrameHeaderCache.hpp	/^  bool find(dl_phdr_info *PInfo, size_t, void *data) {$/;"	f	class:FrameHeaderCache
findFDE	src/DwarfParser.hpp	/^bool CFI_Parser<A>::findFDE(A &addressSpace, pint_t pc, pint_t ehSectionStart,$/;"	f	class:libunwind::CFI_Parser
findFDE	src/EHHeaderParser.hpp	/^bool EHHeaderParser<A>::findFDE(A &addressSpace, pint_t pc, pint_t ehHdrStart,$/;"	f	class:libunwind::EHHeaderParser
findFDE	src/UnwindCursor.hpp	/^typename A::pint_t DwarfFDECache<A>::findFDE(pint_t mh, pint_t pc) {$/;"	f	class:libunwind::DwarfFDECache
findFunctionName	src/AddressSpace.hpp	/^inline bool LocalAddressSpace::findFunctionName(pint_t addr, char *buf,$/;"	f	class:libunwind::LocalAddressSpace
findOtherFDE	src/AddressSpace.hpp	/^inline bool LocalAddressSpace::findOtherFDE(pint_t targetAddr, pint_t &fde) {$/;"	f	class:libunwind::LocalAddressSpace
findUnwindSections	src/AddressSpace.hpp	/^inline bool LocalAddressSpace::findUnwindSections(pint_t targetAddr,$/;"	f	class:libunwind::LocalAddressSpace
findUnwindSectionsByPhdr	src/AddressSpace.hpp	/^static int findUnwindSectionsByPhdr(struct dl_phdr_info *pinfo,$/;"	f	namespace:libunwind
flags	include/libunwind.h	/^  unw_word_t  flags;            \/* not used *\/$/;"	m	struct:unw_proc_info_t
fnstart	include/unwind_arm_ehabi.h	/^    uint32_t fnstart; \/* function start address *\/$/;"	m	struct:_Unwind_Control_Block::__anon22
foo	test/floatregister.pass.cpp	/^__attribute__((noinline)) void foo() {$/;"	f
foo	test/forceunwind.pass.cpp	/^__attribute__((noinline)) void foo() {$/;"	f
format	include/libunwind.h	/^  uint32_t    format;           \/* compact unwind encoding, or zero if none *\/$/;"	m	struct:unw_proc_info_t
fp_t	src/Registers.hpp	/^typedef double fp_t;$/;"	t	namespace:libunwind
fp_t	src/Registers.hpp	/^typedef float fp_t;$/;"	t	namespace:libunwind
frameUnwind	src/CompactUnwinder.hpp	/^void CompactUnwinder_x86<A>::frameUnwind(A &addressSpace,$/;"	f	class:libunwind::CompactUnwinder_x86
frameUnwind	src/CompactUnwinder.hpp	/^void CompactUnwinder_x86_64<A>::frameUnwind(A &addressSpace,$/;"	f	class:libunwind::CompactUnwinder_x86_64
frame_handler	test/floatregister.pass.cpp	/^_Unwind_Reason_Code frame_handler(struct _Unwind_Context *ctx, void *arg) {$/;"	f
frame_handler	test/signal_unwind.pass.cpp	/^_Unwind_Reason_Code frame_handler(struct _Unwind_Context* ctx, void* arg) {$/;"	f
frame_handler	test/unwind_leaffunction.pass.cpp	/^_Unwind_Reason_Code frame_handler(struct _Unwind_Context* ctx, void* arg) {$/;"	f
framelessUnwind	src/CompactUnwinder.hpp	/^void CompactUnwinder_x86<A>::framelessUnwind($/;"	f	class:libunwind::CompactUnwinder_x86
framelessUnwind	src/CompactUnwinder.hpp	/^void CompactUnwinder_x86_64<A>::framelessUnwind(A &addressSpace,$/;"	f	class:libunwind::CompactUnwinder_x86_64
func	include/unwind.h	/^  uintptr_t func;$/;"	m	struct:dwarf_eh_bases
functionAddress	src/UnwindCursor.hpp	/^  typename A::pint_t functionAddress() const {$/;"	f	struct:libunwind::EHABISectionIterator
functionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t                    functionOffset;$/;"	m	struct:unwind_info_regular_second_level_entry
functionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t        functionOffset;$/;"	m	struct:unwind_info_section_header_index_entry
functionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t        functionOffset;$/;"	m	struct:unwind_info_section_header_lsda_index_entry
functionOffset	src/AddressSpace.hpp	/^  uint32_t functionOffset;$/;"	m	struct:EHABIIndexEntry
functionOffset	src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionCompressedArray
functionOffset	src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionIndexArray
functionOffset	src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionLsdaArray
functionOffset	src/UnwindCursor.hpp	/^  uint32_t functionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionRegularArray
get16	src/AddressSpace.hpp	/^  uint16_t         get16(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get32	src/AddressSpace.hpp	/^  uint32_t         get32(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get64	src/AddressSpace.hpp	/^  uint64_t         get64(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
get8	src/AddressSpace.hpp	/^  uint8_t         get8(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_ARM64; }$/;"	f	class:libunwind::Registers_arm64
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_ARM; }$/;"	f	class:libunwind::Registers_arm
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_HEXAGON; }$/;"	f	class:libunwind::Registers_hexagon
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_MIPS_NEWABI; }$/;"	f	class:libunwind::Registers_mips_newabi
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_MIPS_O32; }$/;"	f	class:libunwind::Registers_mips_o32
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_OR1K; }$/;"	f	class:libunwind::Registers_or1k
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_PPC64; }$/;"	f	class:libunwind::Registers_ppc64
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_PPC; }$/;"	f	class:libunwind::Registers_ppc
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_RISCV; }$/;"	f	class:libunwind::Registers_riscv
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_S390X; }$/;"	f	class:libunwind::Registers_s390x
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_SPARC; }$/;"	f	class:libunwind::Registers_sparc
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_VE; }$/;"	f	class:libunwind::Registers_ve
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_X86; }$/;"	f	class:libunwind::Registers_x86
getArch	src/Registers.hpp	/^  static int  getArch() { return REGISTERS_X86_64; }$/;"	f	class:libunwind::Registers_x86_64
getArch	src/Registers.hpp	/^  static int getArch() { return REGISTERS_LOONGARCH; }$/;"	f	class:libunwind::Registers_loongarch
getArch	src/Registers.hpp	/^  static int getArch() { return REGISTERS_SPARC64; }$/;"	f	class:libunwind::Registers_sparc64
getByte	src/Unwind-EHABI.cpp	/^uint8_t getByte(const uint32_t* data, size_t offset) {$/;"	f	namespace:__anon34
getCFA	src/DwarfInstructions.hpp	/^  static pint_t getCFA(A &addressSpace, const PrologInfo &prolog,$/;"	f	class:libunwind::DwarfInstructions
getCR	src/Registers.hpp	/^  uint64_t  getCR() const         { return _registers.__cr; }$/;"	f	class:libunwind::Registers_ppc
getCR	src/Registers.hpp	/^  uint64_t  getCR() const         { return _registers.__cr; }$/;"	f	class:libunwind::Registers_ppc64
getDataRelBase	src/UnwindCursor.hpp	/^  virtual uintptr_t getDataRelBase() {$/;"	f	class:libunwind::AbstractUnwindCursor
getDataRelBase	src/UnwindCursor.hpp	/^uintptr_t UnwindCursor<A, R>::getDataRelBase() {$/;"	f	class:libunwind::UnwindCursor
getDispatcherContext	src/UnwindCursor.hpp	/^  DISPATCHER_CONTEXT *getDispatcherContext() { return &_dispContext; }$/;"	f	class:libunwind::UnwindCursor
getDouble	src/AddressSpace.hpp	/^  double           getDouble(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getEBP	src/Registers.hpp	/^  uint32_t  getEBP() const         { return _registers.__ebp; }$/;"	f	class:libunwind::Registers_x86
getEBX	src/Registers.hpp	/^  uint32_t  getEBX() const         { return _registers.__ebx; }$/;"	f	class:libunwind::Registers_x86
getECX	src/Registers.hpp	/^  uint32_t  getECX() const         { return _registers.__ecx; }$/;"	f	class:libunwind::Registers_x86
getEDI	src/Registers.hpp	/^  uint32_t  getEDI() const         { return _registers.__edi; }$/;"	f	class:libunwind::Registers_x86
getEDX	src/Registers.hpp	/^  uint32_t  getEDX() const         { return _registers.__edx; }$/;"	f	class:libunwind::Registers_x86
getESI	src/Registers.hpp	/^  uint32_t  getESI() const         { return _registers.__esi; }$/;"	f	class:libunwind::Registers_x86
getEncodedP	src/AddressSpace.hpp	/^LocalAddressSpace::getEncodedP(pint_t &addr, pint_t end, uint8_t encoding,$/;"	f	class:libunwind::LocalAddressSpace
getFP	src/Registers.hpp	/^  uint64_t  getFP() const         { return _registers.__fp; }$/;"	f	class:libunwind::Registers_arm64
getFloatReg	src/UnwindCursor.hpp	/^  virtual unw_fpreg_t getFloatReg(int) {$/;"	f	class:libunwind::AbstractUnwindCursor
getFloatReg	src/UnwindCursor.hpp	/^unw_fpreg_t UnwindCursor<A, R>::getFloatReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
getFloatRegister	src/Registers.hpp	/^inline double Registers_arm64::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
getFloatRegister	src/Registers.hpp	/^inline double Registers_hexagon::getFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_hexagon
getFloatRegister	src/Registers.hpp	/^inline double Registers_loongarch::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_loongarch
getFloatRegister	src/Registers.hpp	/^inline double Registers_mips_newabi::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_newabi
getFloatRegister	src/Registers.hpp	/^inline double Registers_mips_o32::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_o32
getFloatRegister	src/Registers.hpp	/^inline double Registers_or1k::getFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
getFloatRegister	src/Registers.hpp	/^inline double Registers_ppc64::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
getFloatRegister	src/Registers.hpp	/^inline double Registers_ppc::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
getFloatRegister	src/Registers.hpp	/^inline double Registers_s390x::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_s390x
getFloatRegister	src/Registers.hpp	/^inline double Registers_sparc64::getFloatRegister(int) const {$/;"	f	class:libunwind::Registers_sparc64
getFloatRegister	src/Registers.hpp	/^inline double Registers_sparc::getFloatRegister(int) const {$/;"	f	class:libunwind::Registers_sparc
getFloatRegister	src/Registers.hpp	/^inline double Registers_ve::getFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_ve
getFloatRegister	src/Registers.hpp	/^inline double Registers_x86::getFloatRegister(int) const {$/;"	f	class:libunwind::Registers_x86
getFloatRegister	src/Registers.hpp	/^inline double Registers_x86_64::getFloatRegister(int) const {$/;"	f	class:libunwind::Registers_x86_64
getFloatRegister	src/Registers.hpp	/^inline fp_t Registers_riscv::getFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_riscv
getFloatRegister	src/Registers.hpp	/^inline unw_fpreg_t Registers_arm::getFloatRegister(int regNum) {$/;"	f	class:libunwind::Registers_arm
getFuncNameFromTBTable	src/Unwind_AIXExtras.cpp	/^char *getFuncNameFromTBTable(uintptr_t Pc, uint16_t &NameLen,$/;"	f	namespace:libunwind
getFunctionName	src/UnwindCursor.hpp	/^  virtual bool getFunctionName(char *, size_t, unw_word_t *) {$/;"	f	class:libunwind::AbstractUnwindCursor
getFunctionName	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getFunctionName(char *buf, size_t bufLen,$/;"	f	class:libunwind::UnwindCursor
getIP	src/Registers.hpp	/^  reg_t       getIP() const { return _registers[0]; }$/;"	f	class:libunwind::Registers_riscv
getIP	src/Registers.hpp	/^  uint32_t  getIP() const          { return _registers.__eip; }$/;"	f	class:libunwind::Registers_x86
getIP	src/Registers.hpp	/^  uint32_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_arm
getIP	src/Registers.hpp	/^  uint32_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_mips_o32
getIP	src/Registers.hpp	/^  uint32_t  getIP() const         { return _registers.__r[UNW_HEXAGON_PC]; }$/;"	f	class:libunwind::Registers_hexagon
getIP	src/Registers.hpp	/^  uint64_t  getIP() const          { return _registers.__rip; }$/;"	f	class:libunwind::Registers_x86_64
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__ic; }$/;"	f	class:libunwind::Registers_ve
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_arm64
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_mips_newabi
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__pc; }$/;"	f	class:libunwind::Registers_or1k
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__pswa; }$/;"	f	class:libunwind::Registers_s390x
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__regs[UNW_SPARC_O7]; }$/;"	f	class:libunwind::Registers_sparc
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__srr0; }$/;"	f	class:libunwind::Registers_ppc
getIP	src/Registers.hpp	/^  uint64_t  getIP() const         { return _registers.__srr0; }$/;"	f	class:libunwind::Registers_ppc64
getIP	src/Registers.hpp	/^  uint64_t getIP() const { return _registers.__pc; }$/;"	f	class:libunwind::Registers_loongarch
getIP	src/Registers.hpp	/^  uint64_t getIP() const { return _registers.__regs[UNW_SPARC_O7]; }$/;"	f	class:libunwind::Registers_sparc64
getInfo	src/UnwindCursor.hpp	/^  virtual void getInfo(unw_proc_info_t *) {$/;"	f	class:libunwind::AbstractUnwindCursor
getInfo	src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::getInfo(unw_proc_info_t *info) {$/;"	f	class:libunwind::UnwindCursor
getInfoFromCompactEncodingSection	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromCompactEncodingSection(pint_t pc,$/;"	f	class:libunwind::UnwindCursor
getInfoFromDwarfSection	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromDwarfSection(pint_t pc,$/;"	f	class:libunwind::UnwindCursor
getInfoFromEHABISection	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromEHABISection($/;"	f	class:libunwind::UnwindCursor
getInfoFromFdeCie	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromFdeCie($/;"	f	class:libunwind::UnwindCursor
getInfoFromSEH	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromSEH(pint_t pc) {$/;"	f	class:libunwind::UnwindCursor
getInfoFromTBTable	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::getInfoFromTBTable(pint_t pc, R &registers) {$/;"	f	class:libunwind::UnwindCursor
getLastPC	src/UnwindCursor.hpp	/^  pint_t getLastPC() const { \/* FIXME: Implement *\/ return 0; }$/;"	f	class:libunwind::UnwindCursor
getLastPC	src/UnwindCursor.hpp	/^  pint_t getLastPC() const { return _dispContext.ControlPc; }$/;"	f	class:libunwind::UnwindCursor
getNextNibble	src/Unwind-EHABI.cpp	/^const char* getNextNibble(const char* data, uint32_t* out) {$/;"	f	namespace:__anon34
getNextWord	src/Unwind-EHABI.cpp	/^const char* getNextWord(const char* data, uint32_t* out) {$/;"	f	namespace:__anon34
getP	src/AddressSpace.hpp	/^inline uintptr_t LocalAddressSpace::getP(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getR12	src/Registers.hpp	/^  uint64_t  getR12() const         { return _registers.__r12; }$/;"	f	class:libunwind::Registers_x86_64
getR13	src/Registers.hpp	/^  uint64_t  getR13() const         { return _registers.__r13; }$/;"	f	class:libunwind::Registers_x86_64
getR14	src/Registers.hpp	/^  uint64_t  getR14() const         { return _registers.__r14; }$/;"	f	class:libunwind::Registers_x86_64
getR15	src/Registers.hpp	/^  uint64_t  getR15() const         { return _registers.__r15; }$/;"	f	class:libunwind::Registers_x86_64
getRA_SIGN_STATE	src/DwarfInstructions.hpp	/^bool DwarfInstructions<A, R>::getRA_SIGN_STATE(A &addressSpace, R registers,$/;"	f	class:libunwind::DwarfInstructions
getRBP	src/Registers.hpp	/^  uint64_t  getRBP() const         { return _registers.__rbp; }$/;"	f	class:libunwind::Registers_x86_64
getRBX	src/Registers.hpp	/^  uint64_t  getRBX() const         { return _registers.__rbx; }$/;"	f	class:libunwind::Registers_x86_64
getReg	src/UnwindCursor.hpp	/^  virtual unw_word_t getReg(int) { _LIBUNWIND_ABORT("getReg not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
getReg	src/UnwindCursor.hpp	/^unw_word_t UnwindCursor<A, R>::getReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
getRegister	src/AddressSpace.hpp	/^inline uint64_t LocalAddressSpace::getRegister(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getRegister	src/Registers.hpp	/^inline reg_t Registers_riscv::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_riscv
getRegister	src/Registers.hpp	/^inline uint32_t Registers_arm::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm
getRegister	src/Registers.hpp	/^inline uint32_t Registers_hexagon::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_hexagon
getRegister	src/Registers.hpp	/^inline uint32_t Registers_mips_o32::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_o32
getRegister	src/Registers.hpp	/^inline uint32_t Registers_or1k::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_or1k
getRegister	src/Registers.hpp	/^inline uint32_t Registers_ppc::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
getRegister	src/Registers.hpp	/^inline uint32_t Registers_sparc::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_sparc
getRegister	src/Registers.hpp	/^inline uint32_t Registers_x86::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86
getRegister	src/Registers.hpp	/^inline uint64_t Registers_arm64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
getRegister	src/Registers.hpp	/^inline uint64_t Registers_loongarch::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_loongarch
getRegister	src/Registers.hpp	/^inline uint64_t Registers_mips_newabi::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_newabi
getRegister	src/Registers.hpp	/^inline uint64_t Registers_ppc64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
getRegister	src/Registers.hpp	/^inline uint64_t Registers_s390x::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_s390x
getRegister	src/Registers.hpp	/^inline uint64_t Registers_sparc64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_sparc64
getRegister	src/Registers.hpp	/^inline uint64_t Registers_ve::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ve
getRegister	src/Registers.hpp	/^inline uint64_t Registers_x86_64::getRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
getRegisterName	src/Registers.hpp	/^inline const char *Registers_arm64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_arm64
getRegisterName	src/Registers.hpp	/^inline const char *Registers_arm::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_arm
getRegisterName	src/Registers.hpp	/^inline const char *Registers_hexagon::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_hexagon
getRegisterName	src/Registers.hpp	/^inline const char *Registers_loongarch::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_loongarch
getRegisterName	src/Registers.hpp	/^inline const char *Registers_mips_newabi::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_mips_newabi
getRegisterName	src/Registers.hpp	/^inline const char *Registers_mips_o32::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_mips_o32
getRegisterName	src/Registers.hpp	/^inline const char *Registers_or1k::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_or1k
getRegisterName	src/Registers.hpp	/^inline const char *Registers_ppc64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_ppc64
getRegisterName	src/Registers.hpp	/^inline const char *Registers_ppc::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_ppc
getRegisterName	src/Registers.hpp	/^inline const char *Registers_riscv::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_riscv
getRegisterName	src/Registers.hpp	/^inline const char *Registers_s390x::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_s390x
getRegisterName	src/Registers.hpp	/^inline const char *Registers_sparc64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_sparc64
getRegisterName	src/Registers.hpp	/^inline const char *Registers_sparc::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_sparc
getRegisterName	src/Registers.hpp	/^inline const char *Registers_ve::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_ve
getRegisterName	src/Registers.hpp	/^inline const char *Registers_x86::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_x86
getRegisterName	src/Registers.hpp	/^inline const char *Registers_x86_64::getRegisterName(int regNum) {$/;"	f	class:libunwind::Registers_x86_64
getRegisterName	src/UnwindCursor.hpp	/^  virtual const char *getRegisterName(int) {$/;"	f	class:libunwind::AbstractUnwindCursor
getRegisterName	src/UnwindCursor.hpp	/^const char *UnwindCursor<A, R>::getRegisterName(int regNum) {$/;"	f	class:libunwind::UnwindCursor
getSLEB128	src/AddressSpace.hpp	/^inline int64_t LocalAddressSpace::getSLEB128(pint_t &addr, pint_t end) {$/;"	f	class:libunwind::LocalAddressSpace
getSP	src/Registers.hpp	/^  reg_t       getSP() const { return _registers[2]; }$/;"	f	class:libunwind::Registers_riscv
getSP	src/Registers.hpp	/^  uint32_t  getSP() const          { return _registers.__esp; }$/;"	f	class:libunwind::Registers_x86
getSP	src/Registers.hpp	/^  uint32_t  getSP() const         { return _registers.__r[29]; }$/;"	f	class:libunwind::Registers_mips_o32
getSP	src/Registers.hpp	/^  uint32_t  getSP() const         { return _registers.__r[UNW_HEXAGON_R29]; }$/;"	f	class:libunwind::Registers_hexagon
getSP	src/Registers.hpp	/^  uint32_t  getSP() const         { return _registers.__sp; }$/;"	f	class:libunwind::Registers_arm
getSP	src/Registers.hpp	/^  uint64_t  getSP() const          { return _registers.__rsp; }$/;"	f	class:libunwind::Registers_x86_64
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__gpr[15]; }$/;"	f	class:libunwind::Registers_s390x
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r1; }$/;"	f	class:libunwind::Registers_ppc
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r1; }$/;"	f	class:libunwind::Registers_ppc64
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r[1]; }$/;"	f	class:libunwind::Registers_or1k
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__r[29]; }$/;"	f	class:libunwind::Registers_mips_newabi
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__regs[UNW_SPARC_O6]; }$/;"	f	class:libunwind::Registers_sparc
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__s[11]; }$/;"	f	class:libunwind::Registers_ve
getSP	src/Registers.hpp	/^  uint64_t  getSP() const         { return _registers.__sp; }$/;"	f	class:libunwind::Registers_arm64
getSP	src/Registers.hpp	/^  uint64_t getSP() const { return _registers.__r[3]; }$/;"	f	class:libunwind::Registers_loongarch
getSP	src/Registers.hpp	/^  uint64_t getSP() const { return _registers.__regs[UNW_SPARC_O6] + 2047; }$/;"	f	class:libunwind::Registers_sparc64
getSavedFloatRegister	src/DwarfInstructions.hpp	/^double DwarfInstructions<A, R>::getSavedFloatRegister($/;"	f	class:libunwind::DwarfInstructions
getSavedRegister	src/DwarfInstructions.hpp	/^typename A::pint_t DwarfInstructions<A, R>::getSavedRegister($/;"	f	class:libunwind::DwarfInstructions
getSavedVectorRegister	src/DwarfInstructions.hpp	/^v128 DwarfInstructions<A, R>::getSavedVectorRegister($/;"	f	class:libunwind::DwarfInstructions
getSparcWCookie	src/DwarfInstructions.hpp	/^template <typename R> uint64_t getSparcWCookie(const R &, long) {$/;"	f	namespace:libunwind
getTableEntrySize	src/EHHeaderParser.hpp	/^size_t EHHeaderParser<A>::getTableEntrySize(uint8_t tableEnc) {$/;"	f	class:libunwind::EHHeaderParser
getULEB128	src/AddressSpace.hpp	/^inline uint64_t LocalAddressSpace::getULEB128(pint_t &addr, pint_t end) {$/;"	f	class:libunwind::LocalAddressSpace
getVector	src/AddressSpace.hpp	/^  v128             getVector(pint_t addr) {$/;"	f	class:libunwind::LocalAddressSpace
getVectorRegNum	src/Registers.hpp	/^inline int Registers_ppc64::getVectorRegNum(int num)$/;"	f	class:libunwind::Registers_ppc64
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_arm64::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm64
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_arm::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_hexagon::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_hexagon
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_loongarch::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_loongarch
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_mips_newabi::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_newabi
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_mips_o32::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_o32
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_or1k::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_ppc64::getVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_ppc::getVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_riscv::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_riscv
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_s390x::getVectorRegister(int \/*regNum*\/) const {$/;"	f	class:libunwind::Registers_s390x
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_sparc64::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_sparc64
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_sparc::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_sparc
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_ve::getVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_ve
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_x86::getVectorRegister(int) const {$/;"	f	class:libunwind::Registers_x86
getVectorRegister	src/Registers.hpp	/^inline v128 Registers_x86_64::getVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
getWCookie	src/Registers.hpp	/^  uint64_t getWCookie() const { return _wcookie; }$/;"	f	class:libunwind::Registers_sparc64
get_registers	src/UnwindCursor.hpp	/^  virtual void *get_registers() { return &_registers; }$/;"	f	class:libunwind::UnwindCursor
get_registers	src/UnwindCursor.hpp	/^  virtual void *get_registers() {$/;"	f	class:libunwind::AbstractUnwindCursor
gp	include/libunwind.h	/^  unw_word_t  gp;               \/* not used *\/$/;"	m	struct:unw_proc_info_t
handler	include/libunwind.h	/^  unw_word_t  handler;          \/* personality routine, or zero if not used *\/$/;"	m	struct:unw_proc_info_t
has_cpp_feature	test/libunwind/test/config.py	/^    def has_cpp_feature(self, feature, required_value):$/;"	m	class:Configuration
hexagon_thread_state_t	src/Registers.hpp	/^  struct hexagon_thread_state_t {$/;"	s	class:libunwind::Registers_hexagon
html_static_path	docs/conf.py	/^html_static_path = []$/;"	v
html_theme	docs/conf.py	/^html_theme = 'haiku'$/;"	v
htmlhelp_basename	docs/conf.py	/^htmlhelp_basename = 'libunwinddoc'$/;"	v
indexCount	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    indexCount;$/;"	m	struct:unwind_info_section_header
indexCount	src/UnwindCursor.hpp	/^  uint32_t indexCount() const {$/;"	f	class:libunwind::UnwindSectionHeader
indexSectionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    indexSectionOffset;$/;"	m	struct:unwind_info_section_header
indexSectionOffset	src/UnwindCursor.hpp	/^  uint32_t indexSectionOffset() const {$/;"	f	class:libunwind::UnwindSectionHeader
info	src/DwarfParser.hpp	/^    PrologInfo info;$/;"	m	struct:libunwind::CFI_Parser::PrologInfoStackEntry
initialStateSaved	src/DwarfParser.hpp	/^    bool initialStateSaved;$/;"	m	struct:libunwind::CFI_Parser::RegisterLocation
intersphinx_mapping	docs/conf.py	/^intersphinx_mapping = {}$/;"	v
ip_end	src/UnwindCursor.hpp	/^    pint_t ip_end;$/;"	m	struct:libunwind::DwarfFDECache::entry
ip_start	src/UnwindCursor.hpp	/^    pint_t ip_start;$/;"	m	struct:libunwind::DwarfFDECache::entry
isSignalFrame	src/DwarfParser.hpp	/^    bool      isSignalFrame;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
isSignalFrame	src/UnwindCursor.hpp	/^  virtual bool isSignalFrame() {$/;"	f	class:libunwind::AbstractUnwindCursor
isSignalFrame	src/UnwindCursor.hpp	/^template <typename A, typename R> bool UnwindCursor<A, R>::isSignalFrame() {$/;"	f	class:libunwind::UnwindCursor
iterateCacheEntries	src/UnwindCursor.hpp	/^void DwarfFDECache<A>::iterateCacheEntries(void (*func)($/;"	f	class:libunwind::DwarfFDECache
jbuf	src/Unwind-sjlj.c	/^  void                           *jbuf[];$/;"	m	struct:_Unwind_FunctionContext	file:
jumpto	src/Registers.hpp	/^  void        jumpto() { __libunwind_Registers_arm64_jumpto(this); }$/;"	f	class:libunwind::Registers_arm64
jumpto	src/Registers.hpp	/^  void        jumpto() { __libunwind_Registers_x86_64_jumpto(this); }$/;"	f	class:libunwind::Registers_x86_64
jumpto	src/Registers.hpp	/^  void        jumpto() { __libunwind_Registers_x86_jumpto(this); }$/;"	f	class:libunwind::Registers_x86
jumpto	src/Registers.hpp	/^  void        jumpto() {$/;"	f	class:libunwind::Registers_arm
jumpto	src/UnwindCursor.hpp	/^  virtual void jumpto() { _LIBUNWIND_ABORT("jumpto not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
jumpto	src/UnwindCursor.hpp	/^template <typename A, typename R> void UnwindCursor<A, R>::jumpto() {$/;"	f	class:libunwind::UnwindCursor
kBaseAddr	test/frameheadercache_test.pass.cpp	26;"	d	file:
kCacheEntryCount	src/FrameHeaderCache.hpp	/^  static const size_t kCacheEntryCount = 8;$/;"	m	class:FrameHeaderCache
kLazy	src/DwarfParser.hpp	/^    enum class InitializeTime { kLazy, kNormal };$/;"	m	class:libunwind::CFI_Parser::PrologInfo::InitializeTime
kMaxRegisterNumber	src/DwarfParser.hpp	/^    kMaxRegisterNumber = _LIBUNWIND_HIGHEST_DWARF_REGISTER$/;"	e	enum:libunwind::CFI_Parser::__anon41
kRegisterAtExpression	src/DwarfParser.hpp	/^    kRegisterAtExpression,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterInCFA	src/DwarfParser.hpp	/^    kRegisterInCFA,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterInCFADecrypt	src/DwarfParser.hpp	/^    kRegisterInCFADecrypt, \/\/ sparc64 specific$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterInRegister	src/DwarfParser.hpp	/^    kRegisterInRegister,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterIsExpression	src/DwarfParser.hpp	/^    kRegisterIsExpression$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterOffsetFromCFA	src/DwarfParser.hpp	/^    kRegisterOffsetFromCFA,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterUndefined	src/DwarfParser.hpp	/^    kRegisterUndefined,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kRegisterUnused	src/DwarfParser.hpp	/^    kRegisterUnused,$/;"	e	enum:libunwind::CFI_Parser::RegisterSavedWhere
kSearchAll	src/UnwindCursor.hpp	/^  static constexpr pint_t kSearchAll = static_cast<pint_t>(-1);$/;"	m	class:libunwind::DwarfFDECache
kTextSegmentLength	test/frameheadercache_test.pass.cpp	27;"	d	file:
kind	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    kind;    \/\/ UNWIND_SECOND_LEVEL_COMPRESSED$/;"	m	struct:unwind_info_compressed_second_level_page_header
kind	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    kind;    \/\/ UNWIND_SECOND_LEVEL_REGULAR$/;"	m	struct:unwind_info_regular_second_level_page_header
kind	src/UnwindCursor.hpp	/^  uint32_t kind() const {$/;"	f	class:libunwind::UnwindSectionCompressedPageHeader
kind	src/UnwindCursor.hpp	/^  uint32_t kind() const {$/;"	f	class:libunwind::UnwindSectionRegularPageHeader
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_arm
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_arm64
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_hexagon
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_loongarch
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_mips_newabi
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_mips_o32
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_or1k
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_ppc
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_ppc64
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_riscv
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_s390x
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_sparc
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_sparc64
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_ve
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_x86
lastDwarfRegNum	src/Registers.hpp	/^  static constexpr int lastDwarfRegNum() {$/;"	f	class:libunwind::Registers_x86_64
latex_documents	docs/conf.py	/^latex_documents = [$/;"	v
latex_elements	docs/conf.py	/^latex_elements = {$/;"	v
libunwind	src/AddressSpace.hpp	/^namespace libunwind {$/;"	n
libunwind	src/CompactUnwinder.hpp	/^namespace libunwind {$/;"	n
libunwind	src/DwarfInstructions.hpp	/^namespace libunwind {$/;"	n
libunwind	src/DwarfParser.hpp	/^namespace libunwind {$/;"	n
libunwind	src/EHHeaderParser.hpp	/^namespace libunwind {$/;"	n
libunwind	src/RWMutex.hpp	/^namespace libunwind {$/;"	n
libunwind	src/Registers.hpp	/^namespace libunwind {$/;"	n
libunwind	src/UnwindCursor.hpp	/^namespace libunwind {$/;"	n
libunwind	src/Unwind_AIXExtras.cpp	/^namespace libunwind {$/;"	n	file:
location	src/DwarfParser.hpp	/^    RegisterSavedWhere location;$/;"	m	struct:libunwind::CFI_Parser::RegisterLocation
lock	src/RWMutex.hpp	/^  bool lock() { return true; }$/;"	f	class:libunwind::RWMutex
lock_shared	src/RWMutex.hpp	/^  bool lock_shared() { return true; }$/;"	f	class:libunwind::RWMutex
logAPIs	src/libunwind.cpp	/^bool logAPIs() {$/;"	f
logDWARF	src/libunwind.cpp	/^bool logDWARF() {$/;"	f
logUnwinding	src/libunwind.cpp	/^bool logUnwinding() {$/;"	f
lookUpSEHUnwindInfo	src/UnwindCursor.hpp	/^  RUNTIME_FUNCTION *lookUpSEHUnwindInfo(pint_t pc, pint_t *base) {$/;"	f	class:libunwind::UnwindCursor
loongarch_thread_state_t	src/Registers.hpp	/^  struct loongarch_thread_state_t {$/;"	s	class:libunwind::Registers_loongarch
lsda	include/libunwind.h	/^  unw_word_t  lsda;             \/* address of language specific data area, *\/$/;"	m	struct:unw_proc_info_t
lsda	src/DwarfParser.hpp	/^    pint_t  lsda;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
lsda	src/Unwind-sjlj.c	/^  uintptr_t                       lsda;        \/\/ arm offset=28$/;"	m	struct:_Unwind_FunctionContext	file:
lsdaEncoding	src/DwarfParser.hpp	/^    uint8_t   lsdaEncoding;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
lsdaIndexArraySectionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t        lsdaIndexArraySectionOffset;    \/\/ section offset to start of lsda_index array for this range$/;"	m	struct:unwind_info_section_header_index_entry
lsdaIndexArraySectionOffset	src/UnwindCursor.hpp	/^  uint32_t lsdaIndexArraySectionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionIndexArray
lsdaOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t        lsdaOffset;$/;"	m	struct:unwind_info_section_header_lsda_index_entry
lsdaOffset	src/UnwindCursor.hpp	/^  uint32_t lsdaOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionLsdaArray
main	test/bad_unwind_info.pass.cpp	/^int main() { bad_unwind_info(); }$/;"	f
main	test/floatregister.pass.cpp	/^int main() {$/;"	f
main	test/forceunwind.pass.cpp	/^int main() {$/;"	f
main	test/frameheadercache_test.pass.cpp	/^int main(int, char**) { return 0;}$/;"	f
main	test/frameheadercache_test.pass.cpp	/^int main(int, char**) {$/;"	f
main	test/libunwind_01.pass.cpp	/^int main(int, char**) {$/;"	f
main	test/libunwind_02.pass.cpp	/^int main(int, char**) {$/;"	f
main	test/remember_state_leak.pass.sh.s	/^main:                                   # @main$/;"	l
main	test/signal_frame.pass.cpp	/^int main(int, char**) {$/;"	f
main	test/signal_unwind.pass.cpp	/^int main(int, char**) {$/;"	f
main	test/unw_getcontext.pass.cpp	/^int main(int, char**) {$/;"	f
main	test/unw_resume.pass.cpp	/^int main() {$/;"	f
main	test/unwind_leaffunction.pass.cpp	/^int main(int, char**) {$/;"	f
man_pages	docs/conf.py	/^man_pages = [$/;"	v
master_doc	docs/conf.py	/^master_doc = 'index'$/;"	v
mh	src/AddressSpace.hpp	/^    const struct mach_header*   mh;$/;"	m	struct:dyld_unwind_sections	typeref:struct:dyld_unwind_sections::mach_header
mh	src/UnwindCursor.hpp	/^    pint_t mh;$/;"	m	struct:libunwind::DwarfFDECache::entry
mips_newabi_thread_state_t	src/Registers.hpp	/^  struct mips_newabi_thread_state_t {$/;"	s	class:libunwind::Registers_mips_newabi
mips_o32_thread_state_t	src/Registers.hpp	/^  struct mips_o32_thread_state_t {$/;"	s	class:libunwind::Registers_mips_o32
next	src/DwarfParser.hpp	/^    PrologInfoStackEntry *next;$/;"	m	struct:libunwind::CFI_Parser::PrologInfoStackEntry
operator !=	src/UnwindCursor.hpp	/^  bool operator!=(const _Self& other) const {$/;"	f	struct:libunwind::EHABISectionIterator
operator *	src/UnwindCursor.hpp	/^  typename A::pint_t operator*() const { return functionAddress(); }$/;"	f	struct:libunwind::EHABISectionIterator
operator +	src/UnwindCursor.hpp	/^  _Self operator+(size_t a) { _Self out = *this; out._i += a; return out; }$/;"	f	struct:libunwind::EHABISectionIterator
operator ++	src/UnwindCursor.hpp	/^  _Self& operator++() { ++_i; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator +=	src/UnwindCursor.hpp	/^  _Self& operator+=(size_t a) { _i += a; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator -	src/UnwindCursor.hpp	/^  _Self operator-(size_t a) { assert(_i >= a); _Self out = *this; out._i -= a; return out; }$/;"	f	struct:libunwind::EHABISectionIterator
operator -	src/UnwindCursor.hpp	/^  size_t operator-(const _Self& other) const { return _i - other._i; }$/;"	f	struct:libunwind::EHABISectionIterator
operator --	src/UnwindCursor.hpp	/^  _Self& operator--() { assert(_i > 0); --_i; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator -=	src/UnwindCursor.hpp	/^  _Self& operator-=(size_t a) { assert(_i >= a); _i -= a; return *this; }$/;"	f	struct:libunwind::EHABISectionIterator
operator ==	src/UnwindCursor.hpp	/^  bool operator==(const _Self& other) const {$/;"	f	struct:libunwind::EHABISectionIterator
operator delete	src/UnwindCursor.hpp	/^  void operator delete(void *, size_t) {}$/;"	f	class:libunwind::AbstractUnwindCursor
operator new	src/UnwindCursor.hpp	/^  static void *operator new(size_t, UnwindCursor<A, R> *p) { return p; }$/;"	f	class:libunwind::UnwindCursor
or1k_thread_state_t	src/Registers.hpp	/^  struct or1k_thread_state_t {$/;"	s	class:libunwind::Registers_or1k
parseCIE	src/DwarfParser.hpp	/^const char *CFI_Parser<A>::parseCIE(A &addressSpace, pint_t cie,$/;"	f	class:libunwind::CFI_Parser
parseFDEInstructions	src/DwarfParser.hpp	/^bool CFI_Parser<A>::parseFDEInstructions(A &addressSpace,$/;"	f	class:libunwind::CFI_Parser
pcEnd	src/DwarfParser.hpp	/^    pint_t  pcEnd;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
pcStart	src/DwarfParser.hpp	/^    pint_t  pcStart;$/;"	m	struct:libunwind::CFI_Parser::FDE_Info
personality	src/DwarfParser.hpp	/^    pint_t    personality;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
personality	src/Unwind-sjlj.c	/^  _Unwind_Personality_Fn personality;          \/\/ arm offset=24$/;"	m	struct:_Unwind_FunctionContext	file:
personalityArrayCount	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    personalityArrayCount;$/;"	m	struct:unwind_info_section_header
personalityArrayCount	src/UnwindCursor.hpp	/^  uint32_t personalityArrayCount() const {$/;"	f	class:libunwind::UnwindSectionHeader
personalityArraySectionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    personalityArraySectionOffset;$/;"	m	struct:unwind_info_section_header
personalityArraySectionOffset	src/UnwindCursor.hpp	/^  uint32_t personalityArraySectionOffset() const {$/;"	f	class:libunwind::UnwindSectionHeader
personalityEncoding	src/DwarfParser.hpp	/^    uint8_t   personalityEncoding;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
personalityOffsetInCIE	src/DwarfParser.hpp	/^    uint8_t   personalityOffsetInCIE;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
pint_t	src/AddressSpace.hpp	/^  typedef uintptr_t pint_t;$/;"	t	class:libunwind::LocalAddressSpace
pint_t	src/CompactUnwinder.hpp	/^  typename A::pint_t pint_t;$/;"	m	class:libunwind::CompactUnwinder_arm64
pint_t	src/CompactUnwinder.hpp	/^  typename A::pint_t pint_t;$/;"	m	class:libunwind::CompactUnwinder_x86
pint_t	src/CompactUnwinder.hpp	/^  typename A::pint_t pint_t;$/;"	m	class:libunwind::CompactUnwinder_x86_64
pint_t	src/DwarfInstructions.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::DwarfInstructions
pint_t	src/DwarfParser.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::CFI_Parser
pint_t	src/EHHeaderParser.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::EHHeaderParser
pint_t	src/UnwindCursor.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::DwarfFDECache
pint_t	src/UnwindCursor.hpp	/^  typedef typename A::pint_t pint_t;$/;"	t	class:libunwind::UnwindCursor
pointer	src/UnwindCursor.hpp	/^  typedef typename A::pint_t* pointer;$/;"	t	struct:libunwind::EHABISectionIterator
pointerEncoding	src/DwarfParser.hpp	/^    uint8_t   pointerEncoding;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
ppc64_thread_state_t	src/Registers.hpp	/^  struct ppc64_thread_state_t {$/;"	s	class:libunwind::Registers_ppc64
ppc64_vsr_t	src/Registers.hpp	/^  union ppc64_vsr_t {$/;"	u	class:libunwind::Registers_ppc64
ppc_float_state_t	src/Registers.hpp	/^  struct ppc_float_state_t {$/;"	s	class:libunwind::Registers_ppc
ppc_thread_state_t	src/Registers.hpp	/^  struct ppc_thread_state_t {$/;"	s	class:libunwind::Registers_ppc
pr_cache	include/unwind_arm_ehabi.h	/^  } pr_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon22
prev	src/Unwind-sjlj.c	/^  struct _Unwind_FunctionContext *prev;$/;"	m	struct:_Unwind_FunctionContext	typeref:struct:_Unwind_FunctionContext::_Unwind_FunctionContext	file:
private_	include/unwind_itanium.h	/^  uintptr_t private_[6];$/;"	m	struct:_Unwind_Exception
private_1	include/unwind_itanium.h	/^  uintptr_t private_1; \/\/ non-zero means forced unwind$/;"	m	struct:_Unwind_Exception
private_2	include/unwind_itanium.h	/^  uintptr_t private_2; \/\/ holds sp that phase1 found for phase2 to use$/;"	m	struct:_Unwind_Exception
project	docs/conf.py	/^project = u'libunwind'$/;"	v
pygments_style	docs/conf.py	/^pygments_style = 'friendly'$/;"	v
r0	src/UnwindRegistersRestore.S	/^  r0 = memw(r0)$/;"	d
r1	src/UnwindRegistersRestore.S	/^  r1 = memw(r0+#128)$/;"	d
r1	src/UnwindRegistersRestore.S	/^  r1 = memw(r0+#4)$/;"	d
r1	src/UnwindRegistersSave.S	/^  r1 = c4   \/\/ Predicate register$/;"	d
r1	src/UnwindRegistersSave.S	/^  r1 = memw(r30)           \/\/ *FP == Saved FP$/;"	d
r1	src/UnwindRegistersSave.S	/^  r1 = r31$/;"	d
r10	src/UnwindRegistersRestore.S	/^  r10 = memw(r0+#40)$/;"	d
r11	src/UnwindRegistersRestore.S	/^  r11 = memw(r0+#44)$/;"	d
r12	src/UnwindRegistersRestore.S	/^  r12 = memw(r0+#48)$/;"	d
r13	src/UnwindRegistersRestore.S	/^  r13 = memw(r0+#52)$/;"	d
r14	src/UnwindRegistersRestore.S	/^  r14 = memw(r0+#56)$/;"	d
r15	src/UnwindRegistersRestore.S	/^  r15 = memw(r0+#60)$/;"	d
r16	src/UnwindRegistersRestore.S	/^  r16 = memw(r0+#64)$/;"	d
r17	src/UnwindRegistersRestore.S	/^  r17 = memw(r0+#68)$/;"	d
r18	src/UnwindRegistersRestore.S	/^  r18 = memw(r0+#72)$/;"	d
r19	src/UnwindRegistersRestore.S	/^  r19 = memw(r0+#76)$/;"	d
r20	src/UnwindRegistersRestore.S	/^  r20 = memw(r0+#80)$/;"	d
r21	src/UnwindRegistersRestore.S	/^  r21 = memw(r0+#84)$/;"	d
r22	src/UnwindRegistersRestore.S	/^  r22 = memw(r0+#88)$/;"	d
r23	src/UnwindRegistersRestore.S	/^  r23 = memw(r0+#92)$/;"	d
r24	src/UnwindRegistersRestore.S	/^  r24 = memw(r0+#96)$/;"	d
r25	src/UnwindRegistersRestore.S	/^  r25 = memw(r0+#100)$/;"	d
r26	src/UnwindRegistersRestore.S	/^  r26 = memw(r0+#104)$/;"	d
r27	src/UnwindRegistersRestore.S	/^  r27 = memw(r0+#108)$/;"	d
r28	src/UnwindRegistersRestore.S	/^  r28 = memw(r0+#112)$/;"	d
r29	src/UnwindRegistersRestore.S	/^  r29 = memw(r0+#116)$/;"	d
r30	src/UnwindRegistersRestore.S	/^  r30 = memw(r0+#120)$/;"	d
r31	src/UnwindRegistersRestore.S	/^  r31 = memw(r0+#132)$/;"	d
r8	src/UnwindRegistersRestore.S	/^  r8 = memw(r0+#32)$/;"	d
r9	src/UnwindRegistersRestore.S	/^  r9 = memw(r0+#36)$/;"	d
readPrel31	src/Unwind-EHABI.h	/^static inline uint32_t readPrel31(const uint32_t *data) {$/;"	f
reference	src/UnwindCursor.hpp	/^  typedef typename A::pint_t& reference;$/;"	t	struct:libunwind::EHABISectionIterator
reg_t	src/Registers.hpp	/^typedef uint32_t reg_t;$/;"	t	namespace:libunwind
reg_t	src/Registers.hpp	/^typedef uint64_t reg_t;$/;"	t	namespace:libunwind
release	docs/conf.py	/^release = '15.0'$/;"	v
removeAllIn	src/UnwindCursor.hpp	/^void DwarfFDECache<A>::removeAllIn(pint_t mh) {$/;"	f	class:libunwind::DwarfFDECache
reserved	include/unwind_itanium.h	/^  uint32_t reserved[3];$/;"	m	struct:_Unwind_Exception
reserved1	include/unwind_arm_ehabi.h	/^    uint32_t reserved1; \/* init reserved1 to 0, then don't touch *\/$/;"	m	struct:_Unwind_Control_Block::__anon19
reserved1	include/unwind_arm_ehabi.h	/^    uint32_t reserved1;$/;"	m	struct:_Unwind_Control_Block::__anon22
reserved2	include/unwind_arm_ehabi.h	/^    uint32_t reserved2;$/;"	m	struct:_Unwind_Control_Block::__anon19
reserved3	include/unwind_arm_ehabi.h	/^    uint32_t reserved3;$/;"	m	struct:_Unwind_Control_Block::__anon19
reserved4	include/unwind_arm_ehabi.h	/^    uint32_t reserved4;$/;"	m	struct:_Unwind_Control_Block::__anon19
reserved5	include/unwind_arm_ehabi.h	/^    uint32_t reserved5;$/;"	m	struct:_Unwind_Control_Block::__anon19
resetCache	src/FrameHeaderCache.hpp	/^  void resetCache() {$/;"	f	class:FrameHeaderCache
restoreRegisterToInitialState	src/DwarfParser.hpp	/^    void restoreRegisterToInitialState(uint64_t reg, PrologInfo &initialState) {$/;"	f	struct:libunwind::CFI_Parser::PrologInfo
restoreSavedFloatRegisters	src/Registers.hpp	/^  void restoreSavedFloatRegisters() {$/;"	f	class:libunwind::Registers_arm
resumeLocation	src/Unwind-sjlj.c	/^  uint32_t                        resumeLocation;$/;"	m	struct:_Unwind_FunctionContext	file:
resumeLocation	src/Unwind-sjlj.c	/^  uint64_t                        resumeLocation;$/;"	m	struct:_Unwind_FunctionContext	file:
resumeParameters	src/Unwind-sjlj.c	/^  uint32_t                        resumeParameters[4];$/;"	m	struct:_Unwind_FunctionContext	file:
resumeParameters	src/Unwind-sjlj.c	/^  uint64_t                        resumeParameters[4];$/;"	m	struct:_Unwind_FunctionContext	file:
returnAddressRegister	src/DwarfParser.hpp	/^    uint8_t   returnAddressRegister;$/;"	m	struct:libunwind::CFI_Parser::CIE_Info
s390x_thread_state_t	src/Registers.hpp	/^  struct s390x_thread_state_t {$/;"	s	class:libunwind::Registers_s390x
sThisAddressSpace	src/AddressSpace.hpp	/^  static LocalAddressSpace sThisAddressSpace;$/;"	m	class:libunwind::LocalAddressSpace
saveVFPAsX	src/Registers.hpp	/^  void saveVFPAsX() {$/;"	f	class:libunwind::Registers_arm
saveVFPAsX	src/UnwindCursor.hpp	/^  virtual void saveVFPAsX() { _LIBUNWIND_ABORT("saveVFPAsX not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
saveVFPAsX	src/UnwindCursor.hpp	/^template <typename A, typename R> void UnwindCursor<A, R>::saveVFPAsX() {$/;"	f	class:libunwind::UnwindCursor
saveVFPAsX	src/UnwindCursor.hpp	/^template <typename A, typename R> void UnwindCursor<A, R>::saveVFPAsX() {}$/;"	f	class:libunwind::UnwindCursor
savedRegisters	src/DwarfParser.hpp	/^    RegisterLocation  savedRegisters[kMaxRegisterNumber + 1];$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
secondLevelPagesSectionOffset	include/mach-o/compact_unwind_encoding.h	/^    uint32_t        secondLevelPagesSectionOffset;  \/\/ section offset to start of regular or compress page$/;"	m	struct:unwind_info_section_header_index_entry
secondLevelPagesSectionOffset	src/UnwindCursor.hpp	/^  uint32_t secondLevelPagesSectionOffset(uint32_t index) const {$/;"	f	class:libunwind::UnwindSectionIndexArray
sects	src/AddressSpace.hpp	/^  UnwindInfoSections *sects;$/;"	m	struct:libunwind::dl_iterate_cb_data
setCR	src/Registers.hpp	/^  void      setCR(uint32_t value) { _registers.__cr = value; }$/;"	f	class:libunwind::Registers_ppc
setCR	src/Registers.hpp	/^  void      setCR(uint64_t value) { _registers.__cr = value; }$/;"	f	class:libunwind::Registers_ppc64
setDispatcherContext	src/UnwindCursor.hpp	/^  void setDispatcherContext(DISPATCHER_CONTEXT *disp) { _dispContext = *disp; }$/;"	f	class:libunwind::UnwindCursor
setEBP	src/Registers.hpp	/^  void      setEBP(uint32_t value) { _registers.__ebp = value; }$/;"	f	class:libunwind::Registers_x86
setEBX	src/Registers.hpp	/^  void      setEBX(uint32_t value) { _registers.__ebx = value; }$/;"	f	class:libunwind::Registers_x86
setECX	src/Registers.hpp	/^  void      setECX(uint32_t value) { _registers.__ecx = value; }$/;"	f	class:libunwind::Registers_x86
setEDI	src/Registers.hpp	/^  void      setEDI(uint32_t value) { _registers.__edi = value; }$/;"	f	class:libunwind::Registers_x86
setEDX	src/Registers.hpp	/^  void      setEDX(uint32_t value) { _registers.__edx = value; }$/;"	f	class:libunwind::Registers_x86
setESI	src/Registers.hpp	/^  void      setESI(uint32_t value) { _registers.__esi = value; }$/;"	f	class:libunwind::Registers_x86
setFP	src/Registers.hpp	/^  void      setFP(uint64_t value) { _registers.__fp = value; }$/;"	f	class:libunwind::Registers_arm64
setFloatReg	src/UnwindCursor.hpp	/^  virtual void setFloatReg(int, unw_fpreg_t) {$/;"	f	class:libunwind::AbstractUnwindCursor
setFloatReg	src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::setFloatReg(int regNum, unw_fpreg_t value) {$/;"	f	class:libunwind::UnwindCursor
setFloatRegister	src/Registers.hpp	/^inline void Registers_arm64::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_arm64
setFloatRegister	src/Registers.hpp	/^inline void Registers_arm::setFloatRegister(int regNum, unw_fpreg_t value) {$/;"	f	class:libunwind::Registers_arm
setFloatRegister	src/Registers.hpp	/^inline void Registers_hexagon::setFloatRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_hexagon
setFloatRegister	src/Registers.hpp	/^inline void Registers_loongarch::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_loongarch
setFloatRegister	src/Registers.hpp	/^inline void Registers_mips_newabi::setFloatRegister(int regNum,$/;"	f	class:libunwind::Registers_mips_newabi
setFloatRegister	src/Registers.hpp	/^inline void Registers_mips_o32::setFloatRegister(int regNum,$/;"	f	class:libunwind::Registers_mips_o32
setFloatRegister	src/Registers.hpp	/^inline void Registers_or1k::setFloatRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_or1k
setFloatRegister	src/Registers.hpp	/^inline void Registers_ppc64::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_ppc64
setFloatRegister	src/Registers.hpp	/^inline void Registers_ppc::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_ppc
setFloatRegister	src/Registers.hpp	/^inline void Registers_riscv::setFloatRegister(int regNum, fp_t value) {$/;"	f	class:libunwind::Registers_riscv
setFloatRegister	src/Registers.hpp	/^inline void Registers_s390x::setFloatRegister(int regNum, double value) {$/;"	f	class:libunwind::Registers_s390x
setFloatRegister	src/Registers.hpp	/^inline void Registers_sparc64::setFloatRegister(int, double) {$/;"	f	class:libunwind::Registers_sparc64
setFloatRegister	src/Registers.hpp	/^inline void Registers_sparc::setFloatRegister(int, double) {$/;"	f	class:libunwind::Registers_sparc
setFloatRegister	src/Registers.hpp	/^inline void Registers_ve::setFloatRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_ve
setFloatRegister	src/Registers.hpp	/^inline void Registers_x86::setFloatRegister(int, double) {$/;"	f	class:libunwind::Registers_x86
setFloatRegister	src/Registers.hpp	/^inline void Registers_x86_64::setFloatRegister(int, double) {$/;"	f	class:libunwind::Registers_x86_64
setIP	src/Registers.hpp	/^  void        setIP(reg_t value) { _registers[0] = value; }$/;"	f	class:libunwind::Registers_riscv
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value)  { _registers.__eip = value; }$/;"	f	class:libunwind::Registers_x86
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_arm
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_mips_o32
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_or1k
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__r[UNW_HEXAGON_PC] = value; }$/;"	f	class:libunwind::Registers_hexagon
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__regs[UNW_SPARC_O7] = value; }$/;"	f	class:libunwind::Registers_sparc
setIP	src/Registers.hpp	/^  void      setIP(uint32_t value) { _registers.__srr0 = value; }$/;"	f	class:libunwind::Registers_ppc
setIP	src/Registers.hpp	/^  void      setIP(uint64_t value)  { _registers.__rip = value; }$/;"	f	class:libunwind::Registers_x86_64
setIP	src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__ic = value; }$/;"	f	class:libunwind::Registers_ve
setIP	src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_arm64
setIP	src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_mips_newabi
setIP	src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__pswa = value; }$/;"	f	class:libunwind::Registers_s390x
setIP	src/Registers.hpp	/^  void      setIP(uint64_t value) { _registers.__srr0 = value; }$/;"	f	class:libunwind::Registers_ppc64
setIP	src/Registers.hpp	/^  void setIP(uint64_t value) { _registers.__pc = value; }$/;"	f	class:libunwind::Registers_loongarch
setIP	src/Registers.hpp	/^  void setIP(uint64_t value) { _registers.__regs[UNW_SPARC_O7] = value; }$/;"	f	class:libunwind::Registers_sparc64
setInfoBasedOnIPRegister	src/UnwindCursor.hpp	/^  virtual void setInfoBasedOnIPRegister(bool = false) {$/;"	f	class:libunwind::AbstractUnwindCursor
setInfoBasedOnIPRegister	src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::setInfoBasedOnIPRegister(bool isReturnAddress) {$/;"	f	class:libunwind::UnwindCursor
setInfoForSigReturn	src/UnwindCursor.hpp	/^  bool setInfoForSigReturn() {$/;"	f	class:libunwind::UnwindCursor
setInfoForSigReturn	src/UnwindCursor.hpp	/^  template <typename Registers> bool setInfoForSigReturn(Registers &) {$/;"	f	class:libunwind::UnwindCursor
setInfoForSigReturn	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::setInfoForSigReturn(Registers_arm64 &) {$/;"	f	class:libunwind::UnwindCursor
setInfoForSigReturn	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::setInfoForSigReturn(Registers_s390x &) {$/;"	f	class:libunwind::UnwindCursor
setLastPC	src/UnwindCursor.hpp	/^  void setLastPC(pint_t pc) { \/* FIXME: Implement *\/ }$/;"	f	class:libunwind::UnwindCursor
setLastPC	src/UnwindCursor.hpp	/^  void setLastPC(pint_t pc) { _dispContext.ControlPc = pc; }$/;"	f	class:libunwind::UnwindCursor
setR12	src/Registers.hpp	/^  void      setR12(uint64_t value) { _registers.__r12 = value; }$/;"	f	class:libunwind::Registers_x86_64
setR13	src/Registers.hpp	/^  void      setR13(uint64_t value) { _registers.__r13 = value; }$/;"	f	class:libunwind::Registers_x86_64
setR14	src/Registers.hpp	/^  void      setR14(uint64_t value) { _registers.__r14 = value; }$/;"	f	class:libunwind::Registers_x86_64
setR15	src/Registers.hpp	/^  void      setR15(uint64_t value) { _registers.__r15 = value; }$/;"	f	class:libunwind::Registers_x86_64
setRBP	src/Registers.hpp	/^  void      setRBP(uint64_t value) { _registers.__rbp = value; }$/;"	f	class:libunwind::Registers_x86_64
setRBX	src/Registers.hpp	/^  void      setRBX(uint64_t value) { _registers.__rbx = value; }$/;"	f	class:libunwind::Registers_x86_64
setReg	src/UnwindCursor.hpp	/^  virtual void setReg(int, unw_word_t) {$/;"	f	class:libunwind::AbstractUnwindCursor
setReg	src/UnwindCursor.hpp	/^void UnwindCursor<A, R>::setReg(int regNum, unw_word_t value) {$/;"	f	class:libunwind::UnwindCursor
setRegister	src/DwarfParser.hpp	/^    void setRegister(uint64_t reg, RegisterSavedWhere newLocation,$/;"	f	struct:libunwind::CFI_Parser::PrologInfo
setRegister	src/Registers.hpp	/^inline void Registers_arm64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_arm64
setRegister	src/Registers.hpp	/^inline void Registers_arm::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_arm
setRegister	src/Registers.hpp	/^inline void Registers_hexagon::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_hexagon
setRegister	src/Registers.hpp	/^inline void Registers_loongarch::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_loongarch
setRegister	src/Registers.hpp	/^inline void Registers_mips_newabi::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_mips_newabi
setRegister	src/Registers.hpp	/^inline void Registers_mips_o32::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_mips_o32
setRegister	src/Registers.hpp	/^inline void Registers_or1k::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_or1k
setRegister	src/Registers.hpp	/^inline void Registers_ppc64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_ppc64
setRegister	src/Registers.hpp	/^inline void Registers_ppc::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_ppc
setRegister	src/Registers.hpp	/^inline void Registers_riscv::setRegister(int regNum, reg_t value) {$/;"	f	class:libunwind::Registers_riscv
setRegister	src/Registers.hpp	/^inline void Registers_s390x::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_s390x
setRegister	src/Registers.hpp	/^inline void Registers_sparc64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_sparc64
setRegister	src/Registers.hpp	/^inline void Registers_sparc::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_sparc
setRegister	src/Registers.hpp	/^inline void Registers_ve::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_ve
setRegister	src/Registers.hpp	/^inline void Registers_x86::setRegister(int regNum, uint32_t value) {$/;"	f	class:libunwind::Registers_x86
setRegister	src/Registers.hpp	/^inline void Registers_x86_64::setRegister(int regNum, uint64_t value) {$/;"	f	class:libunwind::Registers_x86_64
setRegisterLocation	src/DwarfParser.hpp	/^    void setRegisterLocation(uint64_t reg, RegisterSavedWhere newLocation,$/;"	f	struct:libunwind::CFI_Parser::PrologInfo
setRegisterValue	src/DwarfParser.hpp	/^    void setRegisterValue(uint64_t reg, int64_t newValue,$/;"	f	struct:libunwind::CFI_Parser::PrologInfo
setSP	src/Registers.hpp	/^  void        setSP(reg_t value) { _registers[2] = value; }$/;"	f	class:libunwind::Registers_riscv
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value)  { _registers.__esp = value; }$/;"	f	class:libunwind::Registers_x86
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r1 = value; }$/;"	f	class:libunwind::Registers_ppc
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r[1] = value; }$/;"	f	class:libunwind::Registers_or1k
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r[29] = value; }$/;"	f	class:libunwind::Registers_mips_o32
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__r[UNW_HEXAGON_R29] = value; }$/;"	f	class:libunwind::Registers_hexagon
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__regs[UNW_SPARC_O6] = value; }$/;"	f	class:libunwind::Registers_sparc
setSP	src/Registers.hpp	/^  void      setSP(uint32_t value) { _registers.__sp = value; }$/;"	f	class:libunwind::Registers_arm
setSP	src/Registers.hpp	/^  void      setSP(uint64_t value)  { _registers.__rsp = value; }$/;"	f	class:libunwind::Registers_x86_64
setSP	src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__gpr[15] = value; }$/;"	f	class:libunwind::Registers_s390x
setSP	src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__r1 = value; }$/;"	f	class:libunwind::Registers_ppc64
setSP	src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__r[29] = value; }$/;"	f	class:libunwind::Registers_mips_newabi
setSP	src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__s[11] = value; }$/;"	f	class:libunwind::Registers_ve
setSP	src/Registers.hpp	/^  void      setSP(uint64_t value) { _registers.__sp = value; }$/;"	f	class:libunwind::Registers_arm64
setSP	src/Registers.hpp	/^  void setSP(uint64_t value) { _registers.__r[3] = value; }$/;"	f	class:libunwind::Registers_loongarch
setSP	src/Registers.hpp	/^  void setSP(uint64_t value) { _registers.__regs[UNW_SPARC_O6] = value - 2047; }$/;"	f	class:libunwind::Registers_sparc64
setVectorRegister	src/Registers.hpp	/^inline void Registers_arm64::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_arm64
setVectorRegister	src/Registers.hpp	/^inline void Registers_arm::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_arm
setVectorRegister	src/Registers.hpp	/^inline void Registers_hexagon::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_hexagon
setVectorRegister	src/Registers.hpp	/^inline void Registers_loongarch::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_loongarch
setVectorRegister	src/Registers.hpp	/^inline void Registers_mips_newabi::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_mips_newabi
setVectorRegister	src/Registers.hpp	/^inline void Registers_mips_o32::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_mips_o32
setVectorRegister	src/Registers.hpp	/^inline void Registers_or1k::setVectorRegister(int \/* regNum *\/, v128 \/* value *\/) {$/;"	f	class:libunwind::Registers_or1k
setVectorRegister	src/Registers.hpp	/^inline void Registers_ppc64::setVectorRegister(int regNum, v128 value) {$/;"	f	class:libunwind::Registers_ppc64
setVectorRegister	src/Registers.hpp	/^inline void Registers_ppc::setVectorRegister(int regNum, v128 value) {$/;"	f	class:libunwind::Registers_ppc
setVectorRegister	src/Registers.hpp	/^inline void Registers_riscv::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_riscv
setVectorRegister	src/Registers.hpp	/^inline void Registers_s390x::setVectorRegister(int \/*regNum*\/, v128 \/*value*\/) {$/;"	f	class:libunwind::Registers_s390x
setVectorRegister	src/Registers.hpp	/^inline void Registers_sparc64::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_sparc64
setVectorRegister	src/Registers.hpp	/^inline void Registers_sparc::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_sparc
setVectorRegister	src/Registers.hpp	/^inline void Registers_ve::setVectorRegister(int \/* regNum *\/,$/;"	f	class:libunwind::Registers_ve
setVectorRegister	src/Registers.hpp	/^inline void Registers_x86::setVectorRegister(int, v128) {$/;"	f	class:libunwind::Registers_x86
setVectorRegister	src/Registers.hpp	/^inline void Registers_x86_64::setVectorRegister(int regNum, v128 value) {$/;"	f	class:libunwind::Registers_x86_64
show_authors	docs/conf.py	/^show_authors = True$/;"	v
signExtendPrel31	src/Unwind-EHABI.h	/^static inline uint32_t signExtendPrel31(uint32_t data) {$/;"	f
signal_handler	test/signal_unwind.pass.cpp	/^void signal_handler(int signum) {$/;"	f
signal_handler	test/unwind_leaffunction.pass.cpp	/^void signal_handler(int signum) {$/;"	f
sint_t	src/AddressSpace.hpp	/^  typedef intptr_t  sint_t;$/;"	t	class:libunwind::LocalAddressSpace
sint_t	src/DwarfInstructions.hpp	/^  typedef typename A::sint_t sint_t;$/;"	t	class:libunwind::DwarfInstructions
size_type	src/UnwindCursor.hpp	/^  typedef size_t size_type;$/;"	t	struct:libunwind::EHABISectionIterator
source_suffix	docs/conf.py	/^source_suffix = '.rst'$/;"	v
sp	include/unwind_arm_ehabi.h	/^    uint32_t sp;$/;"	m	struct:_Unwind_Control_Block::__anon20
spExtraArgSize	src/DwarfParser.hpp	/^    uint32_t          spExtraArgSize;$/;"	m	struct:libunwind::CFI_Parser::PrologInfo
sparc64_thread_state_t	src/Registers.hpp	/^  struct sparc64_thread_state_t {$/;"	s	class:libunwind::Registers_sparc64
sparc_thread_state_t	src/Registers.hpp	/^  struct sparc_thread_state_t {$/;"	s	class:libunwind::Registers_sparc
stack	src/Unwind-sjlj.c	/^static _LIBUNWIND_THREAD_LOCAL struct _Unwind_FunctionContext *stack = NULL;$/;"	v	typeref:struct:_Unwind_FunctionContext	file:
start_ip	include/libunwind.h	/^  unw_word_t  start_ip;         \/* start address of function *\/$/;"	m	struct:unw_proc_info_t
step	src/UnwindCursor.hpp	/^  virtual int step() { _LIBUNWIND_ABORT("step not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
step	src/UnwindCursor.hpp	/^int UnwindCursor<A, R>::step() {$/;"	f	class:libunwind::UnwindCursor
stepThroughSigReturn	src/UnwindCursor.hpp	/^  int stepThroughSigReturn() {$/;"	f	class:libunwind::UnwindCursor
stepThroughSigReturn	src/UnwindCursor.hpp	/^  template <typename Registers> int stepThroughSigReturn(Registers &) {$/;"	f	class:libunwind::UnwindCursor
stepThroughSigReturn	src/UnwindCursor.hpp	/^int UnwindCursor<A, R>::stepThroughSigReturn(Registers_arm64 &) {$/;"	f	class:libunwind::UnwindCursor
stepThroughSigReturn	src/UnwindCursor.hpp	/^int UnwindCursor<A, R>::stepThroughSigReturn(Registers_s390x &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/CompactUnwinder.hpp	/^int CompactUnwinder_arm64<A>::stepWithCompactEncoding($/;"	f	class:libunwind::CompactUnwinder_arm64
stepWithCompactEncoding	src/CompactUnwinder.hpp	/^int CompactUnwinder_x86<A>::stepWithCompactEncoding($/;"	f	class:libunwind::CompactUnwinder_x86
stepWithCompactEncoding	src/CompactUnwinder.hpp	/^int CompactUnwinder_x86_64<A>::stepWithCompactEncoding($/;"	f	class:libunwind::CompactUnwinder_x86_64
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding() {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_arm64 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_loongarch &) { return UNW_EINVAL; }$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_mips_newabi &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_mips_o32 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_ppc &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_ppc64 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_riscv &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_sparc &) { return UNW_EINVAL; }$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_sparc64 &) { return UNW_EINVAL; }$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_x86 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncoding	src/UnwindCursor.hpp	/^  int stepWithCompactEncoding(Registers_x86_64 &) {$/;"	f	class:libunwind::UnwindCursor
stepWithCompactEncodingEBPFrame	src/CompactUnwinder.hpp	/^int CompactUnwinder_x86<A>::stepWithCompactEncodingEBPFrame($/;"	f	class:libunwind::CompactUnwinder_x86
stepWithCompactEncodingFrame	src/CompactUnwinder.hpp	/^int CompactUnwinder_arm64<A>::stepWithCompactEncodingFrame($/;"	f	class:libunwind::CompactUnwinder_arm64
stepWithCompactEncodingFrameless	src/CompactUnwinder.hpp	/^int CompactUnwinder_arm64<A>::stepWithCompactEncodingFrameless($/;"	f	class:libunwind::CompactUnwinder_arm64
stepWithCompactEncodingFrameless	src/CompactUnwinder.hpp	/^int CompactUnwinder_x86<A>::stepWithCompactEncodingFrameless($/;"	f	class:libunwind::CompactUnwinder_x86
stepWithCompactEncodingFrameless	src/CompactUnwinder.hpp	/^int CompactUnwinder_x86_64<A>::stepWithCompactEncodingFrameless($/;"	f	class:libunwind::CompactUnwinder_x86_64
stepWithCompactEncodingRBPFrame	src/CompactUnwinder.hpp	/^int CompactUnwinder_x86_64<A>::stepWithCompactEncodingRBPFrame($/;"	f	class:libunwind::CompactUnwinder_x86_64
stepWithDwarf	src/DwarfInstructions.hpp	/^int DwarfInstructions<A, R>::stepWithDwarf(A &addressSpace, pint_t pc,$/;"	f	class:libunwind::DwarfInstructions
stepWithDwarfFDE	src/UnwindCursor.hpp	/^  int stepWithDwarfFDE() {$/;"	f	class:libunwind::UnwindCursor
stepWithEHABI	src/UnwindCursor.hpp	/^  int stepWithEHABI() {$/;"	f	class:libunwind::UnwindCursor
stepWithSEHData	src/UnwindCursor.hpp	/^  int stepWithSEHData() { \/* FIXME: Implement *\/ return 0; }$/;"	f	class:libunwind::UnwindCursor
stepWithSEHData	src/UnwindCursor.hpp	/^  int stepWithSEHData() {$/;"	f	class:libunwind::UnwindCursor
stepWithTBTable	src/UnwindCursor.hpp	/^int UnwindCursor<A, R>::stepWithTBTable(pint_t pc, tbtable *TBTable,$/;"	f	class:libunwind::UnwindCursor
stepWithTBTableData	src/UnwindCursor.hpp	/^  int stepWithTBTableData() {$/;"	f	class:libunwind::UnwindCursor
stepper	test/bad_unwind_info.pass.cpp	/^extern "C" void stepper() {$/;"	f
stop	test/forceunwind.pass.cpp	/^_Unwind_Reason_Code stop(int version, _Unwind_Action actions,$/;"	f
table	src/EHHeaderParser.hpp	/^    pint_t table;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
table_enc	src/EHHeaderParser.hpp	/^    uint8_t table_enc;$/;"	m	struct:libunwind::EHHeaderParser::EHHeaderInfo
targetAddr	src/AddressSpace.hpp	/^  uintptr_t targetAddr;$/;"	m	struct:libunwind::dl_iterate_cb_data
tbase	include/unwind.h	/^  uintptr_t tbase;$/;"	m	struct:dwarf_eh_bases
templates_path	docs/conf.py	/^templates_path = ['_templates']$/;"	v
test	test/libunwind_02.pass.cpp	/^int test(int i) {$/;"	f
test	test/signal_frame.pass.cpp	/^void test() {$/;"	f
test1	test/libunwind_01.pass.cpp	/^__attribute__((noinline)) void test1(int i) {$/;"	f
test2	test/libunwind_01.pass.cpp	/^__attribute__((noinline)) void test2(int i, int j) {$/;"	f
test3	test/libunwind_01.pass.cpp	/^__attribute__((noinline)) void test3(int i, int j, int k) {$/;"	f
test_backtrace	test/libunwind_02.pass.cpp	/^void test_backtrace() {$/;"	f
test_fpreg_get_set	test/libunwind_01.pass.cpp	/^void test_fpreg_get_set() {$/;"	f
test_fpreg_get_set	test/libunwind_01.pass.cpp	/^void test_fpreg_get_set() {}$/;"	f
test_no_info	test/libunwind_01.pass.cpp	/^void test_no_info() {$/;"	f
test_reg_get_set	test/libunwind_01.pass.cpp	/^void test_reg_get_set() {$/;"	f
test_reg_get_set	test/libunwind_01.pass.cpp	/^void test_reg_get_set() {}$/;"	f
test_reg_names	test/libunwind_01.pass.cpp	/^void test_reg_names() {$/;"	f
test_unw_resume	test/unw_resume.pass.cpp	/^void test_unw_resume() {$/;"	f
texinfo_documents	docs/conf.py	/^texinfo_documents = [$/;"	v
text_segment_length	src/AddressSpace.hpp	/^  size_t          text_segment_length;$/;"	m	struct:libunwind::UnwindInfoSections
today_fmt	docs/conf.py	/^today_fmt = '%Y-%m-%d'$/;"	v
todo_include_todos	docs/conf.py	/^todo_include_todos = True$/;"	v
unlock	src/RWMutex.hpp	/^  bool unlock() { return true; }$/;"	f	class:libunwind::RWMutex
unlock_shared	src/RWMutex.hpp	/^  bool unlock_shared() { return true; }$/;"	f	class:libunwind::RWMutex
unw_addr_space_t	include/libunwind.h	/^typedef struct unw_addr_space *unw_addr_space_t;$/;"	t	typeref:struct:unw_addr_space
unw_context_t	include/libunwind.h	/^struct unw_context_t {$/;"	s
unw_context_t	include/libunwind.h	/^typedef struct unw_context_t unw_context_t;$/;"	t	typeref:struct:unw_context_t
unw_cursor_t	include/libunwind.h	/^struct unw_cursor_t {$/;"	s
unw_cursor_t	include/libunwind.h	/^typedef struct unw_cursor_t unw_cursor_t;$/;"	t	typeref:struct:unw_cursor_t
unw_fpreg_t	include/libunwind.h	/^typedef double unw_fpreg_t;$/;"	t
unw_fpreg_t	include/libunwind.h	/^typedef uint64_t unw_fpreg_t;$/;"	t
unw_local_addr_space	src/libunwind.cpp	/^_LIBUNWIND_EXPORT unw_addr_space_t unw_local_addr_space =$/;"	v
unw_proc_info_t	include/libunwind.h	/^struct unw_proc_info_t {$/;"	s
unw_proc_info_t	include/libunwind.h	/^typedef struct unw_proc_info_t unw_proc_info_t;$/;"	t	typeref:struct:unw_proc_info_t
unw_regnum_t	include/libunwind.h	/^typedef int unw_regnum_t;$/;"	t
unw_word_t	include/libunwind.h	/^typedef uintptr_t unw_word_t;$/;"	t
unwindOneFrame	src/Unwind-EHABI.cpp	/^static _Unwind_Reason_Code unwindOneFrame(_Unwind_State state,$/;"	f	namespace:__anon34
unwind_info	include/libunwind.h	/^  unw_word_t  unwind_info;      \/* address of DWARF unwind info, or zero *\/$/;"	m	struct:unw_proc_info_t
unwind_info_compressed_second_level_page_header	include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_compressed_second_level_page_header$/;"	s
unwind_info_regular_second_level_entry	include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_regular_second_level_entry$/;"	s
unwind_info_regular_second_level_page_header	include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_regular_second_level_page_header$/;"	s
unwind_info_section_header	include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_section_header$/;"	s
unwind_info_section_header_index_entry	include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_section_header_index_entry$/;"	s
unwind_info_section_header_lsda_index_entry	include/mach-o/compact_unwind_encoding.h	/^struct unwind_info_section_header_lsda_index_entry$/;"	s
unwind_info_size	include/libunwind.h	/^  uint32_t    unwind_info_size; \/* size of DWARF unwind info, or zero if none *\/$/;"	m	struct:unw_proc_info_t
unwind_phase1	src/Unwind-EHABI.cpp	/^unwind_phase1(unw_context_t *uc, unw_cursor_t *cursor, _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase1	src/Unwind-sjlj.c	/^unwind_phase1(struct _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase1	src/UnwindLevel1.c	/^unwind_phase1(unw_context_t *uc, unw_cursor_t *cursor, _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase2	src/Unwind-EHABI.cpp	/^static _Unwind_Reason_Code unwind_phase2(unw_context_t *uc, unw_cursor_t *cursor,$/;"	f	file:
unwind_phase2	src/Unwind-sjlj.c	/^unwind_phase2(struct _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase2	src/UnwindLevel1.c	/^unwind_phase2(unw_context_t *uc, unw_cursor_t *cursor, _Unwind_Exception *exception_object) {$/;"	f	file:
unwind_phase2_forced	src/Unwind-EHABI.cpp	/^unwind_phase2_forced(unw_context_t *uc, unw_cursor_t *cursor,$/;"	f	file:
unwind_phase2_forced	src/Unwind-seh.cpp	/^unwind_phase2_forced(unw_context_t *uc,$/;"	f	file:
unwind_phase2_forced	src/Unwind-sjlj.c	/^unwind_phase2_forced(struct _Unwind_Exception *exception_object,$/;"	f	file:
unwind_phase2_forced	src/UnwindLevel1.c	/^unwind_phase2_forced(unw_context_t *uc, unw_cursor_t *cursor,$/;"	f	file:
unwinder_cache	include/unwind_arm_ehabi.h	/^  } unwinder_cache;$/;"	m	struct:_Unwind_Control_Block	typeref:struct:_Unwind_Control_Block::__anon19
v	src/Registers.hpp	/^    v128 v;$/;"	m	union:libunwind::Registers_ppc64::ppc64_vsr_t
v128	src/Registers.hpp	/^struct v128 { uint32_t vec[4]; };$/;"	s	namespace:libunwind
v2	src/Registers.hpp	/^      uint64_t v2;$/;"	m	struct:libunwind::Registers_ppc64::ppc64_vsr_t::asfloat_s
validFloatReg	src/UnwindCursor.hpp	/^  virtual bool validFloatReg(int) {$/;"	f	class:libunwind::AbstractUnwindCursor
validFloatReg	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::validFloatReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
validFloatRegister	src/Registers.hpp	/^  bool        validFloatRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_x86
validFloatRegister	src/Registers.hpp	/^  bool        validFloatRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_x86_64
validFloatRegister	src/Registers.hpp	/^inline bool Registers_arm64::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
validFloatRegister	src/Registers.hpp	/^inline bool Registers_arm::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm
validFloatRegister	src/Registers.hpp	/^inline bool Registers_hexagon::validFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_hexagon
validFloatRegister	src/Registers.hpp	/^inline bool Registers_loongarch::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_loongarch
validFloatRegister	src/Registers.hpp	/^inline bool Registers_mips_newabi::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_newabi
validFloatRegister	src/Registers.hpp	/^inline bool Registers_mips_o32::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_o32
validFloatRegister	src/Registers.hpp	/^inline bool Registers_or1k::validFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
validFloatRegister	src/Registers.hpp	/^inline bool Registers_ppc64::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
validFloatRegister	src/Registers.hpp	/^inline bool Registers_ppc::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
validFloatRegister	src/Registers.hpp	/^inline bool Registers_riscv::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_riscv
validFloatRegister	src/Registers.hpp	/^inline bool Registers_s390x::validFloatRegister(int regNum) const {$/;"	f	class:libunwind::Registers_s390x
validFloatRegister	src/Registers.hpp	/^inline bool Registers_sparc64::validFloatRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_sparc64
validFloatRegister	src/Registers.hpp	/^inline bool Registers_sparc::validFloatRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_sparc
validFloatRegister	src/Registers.hpp	/^inline bool Registers_ve::validFloatRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_ve
validReg	src/UnwindCursor.hpp	/^  virtual bool validReg(int) { _LIBUNWIND_ABORT("validReg not implemented"); }$/;"	f	class:libunwind::AbstractUnwindCursor
validReg	src/UnwindCursor.hpp	/^bool UnwindCursor<A, R>::validReg(int regNum) {$/;"	f	class:libunwind::UnwindCursor
validRegister	src/Registers.hpp	/^inline bool Registers_arm64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm64
validRegister	src/Registers.hpp	/^inline bool Registers_arm::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_arm
validRegister	src/Registers.hpp	/^inline bool Registers_hexagon::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_hexagon
validRegister	src/Registers.hpp	/^inline bool Registers_loongarch::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_loongarch
validRegister	src/Registers.hpp	/^inline bool Registers_mips_newabi::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_newabi
validRegister	src/Registers.hpp	/^inline bool Registers_mips_o32::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_mips_o32
validRegister	src/Registers.hpp	/^inline bool Registers_or1k::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_or1k
validRegister	src/Registers.hpp	/^inline bool Registers_ppc64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
validRegister	src/Registers.hpp	/^inline bool Registers_ppc::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
validRegister	src/Registers.hpp	/^inline bool Registers_riscv::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_riscv
validRegister	src/Registers.hpp	/^inline bool Registers_s390x::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_s390x
validRegister	src/Registers.hpp	/^inline bool Registers_sparc64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_sparc64
validRegister	src/Registers.hpp	/^inline bool Registers_sparc::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_sparc
validRegister	src/Registers.hpp	/^inline bool Registers_ve::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ve
validRegister	src/Registers.hpp	/^inline bool Registers_x86::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86
validRegister	src/Registers.hpp	/^inline bool Registers_x86_64::validRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
validVectorRegister	src/Registers.hpp	/^  bool        validVectorRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_x86
validVectorRegister	src/Registers.hpp	/^inline bool Registers_arm64::validVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm64
validVectorRegister	src/Registers.hpp	/^inline bool Registers_arm::validVectorRegister(int) const {$/;"	f	class:libunwind::Registers_arm
validVectorRegister	src/Registers.hpp	/^inline bool Registers_hexagon::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_hexagon
validVectorRegister	src/Registers.hpp	/^inline bool Registers_loongarch::validVectorRegister(int) const {$/;"	f	class:libunwind::Registers_loongarch
validVectorRegister	src/Registers.hpp	/^inline bool Registers_mips_newabi::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_newabi
validVectorRegister	src/Registers.hpp	/^inline bool Registers_mips_o32::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_mips_o32
validVectorRegister	src/Registers.hpp	/^inline bool Registers_or1k::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_or1k
validVectorRegister	src/Registers.hpp	/^inline bool Registers_ppc64::validVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc64
validVectorRegister	src/Registers.hpp	/^inline bool Registers_ppc::validVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_ppc
validVectorRegister	src/Registers.hpp	/^inline bool Registers_riscv::validVectorRegister(int) const {$/;"	f	class:libunwind::Registers_riscv
validVectorRegister	src/Registers.hpp	/^inline bool Registers_s390x::validVectorRegister(int \/*regNum*\/) const {$/;"	f	class:libunwind::Registers_s390x
validVectorRegister	src/Registers.hpp	/^inline bool Registers_sparc64::validVectorRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_sparc64
validVectorRegister	src/Registers.hpp	/^inline bool Registers_sparc::validVectorRegister(int) const { return false; }$/;"	f	class:libunwind::Registers_sparc
validVectorRegister	src/Registers.hpp	/^inline bool Registers_ve::validVectorRegister(int \/* regNum *\/) const {$/;"	f	class:libunwind::Registers_ve
validVectorRegister	src/Registers.hpp	/^inline bool Registers_x86_64::validVectorRegister(int regNum) const {$/;"	f	class:libunwind::Registers_x86_64
value	src/DwarfParser.hpp	/^    int64_t value;$/;"	m	struct:libunwind::CFI_Parser::RegisterLocation
value_type	src/UnwindCursor.hpp	/^  typedef typename A::pint_t value_type;$/;"	t	struct:libunwind::EHABISectionIterator
ve_thread_state_t	src/Registers.hpp	/^  struct ve_thread_state_t {$/;"	s	class:libunwind::Registers_ve
vec	src/Registers.hpp	/^struct v128 { uint32_t vec[4]; };$/;"	m	struct:libunwind::v128
version	docs/conf.py	/^version = '15.0'$/;"	v
version	include/mach-o/compact_unwind_encoding.h	/^    uint32_t    version;            \/\/ UNWIND_SECTION_VERSION$/;"	m	struct:unwind_info_section_header
version	src/UnwindCursor.hpp	/^  uint32_t version() const {$/;"	f	class:libunwind::UnwindSectionHeader
xlcPersonalityV0	src/UnwindCursor.hpp	/^static __xlcxx_personality_v0_t *xlcPersonalityV0;$/;"	m	namespace:libunwind
xlcPersonalityV0InitLock	src/UnwindCursor.hpp	/^static RWMutex xlcPersonalityV0InitLock;$/;"	m	namespace:libunwind
~AbstractUnwindCursor	src/UnwindCursor.hpp	/^  virtual ~AbstractUnwindCursor() {}$/;"	f	class:libunwind::AbstractUnwindCursor
~RememberStack	src/DwarfParser.hpp	/^    ~RememberStack() {$/;"	f	struct:libunwind::CFI_Parser::RememberStack
~UnwindCursor	src/UnwindCursor.hpp	/^  virtual             ~UnwindCursor() {}$/;"	f	class:libunwind::UnwindCursor
