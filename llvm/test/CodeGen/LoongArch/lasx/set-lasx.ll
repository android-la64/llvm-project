; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <32 x i8> @seti8(<32 x i8>) {
; CHECK-LABEL: seti8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitseti.b $xr0, $xr0, 6
; CHECK-NEXT:    jr $ra
  %2 = or <32 x i8> %0, <i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64, i8 64>
  ret <32 x i8> %2
}

define <16 x i16> @seti16(<16 x i16>) {
; CHECK-LABEL: seti16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitseti.h $xr0, $xr0, 6
; CHECK-NEXT:    jr $ra
  %2 = or <16 x i16> %0, <i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64, i16 64>
  ret <16 x i16> %2
}

define <8 x i32> @seti32(<8 x i32>) {
; CHECK-LABEL: seti32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitseti.w $xr0, $xr0, 6
; CHECK-NEXT:    jr $ra
  %2 = or <8 x i32> %0, <i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64, i32 64>
  ret <8 x i32> %2
}

define <4 x i64> @seti64(<4 x i64>) {
; CHECK-LABEL: seti64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitseti.d $xr0, $xr0, 6
; CHECK-NEXT:    jr $ra
  %2 = or <4 x i64> %0, <i64 64, i64 64, i64 64, i64 64>
  ret <4 x i64> %2
}
