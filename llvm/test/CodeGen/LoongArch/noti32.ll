; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 < %s | FileCheck %s

define i8 @nor_i8(i8 %a, i8 %b) nounwind {
; CHECK-LABEL: nor_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or $r4, $r4, $r5
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
  %or = or i8 %a, %b
  %neg = xor i8 %or, -1
  ret i8 %neg
}

define i16 @nor_i16(i16 %a, i16 %b) nounwind {
; CHECK-LABEL: nor_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or $r4, $r4, $r5
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
  %or = or i16 %a, %b
  %neg = xor i16 %or, -1
  ret i16 %neg
}

define i32 @nor_i32(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: nor_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    or $r4, $r4, $r5
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
  %or = or i32 %a, %b
  %neg = xor i32 %or, -1
  ret i32 %neg
}

define i8 @nor_zero_i8(i8 %a) nounwind {
; CHECK-LABEL: nor_zero_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
  %neg = xor i8 %a, -1
  ret i8 %neg
}

define i16 @nor_zero_i16(i16 %a) nounwind {
; CHECK-LABEL: nor_zero_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
  %neg = xor i16 %a, -1
  ret i16 %neg
}

define i32 @nor_zero_i32(i32 %a) nounwind {
; CHECK-LABEL: nor_zero_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    nor $r4, $zero, $r4
; CHECK-NEXT:    jr $ra
  %neg = xor i32 %a, -1
  ret i32 %neg
}

define i8 @orn_i8(i8 %a, i8 %b) nounwind {
; CHECK-LABEL: orn_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    nor $r5, $zero, $r5
; CHECK-NEXT:    or $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
  %neg = xor i8 %b, -1
  %or = or i8 %neg, %a
  ret i8 %or
}

define i16 @orn_i16(i16 %a, i16 %b) nounwind {
; CHECK-LABEL: orn_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    nor $r5, $zero, $r5
; CHECK-NEXT:    or $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
  %neg = xor i16 %b, -1
  %or = or i16 %neg, %a
  ret i16 %or
}

define i32 @orn_i32(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: orn_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    nor $r5, $zero, $r5
; CHECK-NEXT:    or $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
  %neg = xor i32 %b, -1
  %or = or i32 %neg, %a
  ret i32 %or
}

define i8 @andn_i8(i8 %a, i8 %b) nounwind {
; CHECK-LABEL: andn_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    andn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
  %neg = xor i8 %b, -1
  %and = and i8 %neg, %a
  ret i8 %and
}

define i16 @andn_i16(i16 %a, i16 %b) nounwind {
; CHECK-LABEL: andn_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    andn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
  %neg = xor i16 %b, -1
  %and = and i16 %neg, %a
  ret i16 %and
}

define i32 @andn_i32(i32 %a, i32 %b) nounwind {
; CHECK-LABEL: andn_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    andn $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
  %neg = xor i32 %b, -1
  %and = and i32 %neg, %a
  ret i32 %and
}
