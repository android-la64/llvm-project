; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lsx  < %s | FileCheck %s

define <16 x i8> @clri8(<16 x i8> %b, <16 x i8> %c) {
; CHECK-LABEL: clri8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vbitclr.b $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
entry:
  %shl = shl <16 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, %c
  %xor = xor <16 x i8> %shl, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %and = and <16 x i8> %xor, %b
  ret <16 x i8> %and
}

define <8 x i16> @clri16(<8 x i16> %b, <8 x i16> %c) {
; CHECK-LABEL: clri16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vbitclr.h $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
entry:
  %shl = shl <8 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, %c
  %xor = xor <8 x i16> %shl, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %and = and <8 x i16> %xor, %b
  ret <8 x i16> %and
}

define <4 x i32> @clri32(<4 x i32> %b, <4 x i32> %c) {
; CHECK-LABEL: clri32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vbitclr.w $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
entry:
  %shl = shl <4 x i32> <i32 1, i32 1, i32 1, i32 1>, %c
  %xor = xor <4 x i32> %shl, <i32 -1, i32 -1, i32 -1, i32 -1>
  %and = and <4 x i32> %xor, %b
  ret <4 x i32> %and
}

define <2 x i64> @clri64(<2 x i64> %b, <2 x i64> %c) {
; CHECK-LABEL: clri64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    vbitclr.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
entry:
  %shl = shl <2 x i64> <i64 1, i64 1>, %c
  %xor = xor <2 x i64> %shl, <i64 -1, i64 -1>
  %and = and <2 x i64> %xor, %b
  ret <2 x i64> %and
}
