; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 --verify-machineinstrs < %s | FileCheck %s

define i8 @atomicrmw_umax_i8_acquire(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i8_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB0_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB0_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i8 %b acquire
  ret i8 %1
}

define i16 @atomicrmw_umax_i16_acquire(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i16_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB1_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB1_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i16 %b acquire
  ret i16 %1
}

define i32 @atomicrmw_umax_i32_acquire(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i32_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i32 %b acquire
  ret i32 %1
}

define i64 @atomicrmw_umax_i64_acquire(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i64_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i64 %b acquire
  ret i64 %1
}

define i8 @atomicrmw_umin_i8_acquire(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i8_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB4_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB4_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i8 %b acquire
  ret i8 %1
}

define i16 @atomicrmw_umin_i16_acquire(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i16_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB5_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB5_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i16 %b acquire
  ret i16 %1
}

define i32 @atomicrmw_umin_i32_acquire(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i32_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i32 %b acquire
  ret i32 %1
}

define i64 @atomicrmw_umin_i64_acquire(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i64_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i64 %b acquire
  ret i64 %1
}

define i8 @atomicrmw_max_i8_acquire(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i8_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB8_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB8_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i8 %b acquire
  ret i8 %1
}

define i16 @atomicrmw_max_i16_acquire(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i16_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB9_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB9_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i16 %b acquire
  ret i16 %1
}

define i32 @atomicrmw_max_i32_acquire(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i32_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i32 %b acquire
  ret i32 %1
}

define i64 @atomicrmw_max_i64_acquire(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i64_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i64 %b acquire
  ret i64 %1
}

define i8 @atomicrmw_min_i8_acquire(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i8_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB12_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB12_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i8 %b acquire
  ret i8 %1
}

define i16 @atomicrmw_min_i16_acquire(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i16_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB13_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB13_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i16 %b acquire
  ret i16 %1
}

define i32 @atomicrmw_min_i32_acquire(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i32_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i32 %b acquire
  ret i32 %1
}

define i64 @atomicrmw_min_i64_acquire(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i64_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i64 %b acquire
  ret i64 %1
}

define i8 @atomicrmw_umax_i8_release(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i8_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB16_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB16_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i8 %b release
  ret i8 %1
}

define i16 @atomicrmw_umax_i16_release(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i16_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB17_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB17_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i16 %b release
  ret i16 %1
}

define i32 @atomicrmw_umax_i32_release(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i32_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i32 %b release
  ret i32 %1
}

define i64 @atomicrmw_umax_i64_release(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i64_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i64 %b release
  ret i64 %1
}

define i8 @atomicrmw_umin_i8_release(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i8_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB20_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB20_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i8 %b release
  ret i8 %1
}

define i16 @atomicrmw_umin_i16_release(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i16_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB21_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB21_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i16 %b release
  ret i16 %1
}

define i32 @atomicrmw_umin_i32_release(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i32_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i32 %b release
  ret i32 %1
}

define i64 @atomicrmw_umin_i64_release(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i64_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i64 %b release
  ret i64 %1
}

define i8 @atomicrmw_max_i8_release(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i8_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB24_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB24_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i8 %b release
  ret i8 %1
}

define i16 @atomicrmw_max_i16_release(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i16_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB25_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB25_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i16 %b release
  ret i16 %1
}

define i32 @atomicrmw_max_i32_release(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i32_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i32 %b release
  ret i32 %1
}

define i64 @atomicrmw_max_i64_release(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i64_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i64 %b release
  ret i64 %1
}

define i8 @atomicrmw_min_i8_release(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i8_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB28_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB28_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i8 %b release
  ret i8 %1
}

define i16 @atomicrmw_min_i16_release(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i16_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB29_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB29_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i16 %b release
  ret i16 %1
}

define i32 @atomicrmw_min_i32_release(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i32_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i32 %b release
  ret i32 %1
}

define i64 @atomicrmw_min_i64_release(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i64_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i64 %b release
  ret i64 %1
}

define i8 @atomicrmw_umax_i8_acq_rel(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i8_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB32_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB32_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i8 %b acq_rel
  ret i8 %1
}

define i16 @atomicrmw_umax_i16_acq_rel(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i16_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB33_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB33_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i16 %b acq_rel
  ret i16 %1
}

define i32 @atomicrmw_umax_i32_acq_rel(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i32_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i32 %b acq_rel
  ret i32 %1
}

define i64 @atomicrmw_umax_i64_acq_rel(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i64_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i64 %b acq_rel
  ret i64 %1
}

define i8 @atomicrmw_umin_i8_acq_rel(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i8_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB36_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB36_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i8 %b acq_rel
  ret i8 %1
}

define i16 @atomicrmw_umin_i16_acq_rel(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i16_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB37_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB37_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i16 %b acq_rel
  ret i16 %1
}

define i32 @atomicrmw_umin_i32_acq_rel(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i32_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i32 %b acq_rel
  ret i32 %1
}

define i64 @atomicrmw_umin_i64_acq_rel(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i64_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i64 %b acq_rel
  ret i64 %1
}

define i8 @atomicrmw_max_i8_acq_rel(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i8_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB40_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB40_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i8 %b acq_rel
  ret i8 %1
}

define i16 @atomicrmw_max_i16_acq_rel(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i16_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB41_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB41_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i16 %b acq_rel
  ret i16 %1
}

define i32 @atomicrmw_max_i32_acq_rel(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i32_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i32 %b acq_rel
  ret i32 %1
}

define i64 @atomicrmw_max_i64_acq_rel(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i64_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i64 %b acq_rel
  ret i64 %1
}

define i8 @atomicrmw_min_i8_acq_rel(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i8_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB44_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB44_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i8 %b acq_rel
  ret i8 %1
}

define i16 @atomicrmw_min_i16_acq_rel(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i16_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB45_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB45_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i16 %b acq_rel
  ret i16 %1
}

define i32 @atomicrmw_min_i32_acq_rel(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i32_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i32 %b acq_rel
  ret i32 %1
}

define i64 @atomicrmw_min_i64_acq_rel(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i64_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i64 %b acq_rel
  ret i64 %1
}

define i8 @atomicrmw_umax_i8_seq_cst(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i8_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB48_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB48_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i8 %b seq_cst
  ret i8 %1
}

define i16 @atomicrmw_umax_i16_seq_cst(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i16_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB49_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB49_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i16 %b seq_cst
  ret i16 %1
}

define i32 @atomicrmw_umax_i32_seq_cst(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i32_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i32 %b seq_cst
  ret i32 %1
}

define i64 @atomicrmw_umax_i64_seq_cst(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i64_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i64 %b seq_cst
  ret i64 %1
}

define i8 @atomicrmw_umin_i8_seq_cst(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i8_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB52_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB52_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i8 %b seq_cst
  ret i8 %1
}

define i16 @atomicrmw_umin_i16_seq_cst(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i16_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB53_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB53_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i16 %b seq_cst
  ret i16 %1
}

define i32 @atomicrmw_umin_i32_seq_cst(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i32_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i32 %b seq_cst
  ret i32 %1
}

define i64 @atomicrmw_umin_i64_seq_cst(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i64_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i64 %b seq_cst
  ret i64 %1
}

define i8 @atomicrmw_max_i8_seq_cst(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i8_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB56_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB56_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i8 %b seq_cst
  ret i8 %1
}

define i16 @atomicrmw_max_i16_seq_cst(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i16_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB57_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB57_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i16 %b seq_cst
  ret i16 %1
}

define i32 @atomicrmw_max_i32_seq_cst(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i32_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i32 %b seq_cst
  ret i32 %1
}

define i64 @atomicrmw_max_i64_seq_cst(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i64_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i64 %b seq_cst
  ret i64 %1
}

define i8 @atomicrmw_min_i8_seq_cst(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i8_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB60_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB60_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i8 %b seq_cst
  ret i8 %1
}

define i16 @atomicrmw_min_i16_seq_cst(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i16_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB61_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB61_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i16 %b seq_cst
  ret i16 %1
}

define i32 @atomicrmw_min_i32_seq_cst(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i32_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i32 %b seq_cst
  ret i32 %1
}

define i64 @atomicrmw_min_i64_seq_cst(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i64_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i64 %b seq_cst
  ret i64 %1
}

define i8 @atomicrmw_umax_i8_monotonic(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i8_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB64_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB64_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i8 %b monotonic
  ret i8 %1
}

define i16 @atomicrmw_umax_i16_monotonic(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i16_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB65_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB65_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i16 %b monotonic
  ret i16 %1
}

define i32 @atomicrmw_umax_i32_monotonic(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i32_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i32 %b monotonic
  ret i32 %1
}

define i64 @atomicrmw_umax_i64_monotonic(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umax_i64_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umax ptr %a, i64 %b monotonic
  ret i64 %1
}

define i8 @atomicrmw_umin_i8_monotonic(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i8_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB68_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB68_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i8 %b monotonic
  ret i8 %1
}

define i16 @atomicrmw_umin_i16_monotonic(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i16_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB69_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    sltu $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB69_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i16 %b monotonic
  ret i16 %1
}

define i32 @atomicrmw_umin_i32_monotonic(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i32_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.wu $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i32 %b monotonic
  ret i32 %1
}

define i64 @atomicrmw_umin_i64_monotonic(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_umin_i64_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.du $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw umin ptr %a, i64 %b monotonic
  ret i64 %1
}

define i8 @atomicrmw_max_i8_monotonic(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i8_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB72_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB72_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i8 %b monotonic
  ret i8 %1
}

define i16 @atomicrmw_max_i16_monotonic(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i16_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB73_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    masknez $r11, $r14, $r13
; CHECK-NEXT:    maskeqz $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB73_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i16 %b monotonic
  ret i16 %1
}

define i32 @atomicrmw_max_i32_monotonic(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i32_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i32 %b monotonic
  ret i32 %1
}

define i64 @atomicrmw_max_i64_monotonic(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_max_i64_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammax_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw max ptr %a, i64 %b monotonic
  ret i64 %1
}

define i8 @atomicrmw_min_i8_monotonic(ptr %a, i8 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i8_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    ori $r4, $zero, 255
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB76_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB76_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.b $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i8 %b monotonic
  ret i8 %1
}

define i16 @atomicrmw_min_i16_monotonic(ptr %a, i16 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i16_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    addi.d $r6, $zero, -4
; CHECK-NEXT:    and $r6, $r4, $r6
; CHECK-NEXT:    andi $r4, $r4, 3
; CHECK-NEXT:    slli.w $r7, $r4, 3
; CHECK-NEXT:    lu12i.w $r4, 15
; CHECK-NEXT:    ori $r4, $r4, 4095
; CHECK-NEXT:    sll.w $r8, $r4, $r7
; CHECK-NEXT:    nor $r9, $zero, $r8
; CHECK-NEXT:    sll.w $r5, $r5, $r7
; CHECK-NEXT:  .LBB77_1: # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    ll.w $r10, $r6, 0
; CHECK-NEXT:    and $r14, $r10, $r8
; CHECK-NEXT:    and $r5, $r5, $r8
; CHECK-NEXT:    slt $r13, $r14, $r5
; CHECK-NEXT:    maskeqz $r11, $r14, $r13
; CHECK-NEXT:    masknez $r13, $r5, $r13
; CHECK-NEXT:    or $r11, $r11, $r13
; CHECK-NEXT:    and $r12, $r10, $r9
; CHECK-NEXT:    or $r12, $r12, $r11
; CHECK-NEXT:    sc.w $r12, $r6, 0
; CHECK-NEXT:    beq $r12, $zero, .LBB77_1
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    and $r4, $r10, $r8
; CHECK-NEXT:    srl.w $r4, $r4, $r7
; CHECK-NEXT:    ext.w.h $r4, $r4
; CHECK-NEXT:  # %bb.3:
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i16 %b monotonic
  ret i16 %1
}

define i32 @atomicrmw_min_i32_monotonic(ptr %a, i32 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i32_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r6, $r5, 0
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.w $r5, $r6, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r5
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i32 %b monotonic
  ret i32 %1
}

define i64 @atomicrmw_min_i64_monotonic(ptr %a, i64 %b) nounwind {
; CHECK-LABEL: atomicrmw_min_i64_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:  # %bb.1:
; CHECK-NEXT:    ammin_db.d $r6, $r5, $r4, 0
; CHECK-NEXT:  # %bb.2:
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
  %1 = atomicrmw min ptr %a, i64 %b monotonic
  ret i64 %1
}
