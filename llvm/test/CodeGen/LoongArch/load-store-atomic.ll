; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 < %s | FileCheck %s

define i8 @load_acquire_i8(ptr %ptr) {
; CHECK-LABEL: load_acquire_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.b $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i8, ptr %ptr acquire, align 1
  ret i8 %val
}

define i16 @load_acquire_i16(ptr %ptr) {
; CHECK-LABEL: load_acquire_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.h $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i16, ptr %ptr acquire, align 2
  ret i16 %val
}

define i32 @load_acquire_i32(ptr %ptr) {
; CHECK-LABEL: load_acquire_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i32, ptr %ptr acquire, align 4
  ret i32 %val
}

define i64 @load_acquire_i64(ptr %ptr) {
; CHECK-LABEL: load_acquire_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.d $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i64, ptr %ptr acquire, align 8
  ret i64 %val
}

define i8 @load_unordered_i8(ptr %ptr) {
; CHECK-LABEL: load_unordered_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.b $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i8, ptr %ptr unordered, align 1
  ret i8 %val
}

define i16 @load_unordered_i16(ptr %ptr) {
; CHECK-LABEL: load_unordered_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.h $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i16, ptr %ptr unordered, align 2
  ret i16 %val
}

define i32 @load_unordered_i32(ptr %ptr) {
; CHECK-LABEL: load_unordered_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i32, ptr %ptr unordered, align 4
  ret i32 %val
}

define i64 @load_unordered_i64(ptr %ptr) {
; CHECK-LABEL: load_unordered_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.d $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i64, ptr %ptr unordered, align 8
  ret i64 %val
}

define i8 @load_monotonic_i8(ptr %ptr) {
; CHECK-LABEL: load_monotonic_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.b $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i8, ptr %ptr monotonic, align 1
  ret i8 %val
}

define i16 @load_monotonic_i16(ptr %ptr) {
; CHECK-LABEL: load_monotonic_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.h $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i16, ptr %ptr monotonic, align 2
  ret i16 %val
}

define i32 @load_monotonic_i32(ptr %ptr) {
; CHECK-LABEL: load_monotonic_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i32, ptr %ptr monotonic, align 4
  ret i32 %val
}

define i64 @load_monotonic_i64(ptr %ptr) {
; CHECK-LABEL: load_monotonic_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.d $r4, $r4, 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i64, ptr %ptr monotonic, align 8
  ret i64 %val
}

define i8 @load_seq_cst_i8(ptr %ptr) {
; CHECK-LABEL: load_seq_cst_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.b $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i8, ptr %ptr seq_cst, align 1
  ret i8 %val
}

define i16 @load_seq_cst_i16(ptr %ptr) {
; CHECK-LABEL: load_seq_cst_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.h $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i16, ptr %ptr seq_cst, align 2
  ret i16 %val
}

define i32 @load_seq_cst_i32(ptr %ptr) {
; CHECK-LABEL: load_seq_cst_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i32, ptr %ptr seq_cst, align 4
  ret i32 %val
}

define i64 @load_seq_cst_i64(ptr %ptr) {
; CHECK-LABEL: load_seq_cst_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.d $r4, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  %val = load atomic i64, ptr %ptr seq_cst, align 8
  ret i64 %val
}

define void @store_release_i8(ptr %ptr, i8 signext %v) {
; CHECK-LABEL: store_release_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.b $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i8 %v, ptr %ptr release, align 1
  ret void
}

define void @store_release_i16(ptr %ptr, i16 signext %v) {
; CHECK-LABEL: store_release_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.h $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i16 %v, ptr %ptr release, align 2
  ret void
}

define void @store_release_i32(ptr %ptr, i32 signext %v) {
; CHECK-LABEL: store_release_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.w $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i32 %v, ptr %ptr release, align 4
  ret void
}

define void @store_release_i64(ptr %ptr, i64 %v) {
; CHECK-LABEL: store_release_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.d $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i64 %v, ptr %ptr release, align 8
  ret void
}

define void @store_unordered_i8(ptr %ptr, i8 signext %v) {
; CHECK-LABEL: store_unordered_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.b $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i8 %v, ptr %ptr unordered, align 1
  ret void
}

define void @store_unordered_i16(ptr %ptr, i16 signext %v) {
; CHECK-LABEL: store_unordered_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.h $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i16 %v, ptr %ptr unordered, align 2
  ret void
}

define void @store_unordered_i32(ptr %ptr, i32 signext %v) {
; CHECK-LABEL: store_unordered_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.w $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i32 %v, ptr %ptr unordered, align 4
  ret void
}

define void @store_unordered_i64(ptr %ptr, i64 %v) {
; CHECK-LABEL: store_unordered_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.d $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i64 %v, ptr %ptr unordered, align 8
  ret void
}

define void @store_monotonic_i8(ptr %ptr, i8 signext %v) {
; CHECK-LABEL: store_monotonic_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.b $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i8 %v, ptr %ptr monotonic, align 1
  ret void
}

define void @store_monotonic_i16(ptr %ptr, i16 signext %v) {
; CHECK-LABEL: store_monotonic_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.h $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i16 %v, ptr %ptr monotonic, align 2
  ret void
}

define void @store_monotonic_i32(ptr %ptr, i32 signext %v) {
; CHECK-LABEL: store_monotonic_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.w $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i32 %v, ptr %ptr monotonic, align 4
  ret void
}

define void @store_monotonic_i64(ptr %ptr, i64 %v) {
; CHECK-LABEL: store_monotonic_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.d $r5, $r4, 0
; CHECK-NEXT:    jr $ra
  store atomic i64 %v, ptr %ptr monotonic, align 8
  ret void
}

define void @store_seq_cst_i8(ptr %ptr, i8 signext %v) {
; CHECK-LABEL: store_seq_cst_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.b $r5, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  store atomic i8 %v, ptr %ptr seq_cst, align 1
  ret void
}

define void @store_seq_cst_i16(ptr %ptr, i16 signext %v) {
; CHECK-LABEL: store_seq_cst_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.h $r5, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  store atomic i16 %v, ptr %ptr seq_cst, align 2
  ret void
}

define void @store_seq_cst_i32(ptr %ptr, i32 signext %v) {
; CHECK-LABEL: store_seq_cst_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.w $r5, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  store atomic i32 %v, ptr %ptr seq_cst, align 4
  ret void
}

define void @store_seq_cst_i64(ptr %ptr, i64 %v) {
; CHECK-LABEL: store_seq_cst_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    st.d $r5, $r4, 0
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    jr $ra
  store atomic i64 %v, ptr %ptr seq_cst, align 8
  ret void
}
