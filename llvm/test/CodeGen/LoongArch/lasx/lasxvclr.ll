; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <32 x i8> @clri8(<32 x i8> %0, <32 x i8> %1) {
; CHECK-LABEL: clri8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitclr.b $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = shl <32 x i8> <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>, %1
  %4 = xor <32 x i8> %3, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %5 = and <32 x i8> %4, %0
  ret <32 x i8> %5
}

define <16 x i16> @clri16(<16 x i16> %0, <16 x i16> %1) {
; CHECK-LABEL: clri16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitclr.h $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = shl <16 x i16> <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>, %1
  %4 = xor <16 x i16> %3, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %5 = and <16 x i16> %4, %0
  ret <16 x i16> %5
}

define <8 x i32> @clri32(<8 x i32> %0, <8 x i32> %1) {
; CHECK-LABEL: clri32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitclr.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = shl <8 x i32> <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>, %1
  %4 = xor <8 x i32> %3, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %5 = and <8 x i32> %4, %0
  ret <8 x i32> %5
}

define <4 x i64> @clri64(<4 x i64> %0, <4 x i64> %1) {
; CHECK-LABEL: clri64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvbitclr.d $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = shl <4 x i64> <i64 1, i64 1, i64 1, i64 1>, %1
  %4 = xor <4 x i64> %3, <i64 -1, i64 -1, i64 -1, i64 -1>
  %5 = and <4 x i64> %4, %0
  ret <4 x i64> %5
}
