; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 < %s | FileCheck %s

define signext i32 @foo1(i64 %a, i64 %b) {
; CHECK-LABEL: foo1:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    add.w $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %add = add nsw i32 %conv1, %conv
  ret i32 %add
}

define signext i32 @foo2(i64 %a, i64 %b) {
; CHECK-LABEL: foo2:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sub.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %sub = sub nsw i32 %conv, %conv1
  ret i32 %sub
}

define signext i32 @foo3(i64 %a, i64 %b) {
; CHECK-LABEL: foo3:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sll.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %shl = shl i32 %conv, %conv1
  ret i32 %shl
}

define signext i32 @foo4(i64 %a, i64 %b) {
; CHECK-LABEL: foo4:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srl.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %shr = lshr i32 %conv, %conv1
  ret i32 %shr
}

define signext i32 @foo5(i64 %a, i64 %b) {
; CHECK-LABEL: foo5:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    mul.w $r4, $r5, $r4
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %mul = mul nsw i32 %conv1, %conv
  ret i32 %mul
}

define signext i32 @foo6(i64 %a, i64 %b) {
; CHECK-LABEL: foo6:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    sra.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %shr = ashr i32 %conv, %conv1
  ret i32 %shr
}

define signext i32 @sdiv(i64 %a, i64 %b) {
; CHECK-LABEL: sdiv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    div.w $r4, $r4, $r5
; CHECK-NEXT:    bne $r5, $zero, 8
; CHECK-NEXT:    break 7
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %div = sdiv i32 %conv, %conv1
  ret i32 %div
}

define signext i32 @udiv(i64 %a, i64 %b) {
; CHECK-LABEL: udiv:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.w $r5, $r5, 0
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    div.wu $r4, $r4, $r5
; CHECK-NEXT:    bne $r5, $zero, 8
; CHECK-NEXT:    break 7
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    jr $ra
entry:
  %conv = trunc i64 %a to i32
  %conv1 = trunc i64 %b to i32
  %div = udiv i32 %conv, %conv1
  ret i32 %div
}
