; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

declare <32 x i8> @llvm.loongarch.lasx.xvrepli.b(i32)
declare <16 x i16> @llvm.loongarch.lasx.xvrepli.h(i32)
declare <8 x i32> @llvm.loongarch.lasx.xvrepli.w(i32)
declare <4 x i64> @llvm.loongarch.lasx.xvrepli.d(i32)

declare <4 x double> @llvm.loongarch.lasx.xvpickve.d.f(<4 x double>, i32)
declare <8 x float> @llvm.loongarch.lasx.xvpickve.w.f(<8 x float>, i32)

define <32 x i8> @lasx_xvrepli_b() {
; CHECK-LABEL: lasx_xvrepli_b:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvldi $xr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <32 x i8> @llvm.loongarch.lasx.xvrepli.b(i32 2)
  ret <32 x i8> %0
}

define <16 x i16> @lasx_xvrepli_h() {
; CHECK-LABEL: lasx_xvrepli_h:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvldi $xr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <16 x i16> @llvm.loongarch.lasx.xvrepli.h(i32 2)
  ret <16 x i16> %0
}

define <8 x i32> @lasx_xvrepli_w() {
; CHECK-LABEL: lasx_xvrepli_w:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvldi $xr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <8 x i32> @llvm.loongarch.lasx.xvrepli.w(i32 2)
  ret <8 x i32> %0
}

define <4 x i64> @lasx_xvrepli_d() {
; CHECK-LABEL: lasx_xvrepli_d:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvldi $xr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <4 x i64> @llvm.loongarch.lasx.xvrepli.d(i32 2)
  ret <4 x i64> %0
}

define <4 x double> @lasx_xvpickve_d_f(<4 x double> %a) {
; CHECK-LABEL: lasx_xvpickve_d_f:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvpickve.d $xr0, $xr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <4 x double> @llvm.loongarch.lasx.xvpickve.d.f(<4 x double> %a, i32 2)
  ret <4 x double> %0
}

define <8 x float> @lasx_xvpickve_w_f(<8 x float> %a) {
; CHECK-LABEL: lasx_xvpickve_w_f:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvpickve.w $xr0, $xr0, 2
; CHECK-NEXT:    jr $ra
entry:
  %0 = tail call <8 x float> @llvm.loongarch.lasx.xvpickve.w.f(<8 x float> %a, i32 2)
  ret <8 x float> %0
}
