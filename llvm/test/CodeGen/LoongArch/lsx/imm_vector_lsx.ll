; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lsx  < %s | FileCheck %s

define <2 x i64> @build_lsx0(<2 x i64> %a) {
; CHECK-LABEL: build_lsx0:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.w $r4, $zero, -1
; CHECK-NEXT:    lu32i.d $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 4294967295, i64 4294967295>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx1(<2 x i64> %a) {
; CHECK-LABEL: build_lsx1:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu52i.d $r4, $zero, 2047
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 9218868437227405312, i64 9218868437227405312>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx2(<2 x i64> %a) {
; CHECK-LABEL: build_lsx2:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ori $r4, $zero, 2048
; CHECK-NEXT:    lu32i.d $r4, 524287
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 2251795518720000, i64 2251795518720000>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx3(<2 x i64> %a) {
; CHECK-LABEL: build_lsx3:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ori $r4, $zero, 4095
; CHECK-NEXT:    lu52i.d $r4, $r4, -1
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 -4503599627366401, i64 -4503599627366401>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx4(<2 x i64> %a) {
; CHECK-LABEL: build_lsx4:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ori $r4, $zero, 4095
; CHECK-NEXT:    lu32i.d $r4, -524288
; CHECK-NEXT:    lu52i.d $r4, $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 2251799813689343, i64 2251799813689343>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx5(<2 x i64> %a) {
; CHECK-LABEL: build_lsx5:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.w $r4, $zero, -2048
; CHECK-NEXT:    lu32i.d $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 4294965248, i64 4294965248>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx6(<2 x i64> %a) {
; CHECK-LABEL: build_lsx6:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.w $r4, $zero, -2048
; CHECK-NEXT:    lu52i.d $r4, $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 4503599627368448, i64 4503599627368448>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx7(<2 x i64> %a) {
; CHECK-LABEL: build_lsx7:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.w $r4, $zero, -2048
; CHECK-NEXT:    lu32i.d $r4, -524288
; CHECK-NEXT:    lu52i.d $r4, $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 2251804108650496, i64 2251804108650496>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx8(<2 x i64> %a) {
; CHECK-LABEL: build_lsx8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r4, -524288
; CHECK-NEXT:    lu32i.d $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 2147483648, i64 2147483648>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx9(<2 x i64> %a) {
; CHECK-LABEL: build_lsx9:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r4, -1
; CHECK-NEXT:    lu52i.d $r4, $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 4503599627366400, i64 4503599627366400>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx10(<2 x i64> %a) {
; CHECK-LABEL: build_lsx10:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r4, -524288
; CHECK-NEXT:    lu32i.d $r4, 0
; CHECK-NEXT:    lu52i.d $r4, $r4, 2047
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 9218868439374888960, i64 9218868439374888960>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx11(<2 x i64> %a) {
; CHECK-LABEL: build_lsx11:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r4, 524287
; CHECK-NEXT:    ori $r4, $r4, 2048
; CHECK-NEXT:    lu32i.d $r4, -1
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 -2147485696, i64 -2147485696>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx12(<2 x i64> %a) {
; CHECK-LABEL: build_lsx12:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r4, -524288
; CHECK-NEXT:    ori $r4, $r4, 2047
; CHECK-NEXT:    lu52i.d $r4, $r4, 2047
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 9223372034707294207, i64 9223372034707294207>
  ret <2 x i64> %b
}

define <2 x i64> @build_lsx13(<2 x i64> %a) {
; CHECK-LABEL: build_lsx13:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r4, -524288
; CHECK-NEXT:    ori $r4, $r4, 2048
; CHECK-NEXT:    lu32i.d $r4, -524288
; CHECK-NEXT:    lu52i.d $r4, $r4, 0
; CHECK-NEXT:    vreplgr2vr.d $vr1, $r4
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %b = add <2 x i64> %a, <i64 2251801961170944, i64 2251801961170944>
  ret <2 x i64> %b
}
