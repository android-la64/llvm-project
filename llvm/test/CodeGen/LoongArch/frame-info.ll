; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -relocation-model=pic -mtriple=loongarch64 -frame-pointer=all < %s | FileCheck %s

define void @trivial() {
; CHECK-LABEL: trivial:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    st.d $r22, $sp, 8 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 22, -8
; CHECK-NEXT:    addi.d $r22, $sp, 16
; CHECK-NEXT:    .cfi_def_cfa 22, 0
; CHECK-NEXT:    ld.d $r22, $sp, 8 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 16
; CHECK-NEXT:    jr $ra
  ret void
}

define void @stack_alloc(i32 signext %size) {
; CHECK-LABEL: stack_alloc:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.d $sp, $sp, -32
; CHECK-NEXT:    .cfi_def_cfa_offset 32
; CHECK-NEXT:    st.d $ra, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r22, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 1, -8
; CHECK-NEXT:    .cfi_offset 22, -16
; CHECK-NEXT:    addi.d $r22, $sp, 32
; CHECK-NEXT:    .cfi_def_cfa 22, 0
; CHECK-NEXT:    addi.w $r5, $zero, -16
; CHECK-NEXT:    lu32i.d $r5, 1
; CHECK-NEXT:    bstrpick.d $r4, $r4, 31, 0
; CHECK-NEXT:    addi.d $r4, $r4, 15
; CHECK-NEXT:    and $r4, $r4, $r5
; CHECK-NEXT:    sub.d $r4, $sp, $r4
; CHECK-NEXT:    move $sp, $r4
; CHECK-NEXT:    bl callee_with_args
; CHECK-NEXT:    addi.d $sp, $r22, -32
; CHECK-NEXT:    ld.d $r22, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 32
; CHECK-NEXT:    jr $ra
entry:
  %0 = alloca i8, i32 %size, align 16
  call void @callee_with_args(i8* nonnull %0)
  ret void
}

define void @branch_and_tail_call(i1 %a) {
; CHECK-LABEL: branch_and_tail_call:
; CHECK:       # %bb.0:
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    andi $r4, $r4, 1
; CHECK-NEXT:    beqz $r4, .LBB2_2
; CHECK-NEXT:  # %bb.1: # %blue_pill
; CHECK-NEXT:    b callee1
; CHECK-NEXT:  .LBB2_2: # %red_pill
; CHECK-NEXT:    addi.d $sp, $sp, -16
; CHECK-NEXT:    .cfi_def_cfa_offset 16
; CHECK-NEXT:    st.d $ra, $sp, 8 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r22, $sp, 0 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 1, -8
; CHECK-NEXT:    .cfi_offset 22, -16
; CHECK-NEXT:    addi.d $r22, $sp, 16
; CHECK-NEXT:    .cfi_def_cfa 22, 0
; CHECK-NEXT:    bl callee2
; CHECK-NEXT:    ld.d $r22, $sp, 0 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 8 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 16
; CHECK-NEXT:    jr $ra
  br i1 %a, label %blue_pill, label %red_pill
blue_pill:
  tail call void @callee1()
  ret void
red_pill:
  call void @callee2()
  ret void
}

define void @big_frame() {
; CHECK-LABEL: big_frame:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    addi.d $sp, $sp, -2032
; CHECK-NEXT:    .cfi_def_cfa_offset 2032
; CHECK-NEXT:    st.d $ra, $sp, 2024 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r22, $sp, 2016 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 1, -8
; CHECK-NEXT:    .cfi_offset 22, -16
; CHECK-NEXT:    addi.d $r22, $sp, 2032
; CHECK-NEXT:    .cfi_def_cfa 22, 0
; CHECK-NEXT:    addi.d $sp, $sp, -48
; CHECK-NEXT:    lu12i.w $r4, -1
; CHECK-NEXT:    ori $r4, $r4, 2016
; CHECK-NEXT:    add.d $r4, $r22, $r4
; CHECK-NEXT:    addi.d $r4, $r4, 0
; CHECK-NEXT:    bl callee_with_args
; CHECK-NEXT:    addi.d $sp, $sp, 48
; CHECK-NEXT:    ld.d $r22, $sp, 2016 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 2024 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 2032
; CHECK-NEXT:    jr $ra
entry:
  %0 = alloca i8, i32 2048, align 16
  call void @callee_with_args(i8* nonnull %0)
  ret void
}

define void @varargs_frame(i32 %i, ...) {
; CHECK-LABEL: varargs_frame:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    .cfi_def_cfa_offset 80
; CHECK-NEXT:    st.d $r22, $sp, 8 # 8-byte Folded Spill
; CHECK-NEXT:    .cfi_offset 22, -72
; CHECK-NEXT:    addi.d $r22, $sp, 16
; CHECK-NEXT:    .cfi_def_cfa 22, 64
; CHECK-NEXT:    st.d $r11, $r22, 56
; CHECK-NEXT:    st.d $r10, $r22, 48
; CHECK-NEXT:    st.d $r9, $r22, 40
; CHECK-NEXT:    st.d $r8, $r22, 32
; CHECK-NEXT:    st.d $r7, $r22, 24
; CHECK-NEXT:    st.d $r6, $r22, 16
; CHECK-NEXT:    st.d $r5, $r22, 8
; CHECK-NEXT:    ld.d $r22, $sp, 8 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  ret void
}

declare void @callee1()
declare void @callee2()
declare void @callee_with_args(i8*)
