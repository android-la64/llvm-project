; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <4 x i64> @uvadd(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: uvadd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvhaddw.du.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = shufflevector <8 x i32> %c, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2 = add <4 x i32> %0, %1
  %3 = zext <4 x i32> %2 to <4 x i64>
  ret <4 x i64> %3
}

define <4 x i64> @svadd(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: svadd:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvhaddw.d.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = shufflevector <8 x i32> %c, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %1 = shufflevector <8 x i32> %b, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2 = add nsw <4 x i32> %0, %1
  %3 = sext <4 x i32> %2 to <4 x i64>
  ret <4 x i64> %3
}

define <4 x i64> @uvsub(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: uvsub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvhsubw.du.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = shufflevector <8 x i32> %b, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1 = shufflevector <8 x i32> %c, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2 = sub <4 x i32> %0, %1
  %3 = zext <4 x i32> %2 to <4 x i64>
  ret <4 x i64> %3
}

define <4 x i64> @svsub(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: svsub:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvhsubw.d.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = shufflevector <8 x i32> %b, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %1 = shufflevector <8 x i32> %c, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2 = sub nsw <4 x i32> %0, %1
  %3 = sext <4 x i32> %2 to <4 x i64>
  ret <4 x i64> %3
}
