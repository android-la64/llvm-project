; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <4 x i64> @svaddev(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: svaddev:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvaddwev.d.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = add nsw <8 x i32> %c, %b
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2 = sext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @uvaddev(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: uvaddev:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvaddwev.d.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = add <8 x i32> %c, %b
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2 = zext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @uvsubev(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: uvsubev:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsubwev.d.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = sub <8 x i32> %b, %c
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2 = zext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @svsubev(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: svsubev:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsubwev.d.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = sub nsw <8 x i32> %b, %c
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 0, i32 2, i32 4, i32 6>
  %2 = sext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @uvaddod(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: uvaddod:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvaddwod.d.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = add <8 x i32> %c, %b
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2 = zext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @svaddod(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: svaddod:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvaddwod.d.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = add nsw <8 x i32> %c, %b
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2 = sext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @uvsubod(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: uvsubod:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsubwod.d.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = sub <8 x i32> %b, %c
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2 = zext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}

define <4 x i64> @svsubod(<8 x i32> %b, <8 x i32> %c) {
; CHECK-LABEL: svsubod:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvsubwod.d.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %0 = sub nsw <8 x i32> %b, %c
  %1 = shufflevector <8 x i32> %0, <8 x i32> undef, <4 x i32> <i32 1, i32 3, i32 5, i32 7>
  %2 = sext <4 x i32> %1 to <4 x i64>
  ret <4 x i64> %2
}
