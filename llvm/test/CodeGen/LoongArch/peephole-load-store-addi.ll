; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 < %s | FileCheck %s

define i8 @load_i8() nounwind {
; CHECK-LABEL: load_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.bu $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i8, i8* inttoptr (i64 40 to i8*), align 8
  ret i8 %a
}
define signext i8 @load_i8_sext() nounwind {
; CHECK-LABEL: load_i8_sext:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.b $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i8, i8* inttoptr (i64 40 to i8*), align 8
  ret i8 %a
}

define i16 @load_i16() nounwind {
; CHECK-LABEL: load_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.hu $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i16, i16* inttoptr (i64 40 to i16*), align 8
  ret i16 %a
}

define signext i16 @load_i16_sext() nounwind {
; CHECK-LABEL: load_i16_sext:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.h $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i16, i16* inttoptr (i64 40 to i16*), align 8
  ret i16 %a
}

define i32 @load_i32() nounwind {
; CHECK-LABEL: load_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i32, i32* inttoptr (i64 40 to i32*), align 8
  ret i32 %a
}

define signext i32 @load_i32_sext() nounwind {
; CHECK-LABEL: load_i32_sext:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.w $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i32, i32* inttoptr (i64 40 to i32*), align 8
  ret i32 %a
}

define i64 @load_i64() nounwind {
; CHECK-LABEL: load_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    ld.d $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  %a = load i64, i64* inttoptr (i64 40 to i64*), align 8
  ret i64 %a
}

define void @store_i8(i8 %v) nounwind {
; CHECK-LABEL: store_i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.b $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  store i8 %v, i8* inttoptr (i64 40 to i8*), align 8
  ret void
}

define void @store_i16(i16 %v) nounwind {
; CHECK-LABEL: store_i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.h $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  store i16 %v, i16* inttoptr (i64 40 to i16*), align 8
  ret void
}

define void @store_i32(i32 %v) nounwind {
; CHECK-LABEL: store_i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.w $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  store i32 %v, i32* inttoptr (i64 40 to i32*), align 8
  ret void
}

define void @store_i64(i64 %v) nounwind {
; CHECK-LABEL: store_i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    st.d $r4, $zero, 40
; CHECK-NEXT:    jr $ra
  store i64 %v, i64* inttoptr (i64 40 to i64*), align 8
  ret void
}
