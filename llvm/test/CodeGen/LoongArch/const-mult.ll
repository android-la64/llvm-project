; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=loongarch64-linux-gnu < %s | FileCheck %s


; This test is copied from Mips except the mul2730_32 and mul2730_64

define i32 @mul5_32(i32 signext %a) {
; CHECK-LABEL: mul5_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    alsl.w $r4, $r4, $r4, 2
; CHECK-NEXT:    jr $ra
entry:
  %mul = mul nsw i32 %a, 5
  ret i32 %mul
}

define i32 @mul27_32(i32 signext %a) {
; CHECK-LABEL: mul27_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    alsl.w $r5, $r4, $r4, 2
; CHECK-NEXT:    slli.w $r4, $r4, 5
; CHECK-NEXT:    sub.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %mul = mul nsw i32 %a, 27
  ret i32 %mul
}

define i32 @muln2147483643_32(i32 signext %a) {
; CHECK-LABEL: muln2147483643_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    alsl.w $r5, $r4, $r4, 2
; CHECK-NEXT:    slli.w $r4, $r4, 31
; CHECK-NEXT:    add.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %mul = mul nsw i32 %a, -2147483643
  ret i32 %mul
}

define i64 @muln9223372036854775805_64(i64 signext %a) {
; CHECK-LABEL: muln9223372036854775805_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    alsl.d $r5, $r4, $r4, 1
; CHECK-NEXT:    slli.d $r4, $r4, 63
; CHECK-NEXT:    add.d $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %mul = mul nsw i64 %a, -9223372036854775805
  ret i64 %mul
}

define i128 @muln170141183460469231731687303715884105725_128(i128 signext %a) {
; CHECK-LABEL: muln170141183460469231731687303715884105725_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srli.d $r6, $r4, 63
; CHECK-NEXT:    slli.d $r7, $r5, 1
; CHECK-NEXT:    or $r6, $r7, $r6
; CHECK-NEXT:    add.d $r5, $r6, $r5
; CHECK-NEXT:    slli.d $r7, $r4, 1
; CHECK-NEXT:    alsl.d $r6, $r4, $r4, 1
; CHECK-NEXT:    sltu $r7, $r6, $r7
; CHECK-NEXT:    bstrpick.d $r7, $r7, 31, 0
; CHECK-NEXT:    add.d $r5, $r5, $r7
; CHECK-NEXT:    slli.d $r4, $r4, 63
; CHECK-NEXT:    add.d $r5, $r4, $r5
; CHECK-NEXT:    move $r4, $r6
; CHECK-NEXT:    jr $ra
entry:
  %mul = mul nsw i128 %a, -170141183460469231731687303715884105725
  ret i128 %mul
}

define i128 @mul170141183460469231731687303715884105723_128(i128 signext %a) {
; CHECK-LABEL: mul170141183460469231731687303715884105723_128:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    srli.d $r6, $r4, 62
; CHECK-NEXT:    slli.d $r7, $r5, 2
; CHECK-NEXT:    or $r6, $r7, $r6
; CHECK-NEXT:    add.d $r5, $r6, $r5
; CHECK-NEXT:    slli.d $r6, $r4, 2
; CHECK-NEXT:    alsl.d $r7, $r4, $r4, 2
; CHECK-NEXT:    sltu $r6, $r7, $r6
; CHECK-NEXT:    bstrpick.d $r6, $r6, 31, 0
; CHECK-NEXT:    add.d $r5, $r5, $r6
; CHECK-NEXT:    slli.d $r4, $r4, 63
; CHECK-NEXT:    sub.d $r4, $r4, $r5
; CHECK-NEXT:    sltu $r5, $zero, $r7
; CHECK-NEXT:    bstrpick.d $r5, $r5, 31, 0
; CHECK-NEXT:    sub.d $r5, $r4, $r5
; CHECK-NEXT:    addi.d $r4, $zero, 0
; CHECK-NEXT:    sub.d $r4, $r4, $r7
; CHECK-NEXT:    jr $ra
entry:
  %mul = mul nsw i128 %a, 170141183460469231731687303715884105723
  ret i128 %mul
}

define i32 @mul42949673_32(i32 %a) {
; CHECK-LABEL: mul42949673_32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    lu12i.w $r5, 10485
; CHECK-NEXT:    ori $r5, $r5, 3113
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    mul.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
  %b = mul i32 %a, 42949673
  ret i32 %b
}

define i64 @mul42949673_64(i64 %a) {
; CHECK-LABEL: mul42949673_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 10485
; CHECK-NEXT:    ori $r5, $r5, 3113
; CHECK-NEXT:    mul.d $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i64 %a, 42949673
  ret i64 %b
}

define i32 @mul22224078_32(i32 %a) {
; CHECK-LABEL: mul22224078_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 5425
; CHECK-NEXT:    ori $r5, $r5, 3278
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    mul.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i32 %a, 22224078
  ret i32 %b
}

define i64 @mul22224078_64(i64 %a) {
; CHECK-LABEL: mul22224078_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 5425
; CHECK-NEXT:    ori $r5, $r5, 3278
; CHECK-NEXT:    mul.d $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i64 %a, 22224078
  ret i64 %b
}

define i32 @mul22245375_32(i32 %a) {
; CHECK-LABEL: mul22245375_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 5430
; CHECK-NEXT:    ori $r5, $r5, 4095
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    mul.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i32 %a, 22245375
  ret i32 %b
}

define i64 @mul22245375_64(i64 %a) {
; CHECK-LABEL: mul22245375_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 5430
; CHECK-NEXT:    ori $r5, $r5, 4095
; CHECK-NEXT:    mul.d $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i64 %a, 22245375
  ret i64 %b
}

define i32 @mul25165824_32(i32 %a) {
; CHECK-LABEL: mul25165824_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 5430
; CHECK-NEXT:    ori $r5, $r5, 4095
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    mul.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i32 %a, 22245375
  ret i32 %b
}

define i64 @mul25165824_64(i64 %a) {
; CHECK-LABEL: mul25165824_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.d $r5, $r4, 23
; CHECK-NEXT:    slli.d $r4, $r4, 24
; CHECK-NEXT:    add.d $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i64 %a, 25165824
  ret i64 %b
}

define i32 @mul33554432_32(i32 %a) {
; CHECK-LABEL: mul33554432_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    lu12i.w $r5, 5430
; CHECK-NEXT:    ori $r5, $r5, 4095
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    mul.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i32 %a, 22245375
  ret i32 %b
}

define i64 @mul33554432_64(i64 %a) {
; CHECK-LABEL: mul33554432_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.d $r4, $r4, 25
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i64 %a, 33554432
  ret i64 %b
}

define i32 @mul2730_32(i32 %a) {
; CHECK-LABEL: mul2730_32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    slli.w $r4, $r4, 0
; CHECK-NEXT:    ori $r5, $zero, 2730
; CHECK-NEXT:    mul.w $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i32 %a, 2730
  ret i32 %b
}

define i64 @mul2730_64(i64 %a) {
; CHECK-LABEL: mul2730_64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    ori $r5, $zero, 2730
; CHECK-NEXT:    mul.d $r4, $r4, $r5
; CHECK-NEXT:    jr $ra
entry:
  %b = mul i64 %a, 2730
  ret i64 %b
}
