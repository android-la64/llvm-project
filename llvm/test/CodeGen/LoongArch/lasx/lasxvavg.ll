; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <32 x i8> @lsxavgr_v32i8(<32 x i8> noundef %0, <32 x i8> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v32i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.b $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.b $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <32 x i8> %0, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %4 = add <32 x i8> %3, %1
  %5 = sdiv <32 x i8> %4, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  ret <32 x i8> %5
}

define <16 x i16> @lsxavgr_v16i16(<16 x i16> noundef %0, <16 x i16> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v16i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.h $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.h $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <16 x i16> %0, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4 = add <16 x i16> %3, %1
  %5 = sdiv <16 x i16> %4, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <16 x i16> %5
}

define <8 x i32> @lsxavgr_v8i32(<8 x i32> noundef %0, <8 x i32> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v8i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.w $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.w $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <8 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4 = add <8 x i32> %3, %1
  %5 = sdiv <8 x i32> %4, <i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2>
  ret <8 x i32> %5
}

define <4 x i64> @lsxavgr_v4i64(<4 x i64> noundef %0, <4 x i64> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v4i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.d $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.d $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <4 x i64> %0, <i64 1, i64 1, i64 1, i64 1>
  %4 = add <4 x i64> %3, %1
  %5 = sdiv <4 x i64> %4, <i64 2, i64 2, i64 2, i64 2>
  ret <4 x i64> %5
}

define <32 x i8> @lsxavgr_v32u8(<32 x i8> noundef %0, <32 x i8> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v32u8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.b $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.bu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <32 x i8> %0, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %4 = add <32 x i8> %3, %1
  %5 = lshr <32 x i8> %4, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  ret <32 x i8> %5
}

define <16 x i16> @lsxavgr_v16u16(<16 x i16> noundef %0, <16 x i16> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v16u16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.h $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.hu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <16 x i16> %0, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4 = add <16 x i16> %3, %1
  %5 = lshr <16 x i16> %4, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  ret <16 x i16> %5
}

define <8 x i32> @lsxavgr_v8u32(<8 x i32> noundef %0, <8 x i32> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v8u32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.w $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.wu $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <8 x i32> %0, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  %4 = add <8 x i32> %3, %1
  %5 = lshr <8 x i32> %4, <i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1>
  ret <8 x i32> %5
}

define <4 x i64> @lsxavgr_v4u64(<4 x i64> noundef %0, <4 x i64> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxavgr_v4u64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    xvadd.d $xr0, $xr0, $xr1
; CHECK-NEXT:    xvldi $xr1, 1
; CHECK-NEXT:    xvavg.du $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
  %3 = add <4 x i64> %0, <i64 1, i64 1, i64 1, i64 1>
  %4 = add <4 x i64> %3, %1
  %5 = lshr <4 x i64> %4, <i64 1, i64 1, i64 1, i64 1>
  ret <4 x i64> %5
}
