; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lsx  < %s | FileCheck %s

define <16 x i8> @lsxvavg_v16i8(<16 x i8> noundef %0, <16 x i8> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v16i8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.b $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.b $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <16 x i8> %0, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %4 = add <16 x i8> %3, %1
  %5 = sdiv <16 x i8> %4, <i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2, i8 2>
  ret <16 x i8> %5
}

define <8 x i16> @lsxvavg_v8i16(<8 x i16> noundef %0, <8 x i16> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v8i16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.h $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.h $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <8 x i16> %0, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4 = add <8 x i16> %3, %1
  %5 = sdiv <8 x i16> %4, <i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2, i16 2>
  ret <8 x i16> %5
}

define <4 x i32> @lsxvavg_v4i32(<4 x i32> noundef %0, <4 x i32> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v4i32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.w $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.w $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <4 x i32> %0, <i32 1, i32 1, i32 1, i32 1>
  %4 = add <4 x i32> %3, %1
  %5 = sdiv <4 x i32> %4, <i32 2, i32 2, i32 2, i32 2>
  ret <4 x i32> %5
}

define <2 x i64> @lsxvavg_v2i64(<2 x i64> noundef %0, <2 x i64> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v2i64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.d $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <2 x i64> %0, <i64 1, i64 1>
  %4 = add <2 x i64> %3, %1
  %5 = sdiv <2 x i64> %4, <i64 2, i64 2>
  ret <2 x i64> %5
}

define <16 x i8> @lsxvavg_v16u8(<16 x i8> noundef %0, <16 x i8> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v16u8:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.b $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.bu $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <16 x i8> %0, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  %4 = add <16 x i8> %3, %1
  %5 = lshr <16 x i8> %4, <i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1, i8 1>
  ret <16 x i8> %5
}

define <8 x i16> @lsxvavg_v8u16(<8 x i16> noundef %0, <8 x i16> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v8u16:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.h $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.hu $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <8 x i16> %0, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  %4 = add <8 x i16> %3, %1
  %5 = lshr <8 x i16> %4, <i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1, i16 1>
  ret <8 x i16> %5
}

define <4 x i32> @lsxvavg_v4u32(<4 x i32> noundef %0, <4 x i32> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v4u32:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.w $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.wu $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <4 x i32> %0, <i32 1, i32 1, i32 1, i32 1>
  %4 = add <4 x i32> %3, %1
  %5 = lshr <4 x i32> %4, <i32 1, i32 1, i32 1, i32 1>
  ret <4 x i32> %5
}

define <2 x i64> @lsxvavg_v2u64(<2 x i64> noundef %0, <2 x i64> noundef %1) local_unnamed_addr #0 {
; CHECK-LABEL: lsxvavg_v2u64:
; CHECK:       # %bb.0:
; CHECK-NEXT:    vadd.d $vr0, $vr0, $vr1
; CHECK-NEXT:    vldi $vr1, 1
; CHECK-NEXT:    vavg.du $vr0, $vr0, $vr1
; CHECK-NEXT:    jr $ra
  %3 = add <2 x i64> %0, <i64 1, i64 1>
  %4 = add <2 x i64> %3, %1
  %5 = lshr <2 x i64> %4, <i64 1, i64 1>
  ret <2 x i64> %5
}
