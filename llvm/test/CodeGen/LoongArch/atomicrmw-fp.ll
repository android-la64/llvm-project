; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc --mtriple=loongarch64 < %s | FileCheck %s

define float @float_fadd_acquire(ptr %p) nounwind {
; CHECK-LABEL: float_fadd_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB0_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB0_2 Depth 2
; CHECK-NEXT:    fadd.s $f2, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB0_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB0_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB0_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB0_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB0_2
; CHECK-NEXT:  .LBB0_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB0_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB0_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, float 1.0 acquire, align 4
  ret float %v
}

define float @float_fsub_acquire(ptr %p) nounwind {
; CHECK-LABEL: float_fsub_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:  .LBB1_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB1_2 Depth 2
; CHECK-NEXT:    lu12i.w $r5, .LCPI1_0
; CHECK-NEXT:    ori $r5, $r5, .LCPI1_0
; CHECK-NEXT:    lu32i.d $r5, .LCPI1_0
; CHECK-NEXT:    lu52i.d $r5, $r5, .LCPI1_0
; CHECK-NEXT:    fld.s $f1, $r5, 0
; CHECK-NEXT:    fadd.s $f1, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f1
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB1_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB1_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB1_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB1_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB1_2
; CHECK-NEXT:  .LBB1_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB1_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB1_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, float 1.0 acquire, align 4
  ret float %v
}

define float @float_fmin_acquire(ptr %p) nounwind {
; CHECK-LABEL: float_fmin_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB2_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB2_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmin.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB2_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB2_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB2_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB2_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB2_2
; CHECK-NEXT:  .LBB2_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB2_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB2_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, float 1.0 acquire, align 4
  ret float %v
}

define float @float_fmax_acquire(ptr %p) nounwind {
; CHECK-LABEL: float_fmax_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB3_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB3_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmax.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB3_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB3_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB3_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB3_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB3_2
; CHECK-NEXT:  .LBB3_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB3_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB3_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, float 1.0 acquire, align 4
  ret float %v
}

define double @double_fadd_acquire(ptr %p) nounwind {
; CHECK-LABEL: double_fadd_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 2
; CHECK-NEXT:  .LBB4_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fadd.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB4_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, double 1.0 acquire, align 4
  ret double %v
}

define double @double_fsub_acquire(ptr %p) nounwind {
; CHECK-LABEL: double_fsub_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -64
; CHECK-NEXT:    st.d $ra, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 2
; CHECK-NEXT:  .LBB5_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    lu12i.w $r4, .LCPI5_0
; CHECK-NEXT:    ori $r4, $r4, .LCPI5_0
; CHECK-NEXT:    lu32i.d $r4, .LCPI5_0
; CHECK-NEXT:    lu52i.d $r4, $r4, .LCPI5_0
; CHECK-NEXT:    fld.d $f1, $r4, 0
; CHECK-NEXT:    fadd.d $f0, $f0, $f1
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB5_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 64
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, double 1.0 acquire, align 4
  ret double %v
}

define double @double_fmin_acquire(ptr %p) nounwind {
; CHECK-LABEL: double_fmin_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 2
; CHECK-NEXT:  .LBB6_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmin.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB6_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, double 1.0 acquire, align 4
  ret double %v
}

define double @double_fmax_acquire(ptr %p) nounwind {
; CHECK-LABEL: double_fmax_acquire:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 2
; CHECK-NEXT:  .LBB7_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmax.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB7_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, double 1.0 acquire, align 4
  ret double %v
}

define float @float_fadd_release(ptr %p) nounwind {
; CHECK-LABEL: float_fadd_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB8_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB8_2 Depth 2
; CHECK-NEXT:    fadd.s $f2, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB8_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB8_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB8_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB8_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB8_2
; CHECK-NEXT:  .LBB8_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB8_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB8_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, float 1.0 release, align 4
  ret float %v
}

define float @float_fsub_release(ptr %p) nounwind {
; CHECK-LABEL: float_fsub_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:  .LBB9_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB9_2 Depth 2
; CHECK-NEXT:    lu12i.w $r5, .LCPI9_0
; CHECK-NEXT:    ori $r5, $r5, .LCPI9_0
; CHECK-NEXT:    lu32i.d $r5, .LCPI9_0
; CHECK-NEXT:    lu52i.d $r5, $r5, .LCPI9_0
; CHECK-NEXT:    fld.s $f1, $r5, 0
; CHECK-NEXT:    fadd.s $f1, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f1
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB9_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB9_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB9_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB9_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB9_2
; CHECK-NEXT:  .LBB9_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB9_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB9_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, float 1.0 release, align 4
  ret float %v
}

define float @float_fmin_release(ptr %p) nounwind {
; CHECK-LABEL: float_fmin_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB10_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB10_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmin.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB10_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB10_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB10_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB10_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB10_2
; CHECK-NEXT:  .LBB10_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB10_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB10_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, float 1.0 release, align 4
  ret float %v
}

define float @float_fmax_release(ptr %p) nounwind {
; CHECK-LABEL: float_fmax_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB11_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB11_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmax.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB11_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB11_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB11_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB11_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB11_2
; CHECK-NEXT:  .LBB11_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB11_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB11_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, float 1.0 release, align 4
  ret float %v
}

define double @double_fadd_release(ptr %p) nounwind {
; CHECK-LABEL: double_fadd_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 3
; CHECK-NEXT:    addi.d $r28, $zero, 0
; CHECK-NEXT:  .LBB12_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    fadd.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB12_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, double 1.0 release, align 4
  ret double %v
}

define double @double_fsub_release(ptr %p) nounwind {
; CHECK-LABEL: double_fsub_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    st.d $ra, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 3
; CHECK-NEXT:    addi.d $r28, $zero, 0
; CHECK-NEXT:  .LBB13_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    lu12i.w $r4, .LCPI13_0
; CHECK-NEXT:    ori $r4, $r4, .LCPI13_0
; CHECK-NEXT:    lu32i.d $r4, .LCPI13_0
; CHECK-NEXT:    lu52i.d $r4, $r4, .LCPI13_0
; CHECK-NEXT:    fld.d $f1, $r4, 0
; CHECK-NEXT:    fadd.d $f0, $f0, $f1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB13_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, double 1.0 release, align 4
  ret double %v
}

define double @double_fmin_release(ptr %p) nounwind {
; CHECK-LABEL: double_fmin_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 3
; CHECK-NEXT:    addi.d $r28, $zero, 0
; CHECK-NEXT:  .LBB14_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmin.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB14_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, double 1.0 release, align 4
  ret double %v
}

define double @double_fmax_release(ptr %p) nounwind {
; CHECK-LABEL: double_fmax_release:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 3
; CHECK-NEXT:    addi.d $r28, $zero, 0
; CHECK-NEXT:  .LBB15_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmax.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB15_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, double 1.0 release, align 4
  ret double %v
}

define float @float_fadd_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: float_fadd_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB16_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB16_2 Depth 2
; CHECK-NEXT:    fadd.s $f2, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB16_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB16_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB16_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB16_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB16_2
; CHECK-NEXT:  .LBB16_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB16_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB16_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, float 1.0 acq_rel, align 4
  ret float %v
}

define float @float_fsub_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: float_fsub_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:  .LBB17_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB17_2 Depth 2
; CHECK-NEXT:    lu12i.w $r5, .LCPI17_0
; CHECK-NEXT:    ori $r5, $r5, .LCPI17_0
; CHECK-NEXT:    lu32i.d $r5, .LCPI17_0
; CHECK-NEXT:    lu52i.d $r5, $r5, .LCPI17_0
; CHECK-NEXT:    fld.s $f1, $r5, 0
; CHECK-NEXT:    fadd.s $f1, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f1
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB17_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB17_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB17_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB17_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB17_2
; CHECK-NEXT:  .LBB17_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB17_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB17_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, float 1.0 acq_rel, align 4
  ret float %v
}

define float @float_fmin_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: float_fmin_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB18_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB18_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmin.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB18_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB18_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB18_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB18_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB18_2
; CHECK-NEXT:  .LBB18_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB18_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB18_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, float 1.0 acq_rel, align 4
  ret float %v
}

define float @float_fmax_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: float_fmax_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB19_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB19_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmax.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB19_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB19_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB19_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB19_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB19_2
; CHECK-NEXT:  .LBB19_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB19_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB19_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, float 1.0 acq_rel, align 4
  ret float %v
}

define double @double_fadd_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: double_fadd_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 4
; CHECK-NEXT:    addi.d $r28, $zero, 2
; CHECK-NEXT:  .LBB20_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    fadd.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB20_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, double 1.0 acq_rel, align 4
  ret double %v
}

define double @double_fsub_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: double_fsub_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    st.d $ra, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 4
; CHECK-NEXT:    addi.d $r28, $zero, 2
; CHECK-NEXT:  .LBB21_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    lu12i.w $r4, .LCPI21_0
; CHECK-NEXT:    ori $r4, $r4, .LCPI21_0
; CHECK-NEXT:    lu32i.d $r4, .LCPI21_0
; CHECK-NEXT:    lu52i.d $r4, $r4, .LCPI21_0
; CHECK-NEXT:    fld.d $f1, $r4, 0
; CHECK-NEXT:    fadd.d $f0, $f0, $f1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB21_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, double 1.0 acq_rel, align 4
  ret double %v
}

define double @double_fmin_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: double_fmin_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 4
; CHECK-NEXT:    addi.d $r28, $zero, 2
; CHECK-NEXT:  .LBB22_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmin.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB22_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, double 1.0 acq_rel, align 4
  ret double %v
}

define double @double_fmax_acq_rel(ptr %p) nounwind {
; CHECK-LABEL: double_fmax_acq_rel:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r28, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 4
; CHECK-NEXT:    addi.d $r28, $zero, 2
; CHECK-NEXT:  .LBB23_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmax.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r28
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB23_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r28, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, double 1.0 acq_rel, align 4
  ret double %v
}

define float @float_fadd_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: float_fadd_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB24_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB24_2 Depth 2
; CHECK-NEXT:    fadd.s $f2, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB24_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB24_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB24_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB24_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB24_2
; CHECK-NEXT:  .LBB24_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB24_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB24_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, float 1.0 seq_cst, align 4
  ret float %v
}

define float @float_fsub_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: float_fsub_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:  .LBB25_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB25_2 Depth 2
; CHECK-NEXT:    lu12i.w $r5, .LCPI25_0
; CHECK-NEXT:    ori $r5, $r5, .LCPI25_0
; CHECK-NEXT:    lu32i.d $r5, .LCPI25_0
; CHECK-NEXT:    lu52i.d $r5, $r5, .LCPI25_0
; CHECK-NEXT:    fld.s $f1, $r5, 0
; CHECK-NEXT:    fadd.s $f1, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f1
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB25_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB25_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB25_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB25_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB25_2
; CHECK-NEXT:  .LBB25_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB25_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB25_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, float 1.0 seq_cst, align 4
  ret float %v
}

define float @float_fmin_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: float_fmin_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB26_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB26_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmin.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB26_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB26_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB26_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB26_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB26_2
; CHECK-NEXT:  .LBB26_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB26_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB26_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, float 1.0 seq_cst, align 4
  ret float %v
}

define float @float_fmax_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: float_fmax_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB27_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB27_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmax.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB27_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB27_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB27_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB27_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB27_2
; CHECK-NEXT:  .LBB27_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB27_1 Depth=1
; CHECK-NEXT:    dbar 0
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB27_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, float 1.0 seq_cst, align 4
  ret float %v
}

define double @double_fadd_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: double_fadd_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 5
; CHECK-NEXT:  .LBB28_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fadd.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB28_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, double 1.0 seq_cst, align 4
  ret double %v
}

define double @double_fsub_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: double_fsub_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -64
; CHECK-NEXT:    st.d $ra, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 5
; CHECK-NEXT:  .LBB29_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    lu12i.w $r4, .LCPI29_0
; CHECK-NEXT:    ori $r4, $r4, .LCPI29_0
; CHECK-NEXT:    lu32i.d $r4, .LCPI29_0
; CHECK-NEXT:    lu52i.d $r4, $r4, .LCPI29_0
; CHECK-NEXT:    fld.d $f1, $r4, 0
; CHECK-NEXT:    fadd.d $f0, $f0, $f1
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB29_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 64
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, double 1.0 seq_cst, align 4
  ret double %v
}

define double @double_fmin_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: double_fmin_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 5
; CHECK-NEXT:  .LBB30_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmin.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB30_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, double 1.0 seq_cst, align 4
  ret double %v
}

define double @double_fmax_seq_cst(ptr %p) nounwind {
; CHECK-LABEL: double_fmax_seq_cst:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 5
; CHECK-NEXT:  .LBB31_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmax.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB31_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, double 1.0 seq_cst, align 4
  ret double %v
}

define float @float_fadd_monotonic(ptr %p) nounwind {
; CHECK-LABEL: float_fadd_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB32_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB32_2 Depth 2
; CHECK-NEXT:    fadd.s $f2, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB32_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB32_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB32_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB32_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB32_2
; CHECK-NEXT:  .LBB32_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB32_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB32_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, float 1.0 monotonic, align 4
  ret float %v
}

define float @float_fsub_monotonic(ptr %p) nounwind {
; CHECK-LABEL: float_fsub_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:  .LBB33_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB33_2 Depth 2
; CHECK-NEXT:    lu12i.w $r5, .LCPI33_0
; CHECK-NEXT:    ori $r5, $r5, .LCPI33_0
; CHECK-NEXT:    lu32i.d $r5, .LCPI33_0
; CHECK-NEXT:    lu52i.d $r5, $r5, .LCPI33_0
; CHECK-NEXT:    fld.s $f1, $r5, 0
; CHECK-NEXT:    fadd.s $f1, $f0, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f1
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB33_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB33_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB33_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB33_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB33_2
; CHECK-NEXT:  .LBB33_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB33_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB33_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, float 1.0 monotonic, align 4
  ret float %v
}

define float @float_fmin_monotonic(ptr %p) nounwind {
; CHECK-LABEL: float_fmin_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB34_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB34_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmin.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB34_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB34_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB34_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB34_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB34_2
; CHECK-NEXT:  .LBB34_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB34_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB34_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, float 1.0 monotonic, align 4
  ret float %v
}

define float @float_fmax_monotonic(ptr %p) nounwind {
; CHECK-LABEL: float_fmax_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    fld.s $f0, $r4, 0
; CHECK-NEXT:    addi.w $r5, $zero, 1
; CHECK-NEXT:    movgr2fr.w $f1, $r5
; CHECK-NEXT:    ffint.s.w $f1, $f1
; CHECK-NEXT:  .LBB35_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Loop Header: Depth=1
; CHECK-NEXT:    # Child Loop BB35_2 Depth 2
; CHECK-NEXT:    fmax.s $f2, $f0, $f0
; CHECK-NEXT:    fmax.s $f2, $f2, $f1
; CHECK-NEXT:    movfr2gr.s $r5, $f2
; CHECK-NEXT:    movfr2gr.s $r6, $f0
; CHECK-NEXT:  .LBB35_2: # %atomicrmw.start
; CHECK-NEXT:    # Parent Loop BB35_1 Depth=1
; CHECK-NEXT:    # => This Inner Loop Header: Depth=2
; CHECK-NEXT:    ll.w $r7, $r4, 0
; CHECK-NEXT:    bne $r7, $r6, .LBB35_4
; CHECK-NEXT:  # %bb.3: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB35_2 Depth=2
; CHECK-NEXT:    move $r8, $r5
; CHECK-NEXT:    sc.w $r8, $r4, 0
; CHECK-NEXT:    beq $r8, $zero, .LBB35_2
; CHECK-NEXT:  .LBB35_4: # %atomicrmw.start
; CHECK-NEXT:    # in Loop: Header=BB35_1 Depth=1
; CHECK-NEXT:    dbar 1792
; CHECK-NEXT:    movgr2fr.w $f0, $r7
; CHECK-NEXT:    bne $r7, $r6, .LBB35_1
; CHECK-NEXT:  # %bb.5: # %atomicrmw.end
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, float 1.0 monotonic, align 4
  ret float %v
}

define double @double_fadd_monotonic(ptr %p) nounwind {
; CHECK-LABEL: double_fadd_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 0
; CHECK-NEXT:  .LBB36_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fadd.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB36_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fadd ptr %p, double 1.0 monotonic, align 4
  ret double %v
}

define double @double_fsub_monotonic(ptr %p) nounwind {
; CHECK-LABEL: double_fsub_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -64
; CHECK-NEXT:    st.d $ra, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 16 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 8
; CHECK-NEXT:    addi.d $r26, $sp, 0
; CHECK-NEXT:    addi.d $r27, $zero, 0
; CHECK-NEXT:  .LBB37_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    lu12i.w $r4, .LCPI37_0
; CHECK-NEXT:    ori $r4, $r4, .LCPI37_0
; CHECK-NEXT:    lu32i.d $r4, .LCPI37_0
; CHECK-NEXT:    lu52i.d $r4, $r4, .LCPI37_0
; CHECK-NEXT:    fld.d $f1, $r4, 0
; CHECK-NEXT:    fadd.d $f0, $f0, $f1
; CHECK-NEXT:    fst.d $f0, $sp, 0
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 8
; CHECK-NEXT:    beqz $r4, .LBB37_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 16 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 64
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fsub ptr %p, double 1.0 monotonic, align 4
  ret double %v
}

define double @double_fmin_monotonic(ptr %p) nounwind {
; CHECK-LABEL: double_fmin_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 0
; CHECK-NEXT:  .LBB38_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmin.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB38_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmin ptr %p, double 1.0 monotonic, align 4
  ret double %v
}

define double @double_fmax_monotonic(ptr %p) nounwind {
; CHECK-LABEL: double_fmax_monotonic:
; CHECK:       # %bb.0:
; CHECK-NEXT:    addi.d $sp, $sp, -80
; CHECK-NEXT:    fst.d $f24, $sp, 72 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $ra, $sp, 64 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r27, $sp, 56 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r26, $sp, 48 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r25, $sp, 40 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r24, $sp, 32 # 8-byte Folded Spill
; CHECK-NEXT:    st.d $r23, $sp, 24 # 8-byte Folded Spill
; CHECK-NEXT:    move $r23, $r4
; CHECK-NEXT:    fld.d $f0, $r4, 0
; CHECK-NEXT:    addi.d $r4, $zero, 1
; CHECK-NEXT:    movgr2fr.d $f1, $r4
; CHECK-NEXT:    ffint.d.l $f24, $f1
; CHECK-NEXT:    addi.d $r24, $zero, 8
; CHECK-NEXT:    addi.d $r25, $sp, 16
; CHECK-NEXT:    addi.d $r26, $sp, 8
; CHECK-NEXT:    addi.d $r27, $zero, 0
; CHECK-NEXT:  .LBB39_1: # %atomicrmw.start
; CHECK-NEXT:    # =>This Inner Loop Header: Depth=1
; CHECK-NEXT:    fst.d $f0, $sp, 16
; CHECK-NEXT:    fmax.d $f0, $f0, $f0
; CHECK-NEXT:    fmax.d $f0, $f0, $f24
; CHECK-NEXT:    fst.d $f0, $sp, 8
; CHECK-NEXT:    move $r4, $r24
; CHECK-NEXT:    move $r5, $r23
; CHECK-NEXT:    move $r6, $r25
; CHECK-NEXT:    move $r7, $r26
; CHECK-NEXT:    move $r8, $r27
; CHECK-NEXT:    move $r9, $r27
; CHECK-NEXT:    lu12i.w $ra, __atomic_compare_exchange
; CHECK-NEXT:    ori $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu32i.d $ra, __atomic_compare_exchange
; CHECK-NEXT:    lu52i.d $ra, $ra, __atomic_compare_exchange
; CHECK-NEXT:    jirl $ra, $ra, 0
; CHECK-NEXT:    fld.d $f0, $sp, 16
; CHECK-NEXT:    beqz $r4, .LBB39_1
; CHECK-NEXT:  # %bb.2: # %atomicrmw.end
; CHECK-NEXT:    ld.d $r23, $sp, 24 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r24, $sp, 32 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r25, $sp, 40 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r26, $sp, 48 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $r27, $sp, 56 # 8-byte Folded Reload
; CHECK-NEXT:    ld.d $ra, $sp, 64 # 8-byte Folded Reload
; CHECK-NEXT:    fld.d $f24, $sp, 72 # 8-byte Folded Reload
; CHECK-NEXT:    addi.d $sp, $sp, 80
; CHECK-NEXT:    jr $ra
  %v = atomicrmw fmax ptr %p, double 1.0 monotonic, align 4
  ret double %v
}
