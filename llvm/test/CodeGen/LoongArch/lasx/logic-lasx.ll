; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -march=loongarch64 -mattr=+lasx  < %s | FileCheck %s

define <4 x i64> @not_v4i64(<4 x i64> %a) {
; CHECK-LABEL: not_v4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvnor.v $xr0, $xr0, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <4 x i64> %a, <i64 -1, i64 -1, i64 -1, i64 -1>
  ret <4 x i64> %not
}

define <8 x i32> @not_v8i32(<8 x i32> %a) {
; CHECK-LABEL: not_v8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvnor.v $xr0, $xr0, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <8 x i32> %a, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  ret <8 x i32> %not
}

define <16 x i16> @not_v16i16(<16 x i16> %a) {
; CHECK-LABEL: not_v16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvnor.v $xr0, $xr0, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <16 x i16> %a, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  ret <16 x i16> %not
}

define <32 x i8> @not_v32i8(<32 x i8> %a) {
; CHECK-LABEL: not_v32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvxori.b $xr0, $xr0, 255
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <32 x i8> %a, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  ret <32 x i8> %not
}

define <4 x i64> @andn_v4i64(<4 x i64> %a, <4 x i64> %b) {
; CHECK-LABEL: andn_v4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvandn.v $xr0, $xr1, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <4 x i64> %b, <i64 -1, i64 -1, i64 -1, i64 -1>
  %and = and <4 x i64> %not, %a
  ret <4 x i64> %and
}

define <8 x i32> @andn_v8i32(<8 x i32> %a, <8 x i32> %b) {
; CHECK-LABEL: andn_v8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvandn.v $xr0, $xr1, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <8 x i32> %b, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %and = and <8 x i32> %not, %a
  ret <8 x i32> %and
}

define <16 x i16> @andn_v16i16(<16 x i16> %a, <16 x i16> %b) {
; CHECK-LABEL: andn_v16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvandn.v $xr0, $xr1, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <16 x i16> %b, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %and = and <16 x i16> %not, %a
  ret <16 x i16> %and
}

define <32 x i8> @andn_v32i8(<32 x i8> %a, <32 x i8> %b) {
; CHECK-LABEL: andn_v32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvandn.v $xr0, $xr1, $xr0
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <32 x i8> %b, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %and = and <32 x i8> %not, %a
  ret <32 x i8> %and
}

define <4 x i64> @orn_v4i64(<4 x i64> %a, <4 x i64> %b) {
; CHECK-LABEL: orn_v4i64:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvorn.v $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <4 x i64> %b, <i64 -1, i64 -1, i64 -1, i64 -1>
  %or = or <4 x i64> %not, %a
  ret <4 x i64> %or
}

define <8 x i32> @orn_v8i32(<8 x i32> %a, <8 x i32> %b) {
; CHECK-LABEL: orn_v8i32:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvorn.v $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <8 x i32> %b, <i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1, i32 -1>
  %or = or <8 x i32> %not, %a
  ret <8 x i32> %or
}

define <16 x i16> @orn_v16i16(<16 x i16> %a, <16 x i16> %b) {
; CHECK-LABEL: orn_v16i16:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvorn.v $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <16 x i16> %b, <i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1, i16 -1>
  %or = or <16 x i16> %not, %a
  ret <16 x i16> %or
}

define <32 x i8> @orn_v32i8(<32 x i8> %a, <32 x i8> %b) {
; CHECK-LABEL: orn_v32i8:
; CHECK:       # %bb.0: # %entry
; CHECK-NEXT:    xvorn.v $xr0, $xr0, $xr1
; CHECK-NEXT:    jr $ra
entry:
  %not = xor <32 x i8> %b, <i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1, i8 -1>
  %or = or <32 x i8> %not, %a
  ret <32 x i8> %or
}
